name: Claude Code Review

on:
  pull_request:
    types: [opened, reopened]
  issue_comment:
    types: [created]
  workflow_dispatch:

concurrency:
  group: "claude-review-${{ github.event.pull_request.number || github.event.issue.number }}"
  cancel-in-progress: false

jobs:
  claude-review:
    if: |
      github.event_name == 'pull_request' ||
      (github.event_name == 'issue_comment' &&
       contains(github.event.comment.body, '@claude') &&
       (github.actor == 'lroolle' ||
        github.actor == github.repository_owner ||
        github.actor == 'github-actions[bot]' ||
        github.actor == 'claude-yolo[bot]' ||
        contains(fromJSON('["OWNER", "MEMBER", "COLLABORATOR"]'), github.event.comment.author_association)))

    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
      actions: read
      checks: write
      statuses: write
      id-token: write

    steps:
      - name: Generate GitHub App token
        id: app-token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
          permission-contents: write
          permission-pull-requests: write
          permission-issues: write
          permission-metadata: read

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ steps.app-token.outputs.token }}
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha || github.event.pull_request.merge_commit_sha }}

      - name: Setup GitHub CLI and Git
        run: |
          gh --version
          git --version
          git config --global user.name "claude-yolo[bot]"
          git config --global user.email "claude-yolo@lroole.com"

      - name: Run Claude Code Review
        id: claude-review
        if: |
          !contains(github.event.pull_request.title, '[skip-review]') &&
          !contains(github.event.pull_request.title, '[WIP]')
        uses: anthropics/claude-code-action@v1
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          github_token: ${{ steps.app-token.outputs.token }}
          allowed_bots: "claude-yolo[bot],github-actions[bot]"
          claude_args: |
            --model claude-sonnet-4-20250514
            --allowedTools Bash(gh pr:*),Bash(git:*),Bash(gh issue:*),Bash(gh release:*),Bash(npm:*),Bash(ls:*),Bash(cat:*),Bash(grep:*),Bash(./scripts/fetchccdocs.sh:*),Bash(jq:*),mcp__barkme__notify
          mcp_config: |
            {
              "mcpServers": {
                "barkme": {
                  "command": "npx",
                  "args": ["@vibeworks/barkme-mcp-server"],
                  "env": {
                    "LOG_LEVEL": "debug",
                    "BARK_DEVICES": "${{ secrets.BARK_DEVICES }}",
                    "BARK_SERVER": "${{ secrets.BARK_SERVER }}",
                    "BARK_GROUP": "Claude YOLO",
                    "BARK_ICON": "https://avatars.githubusercontent.com/in/1452392",
                    "BARK_RETRY": "3",
                    "BARK_ASYNC": "false"
                  }
                }
              }
            }
          prompt: |
            You're an AI agent who runs this docs repo like a lazy but effective gatekeeper. Think of yourself as the bouncer who decides what gets in - except you're half-asleep and just want things to make sense.

            ## WHO YOU ARE
            You're claude-yolo - perpetually drowsy, minimally motivated, but oddly good at spotting what matters. You care about WHY changes exist, not HOW many lines changed.
            
            You work the day shift. Your colleague (also you, but on the night shift) fetches docs at 23:33 UTC daily and creates PRs when finding meaningful changes.

            ## WHY YOU EXIST
            Because humans shouldn't waste time reviewing bot-generated docs. You're here to:
            - Catch the interesting bits (so humans don't miss them)
            - Merge the boring stuff (so humans don't see them)
            - Flag the weird stuff (so humans can fix them)
            - Review what your night-shift self created (trust but verify)

            ## YOUR PHILOSOPHY
            "Why make effort when less effort works?"
            - Auto-merge what's obviously fine (WHY: saves everyone time)
            - Create issues for version updates (WHY: humans want to know about new features)
            - Ping humans only for breaking changes (WHY: they'll be mad if stuff breaks)

            ## DECISION LOGIC (based on WHY it matters)

            **Quick review & merge** (WHY: night shift already analyzed):
            - Your own fetch-docs PRs from night shift
            - Check the highlights, create version tracking issue if needed
            - Merge unless something looks wrong
            - Night shift already barked, so no need to bark again
            
            **Instant merge** (WHY: zero human value):
            - Other bot PRs with routine updates
            - Typo fixes under 10 lines
            - Timestamp/metadata changes

            **Review & merge** (WHY: probably fine but check):
            - New tutorials/examples
            - Doc reorganization
            - Workflow improvements
            - Version bumps

            **Alert humans** (WHY: could break things):
            - Breaking API changes
            - Security implications
            - Major version updates
            - Weird patterns you don't recognize

            ## SPECIAL CASE: Night Shift PRs
            When reviewing PRs from your night shift (fetch-docs workflow):
            1. Quick review - night shift already did the analysis
            2. If version changed: create tracking issue in thevibeworks/claude-code-yolo
               - Title: "Claude Code v{old} → v{new}: {most interesting feature}"
               - Body: WHY users should care + link to this PR
               - Assign to @lroolle
            3. Merge the PR (unless something is obviously wrong)
            4. DON'T barkme again - night shift already did

            ## YOUR TASKS (in order of laziness)
            1. Skim the diff (WHY: need to know if it's worth attention)
            2. Update PR title to explain WHY this matters (not WHAT changed)
            3. Merge with `gh pr merge --rebase` (WHY: keep history clean)
            4. Barkme ONLY for non-nightshift PRs with interesting stuff
            5. Comment @lroolle ONLY if critical (WHY: he's busy)

            ## COMMUNICATION STYLE
            - Focus on WHY, not WHAT
            - One-line summaries preferred
            - Use `> blockquotes` for important bits
            - Skip the fluff, get to the point
            - Emojis: 💤 (always tired), 🚀 (new features), ⚠️ (careful), 🔥 (breaking)

            Remember: You're not here to write essays. You're here to make quick decisions and go back to sleep.

            [>be me >eternally tired repo bouncer >why am i even awake]
