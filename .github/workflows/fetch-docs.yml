name: Fetch Claude Code Docs

on:
  schedule:
    # Every hour
    - cron: "0 * * * *"
  workflow_dispatch: # Allow manual trigger
    inputs:
      min_lines_threshold:
        description: 'Minimum lines changed to consider changes meaningful'
        required: false
        default: '100'

jobs:
  fetch-docs:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
      actions: read
      id-token: write
    env:
      AWS_REGION: us-west-2

    steps:
      - name: Generate GitHub App token
        id: app-token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
          permission-contents: write
          permission-pull-requests: write
          permission-issues: write

      # Make the writable token the default for all later steps in this job
      - name: Export token for subsequent steps
        run: echo "GITHUB_TOKEN=${{ steps.app-token.outputs.token }}" >> "$GITHUB_ENV"

      - name: Token sanity check
        run: |
          echo "=== Token Permission Info ==="
          gh api repos/${{ github.repository }} --jq '.permissions'
          echo "::warning::repo.permissions is not reliable for App tokens (always shows push:false)"
          echo "App token configured with: contents:write, pull_requests:write, issues:write"
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ steps.app-token.outputs.token }}

      - name: Fetch Claude Code docs
        run: ./scripts/fetchccdocs.sh --format md

      - name: Check for meaningful changes
        id: changes
        env:
          MIN_LINES_THRESHOLD: ${{ github.event.inputs.min_lines_threshold || '100' }}
        run: |
          if ./scripts/check-changes.sh; then
            echo "changes=true" >> $GITHUB_OUTPUT
            echo "meaningful=true" >> $GITHUB_OUTPUT
          else
            echo "changes=false" >> $GITHUB_OUTPUT
            echo "meaningful=false" >> $GITHUB_OUTPUT
          fi

      - name: Analyze changes for commit/PR
        if: steps.changes.outputs.changes == 'true'
        id: analyze
        run: |
          # Get list of changed files
          CHANGED_FILES=$(git diff --cached --name-only | grep -v -E 'content/(\.metadata|claude-code-manifest)\.json$' | sort)
          echo "changed_files<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGED_FILES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          # Get meaningful file list (exclude metadata)
          MEANINGFUL_FILES=$(echo "$CHANGED_FILES" | head -10)
          if [[ $(echo "$CHANGED_FILES" | wc -l) -gt 10 ]]; then
            MEANINGFUL_FILES="$MEANINGFUL_FILES
          ... and $(($(echo "$CHANGED_FILES" | wc -l) - 10)) more files"
          fi
          echo "meaningful_files<<EOF" >> $GITHUB_OUTPUT
          echo "$MEANINGFUL_FILES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          # Check for Claude version changes
          CLAUDE_VERSION_CHANGE=""
          if git diff --cached content/claude-code-manifest.json | grep -q '"version"'; then
            OLD_VERSION=$(git show HEAD:content/claude-code-manifest.json | jq -r '.version' 2>/dev/null || echo "unknown")
            NEW_VERSION=$(jq -r '.version' content/claude-code-manifest.json 2>/dev/null || echo "unknown")
            CLAUDE_VERSION_CHANGE="Claude Code: $OLD_VERSION â†’ $NEW_VERSION"
          fi
          echo "claude_version_change=$CLAUDE_VERSION_CHANGE" >> $GITHUB_OUTPUT

          # Get summary stats
          FILES_COUNT=$(echo "$CHANGED_FILES" | wc -l)
          echo "files_count=$FILES_COUNT" >> $GITHUB_OUTPUT

          # Get timestamp
          FETCH_TIME=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          echo "fetch_time=$FETCH_TIME" >> $GITHUB_OUTPUT

          # Get line count for summary
          TOTAL_LINES=$(git diff --cached --numstat | awk '{sum += $1 + $2} END {print sum}')
          echo "total_lines=$TOTAL_LINES" >> $GITHUB_OUTPUT

      - name: Commit minor changes
        if: steps.changes.outputs.changes == 'true' && steps.changes.outputs.meaningful == 'false'
        run: |
          COMMIT_MSG="docs: minor documentation updates

          Updated ${{ steps.analyze.outputs.files_count }} files (${{ steps.analyze.outputs.total_lines }} lines)
          Fetched: ${{ steps.analyze.outputs.fetch_time }}"
          
          if [[ -n "${{ steps.analyze.outputs.claude_version_change }}" ]]; then
            COMMIT_MSG="$COMMIT_MSG

          ${{ steps.analyze.outputs.claude_version_change }}"
          fi

          COMMIT_MSG="$COMMIT_MSG

          Files changed:
          ${{ steps.analyze.outputs.meaningful_files }}

          ðŸ¤– Generated with Claude Code"

          git commit -m "$COMMIT_MSG"

      - name: Create pull request for meaningful changes
        if: steps.changes.outputs.changes == 'true' && steps.changes.outputs.meaningful == 'true'
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ steps.app-token.outputs.token }}
          author: "claude-yolo[bot] <claude-yolo@lroole.com>"
          committer: "claude-yolo[bot] <claude-yolo@lroole.com>"
          commit-message: |
            docs: update Claude Code documentation

            Updated ${{ steps.analyze.outputs.files_count }} files from docs.anthropic.com
            Fetched: ${{ steps.analyze.outputs.fetch_time }}
          title: "docs: update Claude Code documentation (${{ steps.analyze.outputs.files_count }} files)"
          body: |
            ## Documentation Update

            Automated update fetched from docs.anthropic.com on **${{ steps.analyze.outputs.fetch_time }}**.

            ### Changed Files (${{ steps.analyze.outputs.files_count }})
            ```
            ${{ steps.analyze.outputs.changed_files }}
            ```

            ### Details
            - Source: docs.anthropic.com  
            - Workflow: Fetch Claude Code Docs
            - Trigger: ${{ github.event_name == 'schedule' && 'Scheduled (hourly)' || 'Manual' }}

            This PR was automatically generated by the Fetch Claude Code Docs workflow.
          branch: docs/auto-update-${{ github.run_id }}
          delete-branch: true
          reviewers: lroolle,claude
