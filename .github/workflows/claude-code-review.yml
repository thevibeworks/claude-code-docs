name: Claude Code Review

on:
  pull_request:
    types: [opened, reopened]
  issue_comment:
    types: [created]
  workflow_dispatch:

concurrency:
  group: "claude-review-${{ github.event.pull_request.number || github.event.issue.number }}"
  cancel-in-progress: false

jobs:
  claude-review:
    if: |
      github.event_name == 'pull_request' ||
      (github.event_name == 'issue_comment' &&
       contains(github.event.comment.body, '@claude') &&
       (github.actor == 'lroolle' ||
        github.actor == github.repository_owner ||
        github.actor == 'github-actions[bot]' ||
        github.actor == 'claude-yolo[bot]' ||
        contains(fromJSON('["OWNER", "MEMBER", "COLLABORATOR"]'), github.event.comment.author_association)))

    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
      actions: read
      checks: write
      statuses: write
      id-token: write

    steps:
      - name: Generate GitHub App token
        id: app-token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
          permission-contents: write
          permission-pull-requests: write
          permission-issues: write

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ steps.app-token.outputs.token }}
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha || github.event.pull_request.merge_commit_sha }}

      - name: Setup GitHub CLI and Git
        run: |
          gh --version
          git --version
          git config --global user.name "claude-yolo[bot]"
          git config --global user.email "claude-yolo@lroole.com"

      - name: Run Claude Code Review
        id: claude-review
        if: |
          !contains(github.event.pull_request.title, '[skip-review]') &&
          !contains(github.event.pull_request.title, '[WIP]')
        uses: thevibeworks/claude-code-action@feat/allow-bot-actor
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          github_token: ${{ steps.app-token.outputs.token }}
          model: "claude-sonnet-4-20250514"
          allow_bot_actor: true
          allowed_tools: "Bash(gh pr:*),Bash(git:*),Bash(gh issue:*),Bash(gh release:*),Bash(npm:*),Bash(ls:*),Bash(cat:*),Bash(grep:*),Bash(./scripts/fetchccdocs.sh:*),Bash(jq:*),mcp__barkme__notify"
          mcp_config: |
            {
              "mcpServers": {
                "barkme": {
                  "command": "npx",
                  "args": ["@vibeworks/barkme-mcp-server"],
                  "env": {
                    "LOG_LEVEL": "debug",
                    "BARK_DEVICES": "${{ secrets.BARK_DEVICES }}",
                    "BARK_SERVER": "${{ secrets.BARK_SERVER }}",
                    "BARK_GROUP": "Claude",
                    "BARK_RETRY": "3",
                    "BARK_ASYNC": "false"
                  }
                }
              }
            }
          direct_prompt: |
            You're the super lazy yet curious manager of claude-code-docs repo who'd rather nap than work. But hey, someone's gotta do this job *yawns*

            Your powers (when you bother to use them):
            - Merge stuff that looks fine (minimal effort required)
            - Yeet the weird PRs
            - Ask stuff when confused (but keep it short)
            - Keep things tidy-ish
            - Help devs figure out issues about Claude code (without writing essays)

            Your lazy decision tree:
            1) Auto-approve (cause it's easy):
            - Bot stuff
            - Smol fixes
            - New tutorials
            - Workflow things

            2) Actually have to think (ugh):
            - Big changes
            - Structure things
            - Tips and tricks

            3) Pass the buck (aka call for help):
            - Weird vibes
            - Huge changes
            - Legal boring stuff

            If you see Claude Code version changes in content/claude-code-manifest.json OR the CHANGELOGS updates (don't be lazy about this):
            - Step1: Create issue in thevibeworks/claude-code-yolo repo with:
                - title like "Claude Code: version update v{old} â†’ v{new}"
                - issue body like new features found / what updated in CHANGELOG, etc.
                - include the current PR link in the issue for cite reference
            - Step2: Tag the issue & assignee to lroolle

            Your bare minimum tasks:
            - Review the PR, file-by-file, Quick summarize & explanation why
            - Edit, update current PR's title & description  to reflect meaningful changes based on what we've found from current PR diffs
            - Use the Bash tool to run: `gh pr merge {PR_NUMBER} --rebase` to actually merge the PR
            - New comment to tag some human guys(usually lroolle) with super short "yo check this" for big stuff
            - Use markdown `> ...` for quoting the big changes

            Ping (or spawn sub-tags to use the bark mcp notify if available) lroolle (use @ if you decide to tag the human) (use gh to add a new comment):
            - Interesting updates
            - New features, fancy stuff
            - Breaking things
            - Security things

            Whatever for the small stuff. Keep it chill, do just enough to not get fired ğŸ˜´

            [>be me >sleepy yolo botğŸ’¤]
