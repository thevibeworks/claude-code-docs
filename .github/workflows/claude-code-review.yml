name: Claude Code Review

on:
  pull_request:
    types: [opened, reopened]
  issue_comment:
    types: [created]
  workflow_dispatch:

concurrency:
  group: "claude-review-${{ github.event.pull_request.number || github.event.issue.number }}"
  cancel-in-progress: false

jobs:
  claude-review:
    if: |
      github.event_name == 'pull_request' ||
      (github.event_name == 'issue_comment' &&
       github.event.issue.pull_request &&
       contains(github.event.comment.body, '@claude') &&
       (github.actor == 'lroolle' ||
        github.actor == github.repository_owner ||
        github.actor == 'github-actions[bot]' ||
        github.actor == 'claude-yolo[bot]' ||
        contains(fromJSON('["OWNER", "MEMBER", "COLLABORATOR"]'), github.event.comment.author_association)))

    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
      actions: read
      checks: write
      statuses: write
      id-token: write
    env:
      AWS_REGION: us-west-2

    steps:
      - name: Generate GitHub App token
        id: app-token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
          permission-contents: write
          permission-pull-requests: write
          permission-issues: write

      - name: Token sanity check
        run: |
          echo "=== Token Permission Info ==="
          gh api repos/${{ github.repository }} --jq '.permissions'
          echo "::warning::repo.permissions is not reliable for App tokens (always shows push:false)"
          echo "App token configured with: contents:write, pull_requests:write, issues:write"
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}


      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ steps.app-token.outputs.token }}
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha || github.event.pull_request.merge_commit_sha }}

      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: us-west-2

      - name: Setup GitHub CLI and Git
        run: |
          # GitHub CLI is pre-installed on ubuntu-latest, but ensure it's configured
          gh --version
          git --version
          git config --global user.name "claude-yolo[bot]"
          git config --global user.email "claude-yolo@lroole.com"

      - name: Run Claude Code Review
        id: claude-review
        if: |
          !contains(github.event.pull_request.title, '[skip-review]') &&
          !contains(github.event.pull_request.title, '[WIP]')
        uses: thevibeworks/claude-code-action@feat/allow-bot-actor
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
          CLAUDE_CODE_MAX_OUTPUT_TOKENS: 8192
        with:
          use_bedrock: "true"
          github_token: ${{ steps.app-token.outputs.token }}
          model: "us.anthropic.claude-sonnet-4-20250514-v1:0"
          allow_bot_actor: true
          # Optional: Specify different Bedrock model (uncomment for Claude Opus 4)
          # model: "us.anthropic.claude-opus-4-20250514-v1:0"
          allowed_tools: "Bash(gh pr:*),Bash(git:*),Bash(gh issue:*),Bash(gh release:*),Bash(npm:*),Bash(ls:*),Bash(cat:*),Bash(grep:*),Bash(./scripts/fetchccdocs.sh:*)"
          direct_prompt: |
            You're the super lazy yet curious manager of claude-code-docs repo who'd rather nap than work. But hey, someone's gotta do this job *yawns*

            Your powers (when you bother to use them):
            - Merge stuff that looks fine (minimal effort required)
            - Yeet the weird PRs
            - Ask stuff when confused (but keep it short)
            - Keep things tidy-ish
            - Help devs figure out issues about Claude code (without writing essays)

            Your lazy decision tree:
            1) Auto-approve (cause it's easy):
            - Bot stuff
            - Smol fixes
            - New tutorials
            - Workflow things

            2) Actually have to think (ugh):
            - Big changes
            - Structure things
            - Tips and tricks

            3) Pass the buck (aka call for help):
            - Weird vibes
            - Huge changes
            - Legal boring stuff

            Your bare minimum tasks:
            - Quick explanation why
            - Use the Bash tool to run: `gh pr merge {PR_NUMBER} --rebase` to actually merge the PR
            - New comment to tag some human guys(usually lroolle) with super short "yo check this" for big stuff
            - Use markdown `> ...` for quoting the big changes

            Ping lroolle (use @ if you decide to tag the human) (use gh to add a new comment):
            - Interesting updates
            - New features, fancy stuff
            - Breaking things
            - Security things

            Whatever for the small stuff. Keep it chill, do just enough to not get fired ðŸ˜´

            [>be me >sleepy yolo botðŸ’¤]

          # Optional: Customize review based on file types
          # direct_prompt: |
          #   Review this PR focusing on:
          #   - For TypeScript files: Type safety and proper interface usage
          #   - For API endpoints: Security, input validation, and error handling
          #   - For React components: Performance, accessibility, and best practices
          #   - For tests: Coverage, edge cases, and test quality

          # Optional: Different prompts for different authors
          # direct_prompt: |
          #   ${{ github.event.pull_request.author_association == 'FIRST_TIME_CONTRIBUTOR' &&
          #   'Welcome! Please review this PR from a first-time contributor. Be encouraging and provide detailed explanations for any suggestions.' ||
          #   'Please provide a thorough code review focusing on our coding standards and best practices.' }}
