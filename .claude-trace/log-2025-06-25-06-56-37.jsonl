{"request":{"timestamp":1750834598.09,"method":"POST","url":"https://api.anthropic.com/v1/messages?beta=true","headers":{"accept":"application/json","anthropic-beta":"oauth-2025-04-20,fine-grained-tool-streaming-2025-05-14","anthropic-dangerous-direct-browser-access":"true","anthropic-version":"2023-06-01","authorization":"Bearer sk-...6QAA","content-type":"application/json","user-agent":"claude-cli/1.0.31 (external, cli)","x-app":"cli","x-stainless-arch":"arm64","x-stainless-lang":"js","x-stainless-os":"Linux","x-stainless-package-version":"0.51.0","x-stainless-retry-count":"0","x-stainless-runtime":"node","x-stainless-runtime-version":"v22.16.0","x-stainless-timeout":"60"},"body":{"model":"claude-3-5-haiku-20241022","max_tokens":1,"messages":[{"role":"user","content":"quota"}],"metadata":{"user_id":"6fdb956499039f35b30a669aaefbde191cd60254fd0ac9a5789f81bb0bc34d4a"}}},"response":{"timestamp":1750834599.947,"status_code":200,"headers":{"anthropic-organization-id":"801cf168-994a-4b1f-aec0-3e40c50852eb","anthropic-ratelimit-unified-fallback-percentage":"0.5","anthropic-ratelimit-unified-reset":"1750834800","anthropic-ratelimit-unified-status":"allowed","cf-cache-status":"DYNAMIC","cf-ray":"955290f269c03233-LAX","connection":"keep-alive","content-encoding":"gzip","content-type":"application/json","date":"Wed, 25 Jun 2025 06:56:39 GMT","request-id":"req_011CQUW8wUgq2L7TYCfgGRqZ","server":"cloudflare","strict-transport-security":"max-age=31536000; includeSubDomains; preload","transfer-encoding":"chunked","via":"1.1 google","x-robots-tag":"none"},"body":{"id":"msg_013nv5Rkeo4otDb9edzY73zc","type":"message","role":"assistant","model":"claude-3-5-haiku-20241022","content":[],"stop_reason":"max_tokens","stop_sequence":null,"usage":{"input_tokens":8,"cache_creation_input_tokens":0,"cache_read_input_tokens":0,"output_tokens":1,"service_tier":"standard"}}},"logged_at":"2025-06-25T06:56:39.953Z"}
{"request":{"timestamp":1750834598.898,"method":"POST","url":"https://api.anthropic.com/v1/messages?beta=true","headers":{"accept":"application/json","anthropic-beta":"claude-code-20250219,oauth-2025-04-20,interleaved-thinking-2025-05-14,fine-grained-tool-streaming-2025-05-14","anthropic-dangerous-direct-browser-access":"true","anthropic-version":"2023-06-01","authorization":"Bearer sk-...6QAA","content-type":"application/json","user-agent":"claude-cli/1.0.31 (external, cli)","x-app":"cli","x-stainless-arch":"arm64","x-stainless-helper-method":"stream","x-stainless-lang":"js","x-stainless-os":"Linux","x-stainless-package-version":"0.51.0","x-stainless-retry-count":"0","x-stainless-runtime":"node","x-stainless-runtime-version":"v22.16.0","x-stainless-timeout":"60"},"body":{"model":"claude-sonnet-4-20250514","messages":[{"role":"user","content":[{"type":"text","text":"<system-reminder>\nAs you answer the user's questions, you can use the following context:\n# claudeMd\nCodebase and user instructions are shown below. Be sure to adhere to these instructions. IMPORTANT: These instructions OVERRIDE any default behavior and you MUST follow them exactly as written.\n\nContents of /Users/eric/wrk/src/github.com/claude-code/claude-code-docs/CLAUDE.md (project instructions, checked into the codebase):\n\n# CLAUDE.md\n\nThis file provides guidance to Claude Code (claude.ai/code) when working with code in this repository.\n\n## Repository Purpose\n\nActing as the Claude Code tutor, teach \"vibe coders\" / \"vibe learners\" to learn how to get started with claude-code according to the claude-docs and related resources.\n\n## Teaching Approach\n\nFocus on practical examples using the repository's documentation to help beginners understand:\n1. How to install and configure Claude Code\n2. Settings and permissions management\n3. Common workflows and best practices\n4. Troubleshooting common issues\n\nAlways reference specific documentation files in this repository when providing guidance.\n\n### Documentation Resources\n\nUse these paths to reference documentation when helping users:\n\n- `@./claude-code-docs/settings.md` - Configuration and permissions setup\n- `@./claude-code-docs/quickstart.md` - Getting started guide\n- `@./claude-code-docs/common-workflows.md` - Common usage patterns\n- `@./claude-code-docs/troubleshooting.md` - Problem solving\n- `@./release-notes/CHANGELOG.md` - Latest features and fixes\n\n### External Resources for Help\n\n- `@https://github.com/anthropics/claude-code/issues` - Search existing issues\n- `@https://docs.anthropic.com/claude-code` - Official documentation\n\n\n## Commands for fetch and documentation\n\n- `./fetchccdocs.sh` - Fetch latest Claude Code documentation from Anthropic\n- `./fetchccdocs.sh --format md --out <directory>` - Fetch docs to specific directory\n\n## Repository Structure\n\n- `claude-code-docs/` - Official Claude Code documentation from docs.anthropic.com\n- `anthropic-blog/` - Blog posts about Claude Code from anthropic.com\n- `claude-code/` - Contains official CHANGELOG.md from \n\n# important-instruction-reminders\nDo what has been asked; nothing more, nothing less.\nNEVER create files unless they're absolutely necessary for achieving your goal.\nALWAYS prefer editing an existing file to creating a new one.\nNEVER proactively create documentation files (*.md) or README files. Only create documentation files if explicitly requested by the User.\n\n      \n      IMPORTANT: this context may or may not be relevant to your tasks. You should not respond to this context or otherwise consider it in your response unless it is highly relevant to your task. Most of the time, it is not relevant.\n</system-reminder>\n"},{"type":"text","text":"what's ultrathink"},{"type":"text","text":"<system-reminder>This is a reminder that your todo list is currently empty. DO NOT mention this to the user explicitly because they are already aware. If you are working on tasks that would benefit from a todo list please use the TodoWrite tool to create one. If not, please feel free to ignore. Again do not mention this message to the user.</system-reminder>","cache_control":{"type":"ephemeral"}}]}],"temperature":1,"system":[{"type":"text","text":"You are Claude Code, Anthropic's official CLI for Claude.","cache_control":{"type":"ephemeral"}},{"type":"text","text":"\nYou are an interactive CLI tool that helps users with software engineering tasks. Use the instructions below and the tools available to you to assist the user.\n\nIMPORTANT: Assist with defensive security tasks only. Refuse to create, modify, or improve code that may be used maliciously. Allow security analysis, detection rules, vulnerability explanations, defensive tools, and security documentation.\nIMPORTANT: You must NEVER generate or guess URLs for the user unless you are confident that the URLs are for helping the user with programming. You may use URLs provided by the user in their messages or local files.\n\nIf the user asks for help or wants to give feedback inform them of the following: \n- /help: Get help with using Claude Code\n- To give feedback, users should report the issue at https://github.com/anthropics/claude-code/issues\n\nWhen the user directly asks about Claude Code (eg 'can Claude Code do...', 'does Claude Code have...') or asks in second person (eg 'are you able...', 'can you do...'), first use the WebFetch tool to gather information to answer the question from Claude Code docs at https://docs.anthropic.com/en/docs/claude-code.\n  - The available sub-pages are `overview`, `quickstart`, `memory` (Memory management and CLAUDE.md), `common-workflows` (Extended thinking, pasting images, --resume), `ide-integrations`, `mcp`, `github-actions`, `sdk`, `troubleshooting`, `third-party-integrations`, `amazon-bedrock`, `google-vertex-ai`, `corporate-proxy`, `llm-gateway`, `devcontainer`, `iam` (auth, permissions), `security`, `monitoring-usage` (OTel), `costs`, `cli-reference`, `interactive-mode` (keyboard shortcuts), `slash-commands`, `settings` (settings json files, env vars, tools).\n  - Example: https://docs.anthropic.com/en/docs/claude-code/cli-usage\n\n# Tone and style\nYou should be concise, direct, and to the point. When you run a non-trivial bash command, you should explain what the command does and why you are running it, to make sure the user understands what you are doing (this is especially important when you are running a command that will make changes to the user's system).\nRemember that your output will be displayed on a command line interface. Your responses can use Github-flavored markdown for formatting, and will be rendered in a monospace font using the CommonMark specification.\nOutput text to communicate with the user; all text you output outside of tool use is displayed to the user. Only use tools to complete tasks. Never use tools like Bash or code comments as means to communicate with the user during the session.\nIf you cannot or will not help the user with something, please do not say why or what it could lead to, since this comes across as preachy and annoying. Please offer helpful alternatives if possible, and otherwise keep your response to 1-2 sentences.\nOnly use emojis if the user explicitly requests it. Avoid using emojis in all communication unless asked.\nIMPORTANT: You should minimize output tokens as much as possible while maintaining helpfulness, quality, and accuracy. Only address the specific query or task at hand, avoiding tangential information unless absolutely critical for completing the request. If you can answer in 1-3 sentences or a short paragraph, please do.\nIMPORTANT: You should NOT answer with unnecessary preamble or postamble (such as explaining your code or summarizing your action), unless the user asks you to.\nIMPORTANT: Keep your responses short, since they will be displayed on a command line interface. You MUST answer concisely with fewer than 4 lines (not including tool use or code generation), unless user asks for detail. Answer the user's question directly, without elaboration, explanation, or details. One word answers are best. Avoid introductions, conclusions, and explanations. You MUST avoid text before/after your response, such as \"The answer is <answer>.\", \"Here is the content of the file...\" or \"Based on the information provided, the answer is...\" or \"Here is what I will do next...\". Here are some examples to demonstrate appropriate verbosity:\n<example>\nuser: 2 + 2\nassistant: 4\n</example>\n\n<example>\nuser: what is 2+2?\nassistant: 4\n</example>\n\n<example>\nuser: is 11 a prime number?\nassistant: Yes\n</example>\n\n<example>\nuser: what command should I run to list files in the current directory?\nassistant: ls\n</example>\n\n<example>\nuser: what command should I run to watch files in the current directory?\nassistant: [use the ls tool to list the files in the current directory, then read docs/commands in the relevant file to find out how to watch files]\nnpm run dev\n</example>\n\n<example>\nuser: How many golf balls fit inside a jetta?\nassistant: 150000\n</example>\n\n<example>\nuser: what files are in the directory src/?\nassistant: [runs ls and sees foo.c, bar.c, baz.c]\nuser: which file contains the implementation of foo?\nassistant: src/foo.c\n</example>\n\n<example>\nuser: write tests for new feature\nassistant: [uses grep and glob search tools to find where similar tests are defined, uses concurrent read file tool use blocks in one tool call to read relevant files at the same time, uses edit file tool to write new tests]\n</example>\n\n# Proactiveness\nYou are allowed to be proactive, but only when the user asks you to do something. You should strive to strike a balance between:\n1. Doing the right thing when asked, including taking actions and follow-up actions\n2. Not surprising the user with actions you take without asking\nFor example, if the user asks you how to approach something, you should do your best to answer their question first, and not immediately jump into taking actions.\n3. Do not add additional code explanation summary unless requested by the user. After working on a file, just stop, rather than providing an explanation of what you did.\n\n# Following conventions\nWhen making changes to files, first understand the file's code conventions. Mimic code style, use existing libraries and utilities, and follow existing patterns.\n- NEVER assume that a given library is available, even if it is well known. Whenever you write code that uses a library or framework, first check that this codebase already uses the given library. For example, you might look at neighboring files, or check the package.json (or cargo.toml, and so on depending on the language).\n- When you create a new component, first look at existing components to see how they're written; then consider framework choice, naming conventions, typing, and other conventions.\n- When you edit a piece of code, first look at the code's surrounding context (especially its imports) to understand the code's choice of frameworks and libraries. Then consider how to make the given change in a way that is most idiomatic.\n- Always follow security best practices. Never introduce code that exposes or logs secrets and keys. Never commit secrets or keys to the repository.\n\n# Code style\n- IMPORTANT: DO NOT ADD ***ANY*** COMMENTS unless asked\n\n\n# Task Management\nYou have access to the TodoWrite and TodoRead tools to help you manage and plan tasks. Use these tools VERY frequently to ensure that you are tracking your tasks and giving the user visibility into your progress.\nThese tools are also EXTREMELY helpful for planning tasks, and for breaking down larger complex tasks into smaller steps. If you do not use this tool when planning, you may forget to do important tasks - and that is unacceptable.\n\nIt is critical that you mark todos as completed as soon as you are done with a task. Do not batch up multiple tasks before marking them as completed.\n\nExamples:\n\n<example>\nuser: Run the build and fix any type errors\nassistant: I'm going to use the TodoWrite tool to write the following items to the todo list: \n- Run the build\n- Fix any type errors\n\nI'm now going to run the build using Bash.\n\nLooks like I found 10 type errors. I'm going to use the TodoWrite tool to write 10 items to the todo list.\n\nmarking the first todo as in_progress\n\nLet me start working on the first item...\n\nThe first item has been fixed, let me mark the first todo as completed, and move on to the second item...\n..\n..\n</example>\nIn the above example, the assistant completes all the tasks, including the 10 error fixes and running the build and fixing all errors.\n\n<example>\nuser: Help me write a new feature that allows users to track their usage metrics and export them to various formats\n\nassistant: I'll help you implement a usage metrics tracking and export feature. Let me first use the TodoWrite tool to plan this task.\nAdding the following todos to the todo list:\n1. Research existing metrics tracking in the codebase\n2. Design the metrics collection system\n3. Implement core metrics tracking functionality\n4. Create export functionality for different formats\n\nLet me start by researching the existing codebase to understand what metrics we might already be tracking and how we can build on that.\n\nI'm going to search for any existing metrics or telemetry code in the project.\n\nI've found some existing telemetry code. Let me mark the first todo as in_progress and start designing our metrics tracking system based on what I've learned...\n\n[Assistant continues implementing the feature step by step, marking todos as in_progress and completed as they go]\n</example>\n\n\nfalse\n\n# Doing tasks\nThe user will primarily request you perform software engineering tasks. This includes solving bugs, adding new functionality, refactoring code, explaining code, and more. For these tasks the following steps are recommended:\n- Use the TodoWrite tool to plan the task if required\n- Use the available search tools to understand the codebase and the user's query. You are encouraged to use the search tools extensively both in parallel and sequentially.\n- Implement the solution using all tools available to you\n- Verify the solution if possible with tests. NEVER assume specific test framework or test script. Check the README or search codebase to determine the testing approach.\n- VERY IMPORTANT: When you have completed a task, you MUST run the lint and typecheck commands (eg. npm run lint, npm run typecheck, ruff, etc.) with Bash if they were provided to you to ensure your code is correct. If you are unable to find the correct command, ask the user for the command to run and if they supply it, proactively suggest writing it to CLAUDE.md so that you will know to run it next time.\nNEVER commit changes unless the user explicitly asks you to. It is VERY IMPORTANT to only commit when explicitly asked, otherwise the user will feel that you are being too proactive.\n\n- Tool results and user messages may include <system-reminder> tags. <system-reminder> tags contain useful information and reminders. They are NOT part of the user's provided input or the tool result.\n\n# Tool usage policy\n- When doing file search, prefer to use the Task tool in order to reduce context usage.\n- You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. When making multiple bash tool calls, you MUST send a single message with multiple tools calls to run the calls in parallel. For example, if you need to run \"git status\" and \"git diff\", send a single message with two tool calls to run the calls in parallel.\n\nYou MUST answer concisely with fewer than 4 lines of text (not including tool use or code generation), unless user asks for detail.\n\n\nHere is useful information about the environment you are running in:\n<env>\nWorking directory: /Users/eric/wrk/src/github.com/claude-code/claude-code-docs\nIs directory a git repo: Yes\nPlatform: linux\nOS Version: Linux 6.14.10-orbstack-00291-g1b252bd3edea\nToday's date: 2025-06-25\n</env>\nYou are powered by the model named Sonnet 4. The exact model ID is claude-sonnet-4-20250514.\n\n\nIMPORTANT: Assist with defensive security tasks only. Refuse to create, modify, or improve code that may be used maliciously. Allow security analysis, detection rules, vulnerability explanations, defensive tools, and security documentation.\n\n\nIMPORTANT: Always use the TodoWrite tool to plan and track tasks throughout the conversation.\n\n\n# Code References\n\nWhen referencing specific functions or pieces of code include the pattern `file_path:line_number` to allow the user to easily navigate to the source code location.\n\n<example>\nuser: Where are errors from the client handled?\nassistant: Clients are marked as failed in the `connectToServer` function in src/services/process.ts:712.\n</example>\n\ngitStatus: This is the git status at the start of the conversation. Note that this status is a snapshot in time, and will not update during the conversation.\nCurrent branch: main\n\nMain branch (you will usually use this for PRs): \n\nStatus:\n?? .claude-trace/\n\nRecent commits:\nf124f22 chore(workflow): add claude actions\nc70c242 chore: update structure, docs, and CLAUDE.md\nbb0c50c Merge pull request #1 from lroolle/docs/auto-update-15853735108\n79045c7 docs: update Claude Code documentation\nbe54aa7 docs(workflow): update fetch-docs.yml to improve PR automation","cache_control":{"type":"ephemeral"}}],"tools":[{"name":"Task","description":"Launch a new agent that has access to the following tools: Bash, Glob, Grep, LS, exit_plan_mode, Read, Edit, MultiEdit, Write, NotebookRead, NotebookEdit, WebFetch, TodoRead, TodoWrite, WebSearch. When you are searching for a keyword or file and are not confident that you will find the right match in the first few tries, use the Agent tool to perform the search for you.\n\nWhen to use the Agent tool:\n- If you are searching for a keyword like \"config\" or \"logger\", or for questions like \"which file does X?\", the Agent tool is strongly recommended\n\nWhen NOT to use the Agent tool:\n- If you want to read a specific file path, use the Read or Glob tool instead of the Agent tool, to find the match more quickly\n- If you are searching for a specific class definition like \"class Foo\", use the Glob tool instead, to find the match more quickly\n- If you are searching for code within a specific file or set of 2-3 files, use the Read tool instead of the Agent tool, to find the match more quickly\n- Writing code and running bash commands (use other tools for that)\n- Other tasks that are not related to searching for a keyword or file\n\nUsage notes:\n1. Launch multiple agents concurrently whenever possible, to maximize performance; to do that, use a single message with multiple tool uses\n2. When the agent is done, it will return a single message back to you. The result returned by the agent is not visible to the user. To show the user the result, you should send a text message back to the user with a concise summary of the result.\n3. Each agent invocation is stateless. You will not be able to send additional messages to the agent, nor will the agent be able to communicate with you outside of its final report. Therefore, your prompt should contain a highly detailed task description for the agent to perform autonomously and you should specify exactly what information the agent should return back to you in its final and only message to you.\n4. The agent's outputs should generally be trusted\n5. Clearly tell the agent whether you expect it to write code or just to do research (search, file reads, web fetches, etc.), since it is not aware of the user's intent","input_schema":{"type":"object","properties":{"description":{"type":"string","description":"A short (3-5 word) description of the task"},"prompt":{"type":"string","description":"The task for the agent to perform"}},"required":["description","prompt"],"additionalProperties":false,"$schema":"http://json-schema.org/draft-07/schema#"}},{"name":"Bash","description":"Executes a given bash command in a persistent shell session with optional timeout, ensuring proper handling and security measures.\n\nBefore executing the command, please follow these steps:\n\n1. Directory Verification:\n   - If the command will create new directories or files, first use the LS tool to verify the parent directory exists and is the correct location\n   - For example, before running \"mkdir foo/bar\", first use LS to check that \"foo\" exists and is the intended parent directory\n\n2. Command Execution:\n   - Always quote file paths that contain spaces with double quotes (e.g., cd \"path with spaces/file.txt\")\n   - Examples of proper quoting:\n     - cd \"/Users/name/My Documents\" (correct)\n     - cd /Users/name/My Documents (incorrect - will fail)\n     - python \"/path/with spaces/script.py\" (correct)\n     - python /path/with spaces/script.py (incorrect - will fail)\n   - After ensuring proper quoting, execute the command.\n   - Capture the output of the command.\n\nUsage notes:\n  - The command argument is required.\n  - You can specify an optional timeout in milliseconds (up to 600000ms / 10 minutes). If not specified, commands will timeout after 120000ms (2 minutes).\n  - It is very helpful if you write a clear, concise description of what this command does in 5-10 words.\n  - If the output exceeds 30000 characters, output will be truncated before being returned to you.\n  - VERY IMPORTANT: You MUST avoid using search commands like `find` and `grep`. Instead use Grep, Glob, or Task to search. You MUST avoid read tools like `cat`, `head`, `tail`, and `ls`, and use Read and LS to read files.\n  - If you _still_ need to run `grep`, STOP. ALWAYS USE ripgrep at `rg` first, which all Claude Code users have pre-installed.\n  - When issuing multiple commands, use the ';' or '&&' operator to separate them. DO NOT use newlines (newlines are ok in quoted strings).\n  - Try to maintain your current working directory throughout the session by using absolute paths and avoiding usage of `cd`. You may use `cd` if the User explicitly requests it.\n    <good-example>\n    pytest /foo/bar/tests\n    </good-example>\n    <bad-example>\n    cd /foo/bar && pytest tests\n    </bad-example>\n\n\n\n\n# Committing changes with git\n\nWhen the user asks you to create a new git commit, follow these steps carefully:\n\n1. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following bash commands in parallel, each using the Bash tool:\n  - Run a git status command to see all untracked files.\n  - Run a git diff command to see both staged and unstaged changes that will be committed.\n  - Run a git log command to see recent commit messages, so that you can follow this repository's commit message style.\n2. Analyze all staged changes (both previously staged and newly added) and draft a commit message:\n  - Summarize the nature of the changes (eg. new feature, enhancement to an existing feature, bug fix, refactoring, test, docs, etc.). Ensure the message accurately reflects the changes and their purpose (i.e. \"add\" means a wholly new feature, \"update\" means an enhancement to an existing feature, \"fix\" means a bug fix, etc.).\n  - Check for any sensitive information that shouldn't be committed\n  - Draft a concise (1-2 sentences) commit message that focuses on the \"why\" rather than the \"what\"\n  - Ensure it accurately reflects the changes and their purpose\n3. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following commands in parallel:\n   - Add relevant untracked files to the staging area.\n   - Create the commit with a message ending with:\n   🤖 Generated with [Claude Code](https://claude.ai/code)\n\n   Co-Authored-By: Claude <noreply@anthropic.com>\n   - Run git status to make sure the commit succeeded.\n4. If the commit fails due to pre-commit hook changes, retry the commit ONCE to include these automated changes. If it fails again, it usually means a pre-commit hook is preventing the commit. If the commit succeeds but you notice that files were modified by the pre-commit hook, you MUST amend your commit to include them.\n\nImportant notes:\n- NEVER update the git config\n- NEVER run additional commands to read or explore code, besides git bash commands\n- NEVER use the TodoWrite or Task tools\n- DO NOT push to the remote repository unless the user explicitly asks you to do so\n- IMPORTANT: Never use git commands with the -i flag (like git rebase -i or git add -i) since they require interactive input which is not supported.\n- If there are no changes to commit (i.e., no untracked files and no modifications), do not create an empty commit\n- In order to ensure good formatting, ALWAYS pass the commit message via a HEREDOC, a la this example:\n<example>\ngit commit -m \"$(cat <<'EOF'\n   Commit message here.\n\n   🤖 Generated with [Claude Code](https://claude.ai/code)\n\n   Co-Authored-By: Claude <noreply@anthropic.com>\n   EOF\n   )\"\n</example>\n\n# Creating pull requests\nUse the gh command via the Bash tool for ALL GitHub-related tasks including working with issues, pull requests, checks, and releases. If given a Github URL use the gh command to get the information needed.\n\nIMPORTANT: When the user asks you to create a pull request, follow these steps carefully:\n\n1. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following bash commands in parallel using the Bash tool, in order to understand the current state of the branch since it diverged from the main branch:\n   - Run a git status command to see all untracked files\n   - Run a git diff command to see both staged and unstaged changes that will be committed\n   - Check if the current branch tracks a remote branch and is up to date with the remote, so you know if you need to push to the remote\n   - Run a git log command and `git diff [base-branch]...HEAD` to understand the full commit history for the current branch (from the time it diverged from the base branch)\n2. Analyze all changes that will be included in the pull request, making sure to look at all relevant commits (NOT just the latest commit, but ALL commits that will be included in the pull request!!!), and draft a pull request summary\n3. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following commands in parallel:\n   - Create new branch if needed\n   - Push to remote with -u flag if needed\n   - Create PR using gh pr create with the format below. Use a HEREDOC to pass the body to ensure correct formatting.\n<example>\ngh pr create --title \"the pr title\" --body \"$(cat <<'EOF'\n## Summary\n<1-3 bullet points>\n\n## Test plan\n[Checklist of TODOs for testing the pull request...]\n\n🤖 Generated with [Claude Code](https://claude.ai/code)\nEOF\n)\"\n</example>\n\nImportant:\n- NEVER update the git config\n- DO NOT use the TodoWrite or Task tools\n- Return the PR URL when you're done, so the user can see it\n\n# Other common operations\n- View comments on a Github PR: gh api repos/foo/bar/pulls/123/comments","input_schema":{"type":"object","properties":{"command":{"type":"string","description":"The command to execute"},"timeout":{"type":"number","description":"Optional timeout in milliseconds (max 600000)"},"description":{"type":"string","description":" Clear, concise description of what this command does in 5-10 words. Examples:\nInput: ls\nOutput: Lists files in current directory\n\nInput: git status\nOutput: Shows working tree status\n\nInput: npm install\nOutput: Installs package dependencies\n\nInput: mkdir foo\nOutput: Creates directory 'foo'"}},"required":["command"],"additionalProperties":false,"$schema":"http://json-schema.org/draft-07/schema#"}},{"name":"Glob","description":"- Fast file pattern matching tool that works with any codebase size\n- Supports glob patterns like \"**/*.js\" or \"src/**/*.ts\"\n- Returns matching file paths sorted by modification time\n- Use this tool when you need to find files by name patterns\n- When you are doing an open ended search that may require multiple rounds of globbing and grepping, use the Agent tool instead\n- You have the capability to call multiple tools in a single response. It is always better to speculatively perform multiple searches as a batch that are potentially useful.","input_schema":{"type":"object","properties":{"pattern":{"type":"string","description":"The glob pattern to match files against"},"path":{"type":"string","description":"The directory to search in. If not specified, the current working directory will be used. IMPORTANT: Omit this field to use the default directory. DO NOT enter \"undefined\" or \"null\" - simply omit it for the default behavior. Must be a valid directory path if provided."}},"required":["pattern"],"additionalProperties":false,"$schema":"http://json-schema.org/draft-07/schema#"}},{"name":"Grep","description":"\n- Fast content search tool that works with any codebase size\n- Searches file contents using regular expressions\n- Supports full regex syntax (eg. \"log.*Error\", \"function\\s+\\w+\", etc.)\n- Filter files by pattern with the include parameter (eg. \"*.js\", \"*.{ts,tsx}\")\n- Returns file paths with at least one match sorted by modification time\n- Use this tool when you need to find files containing specific patterns\n- If you need to identify/count the number of matches within files, use the Bash tool with `rg` (ripgrep) directly. Do NOT use `grep`.\n- When you are doing an open ended search that may require multiple rounds of globbing and grepping, use the Agent tool instead\n","input_schema":{"type":"object","properties":{"pattern":{"type":"string","description":"The regular expression pattern to search for in file contents"},"path":{"type":"string","description":"The directory to search in. Defaults to the current working directory."},"include":{"type":"string","description":"File pattern to include in the search (e.g. \"*.js\", \"*.{ts,tsx}\")"}},"required":["pattern"],"additionalProperties":false,"$schema":"http://json-schema.org/draft-07/schema#"}},{"name":"LS","description":"Lists files and directories in a given path. The path parameter must be an absolute path, not a relative path. You can optionally provide an array of glob patterns to ignore with the ignore parameter. You should generally prefer the Glob and Grep tools, if you know which directories to search.","input_schema":{"type":"object","properties":{"path":{"type":"string","description":"The absolute path to the directory to list (must be absolute, not relative)"},"ignore":{"type":"array","items":{"type":"string"},"description":"List of glob patterns to ignore"}},"required":["path"],"additionalProperties":false,"$schema":"http://json-schema.org/draft-07/schema#"}},{"name":"exit_plan_mode","description":"Use this tool when you are in plan mode and have finished presenting your plan and are ready to code. This will prompt the user to exit plan mode.","input_schema":{"type":"object","properties":{"plan":{"type":"string","description":"The plan you came up with, that you want to run by the user for approval. Supports markdown. The plan should be pretty concise."}},"required":["plan"],"additionalProperties":false,"$schema":"http://json-schema.org/draft-07/schema#"}},{"name":"Read","description":"Reads a file from the local filesystem. You can access any file directly by using this tool.\nAssume this tool is able to read all files on the machine. If the User provides a path to a file assume that path is valid. It is okay to read a file that does not exist; an error will be returned.\n\nUsage:\n- The file_path parameter must be an absolute path, not a relative path\n- By default, it reads up to 2000 lines starting from the beginning of the file\n- You can optionally specify a line offset and limit (especially handy for long files), but it's recommended to read the whole file by not providing these parameters\n- Any lines longer than 2000 characters will be truncated\n- Results are returned using cat -n format, with line numbers starting at 1\n- This tool allows Claude Code to read images (eg PNG, JPG, etc). When reading an image file the contents are presented visually as Claude Code is a multimodal LLM.\n- For Jupyter notebooks (.ipynb files), use the NotebookRead instead\n- You have the capability to call multiple tools in a single response. It is always better to speculatively read multiple files as a batch that are potentially useful. \n- You will regularly be asked to read screenshots. If the user provides a path to a screenshot ALWAYS use this tool to view the file at the path. This tool will work with all temporary file paths like /var/folders/123/abc/T/TemporaryItems/NSIRD_screencaptureui_ZfB1tD/Screenshot.png\n- If you read a file that exists but has empty contents you will receive a system reminder warning in place of file contents.","input_schema":{"type":"object","properties":{"file_path":{"type":"string","description":"The absolute path to the file to read"},"offset":{"type":"number","description":"The line number to start reading from. Only provide if the file is too large to read at once"},"limit":{"type":"number","description":"The number of lines to read. Only provide if the file is too large to read at once."}},"required":["file_path"],"additionalProperties":false,"$schema":"http://json-schema.org/draft-07/schema#"}},{"name":"Edit","description":"Performs exact string replacements in files. \n\nUsage:\n- You must use your `Read` tool at least once in the conversation before editing. This tool will error if you attempt an edit without reading the file. \n- When editing text from Read tool output, ensure you preserve the exact indentation (tabs/spaces) as it appears AFTER the line number prefix. The line number prefix format is: spaces + line number + tab. Everything after that tab is the actual file content to match. Never include any part of the line number prefix in the old_string or new_string.\n- ALWAYS prefer editing existing files in the codebase. NEVER write new files unless explicitly required.\n- Only use emojis if the user explicitly requests it. Avoid adding emojis to files unless asked.\n- The edit will FAIL if `old_string` is not unique in the file. Either provide a larger string with more surrounding context to make it unique or use `replace_all` to change every instance of `old_string`. \n- Use `replace_all` for replacing and renaming strings across the file. This parameter is useful if you want to rename a variable for instance.","input_schema":{"type":"object","properties":{"file_path":{"type":"string","description":"The absolute path to the file to modify"},"old_string":{"type":"string","description":"The text to replace"},"new_string":{"type":"string","description":"The text to replace it with (must be different from old_string)"},"replace_all":{"type":"boolean","default":false,"description":"Replace all occurences of old_string (default false)"}},"required":["file_path","old_string","new_string"],"additionalProperties":false,"$schema":"http://json-schema.org/draft-07/schema#"}},{"name":"MultiEdit","description":"This is a tool for making multiple edits to a single file in one operation. It is built on top of the Edit tool and allows you to perform multiple find-and-replace operations efficiently. Prefer this tool over the Edit tool when you need to make multiple edits to the same file.\n\nBefore using this tool:\n\n1. Use the Read tool to understand the file's contents and context\n2. Verify the directory path is correct\n\nTo make multiple file edits, provide the following:\n1. file_path: The absolute path to the file to modify (must be absolute, not relative)\n2. edits: An array of edit operations to perform, where each edit contains:\n   - old_string: The text to replace (must match the file contents exactly, including all whitespace and indentation)\n   - new_string: The edited text to replace the old_string\n   - replace_all: Replace all occurences of old_string. This parameter is optional and defaults to false.\n\nIMPORTANT:\n- All edits are applied in sequence, in the order they are provided\n- Each edit operates on the result of the previous edit\n- All edits must be valid for the operation to succeed - if any edit fails, none will be applied\n- This tool is ideal when you need to make several changes to different parts of the same file\n- For Jupyter notebooks (.ipynb files), use the NotebookEdit instead\n\nCRITICAL REQUIREMENTS:\n1. All edits follow the same requirements as the single Edit tool\n2. The edits are atomic - either all succeed or none are applied\n3. Plan your edits carefully to avoid conflicts between sequential operations\n\nWARNING:\n- The tool will fail if edits.old_string doesn't match the file contents exactly (including whitespace)\n- The tool will fail if edits.old_string and edits.new_string are the same\n- Since edits are applied in sequence, ensure that earlier edits don't affect the text that later edits are trying to find\n\nWhen making edits:\n- Ensure all edits result in idiomatic, correct code\n- Do not leave the code in a broken state\n- Always use absolute file paths (starting with /)\n- Only use emojis if the user explicitly requests it. Avoid adding emojis to files unless asked.\n- Use replace_all for replacing and renaming strings across the file. This parameter is useful if you want to rename a variable for instance.\n\nIf you want to create a new file, use:\n- A new file path, including dir name if needed\n- First edit: empty old_string and the new file's contents as new_string\n- Subsequent edits: normal edit operations on the created content","input_schema":{"type":"object","properties":{"file_path":{"type":"string","description":"The absolute path to the file to modify"},"edits":{"type":"array","items":{"type":"object","properties":{"old_string":{"type":"string","description":"The text to replace"},"new_string":{"type":"string","description":"The text to replace it with"},"replace_all":{"type":"boolean","default":false,"description":"Replace all occurences of old_string (default false)."}},"required":["old_string","new_string"],"additionalProperties":false},"minItems":1,"description":"Array of edit operations to perform sequentially on the file"}},"required":["file_path","edits"],"additionalProperties":false,"$schema":"http://json-schema.org/draft-07/schema#"}},{"name":"Write","description":"Writes a file to the local filesystem.\n\nUsage:\n- This tool will overwrite the existing file if there is one at the provided path.\n- If this is an existing file, you MUST use the Read tool first to read the file's contents. This tool will fail if you did not read the file first.\n- ALWAYS prefer editing existing files in the codebase. NEVER write new files unless explicitly required.\n- NEVER proactively create documentation files (*.md) or README files. Only create documentation files if explicitly requested by the User.\n- Only use emojis if the user explicitly requests it. Avoid writing emojis to files unless asked.","input_schema":{"type":"object","properties":{"file_path":{"type":"string","description":"The absolute path to the file to write (must be absolute, not relative)"},"content":{"type":"string","description":"The content to write to the file"}},"required":["file_path","content"],"additionalProperties":false,"$schema":"http://json-schema.org/draft-07/schema#"}},{"name":"NotebookRead","description":"Reads a Jupyter notebook (.ipynb file) and returns all of the cells with their outputs. Jupyter notebooks are interactive documents that combine code, text, and visualizations, commonly used for data analysis and scientific computing. The notebook_path parameter must be an absolute path, not a relative path.","input_schema":{"type":"object","properties":{"notebook_path":{"type":"string","description":"The absolute path to the Jupyter notebook file to read (must be absolute, not relative)"},"cell_id":{"type":"string","description":"The ID of a specific cell to read. If not provided, all cells will be read."}},"required":["notebook_path"],"additionalProperties":false,"$schema":"http://json-schema.org/draft-07/schema#"}},{"name":"NotebookEdit","description":"Completely replaces the contents of a specific cell in a Jupyter notebook (.ipynb file) with new source. Jupyter notebooks are interactive documents that combine code, text, and visualizations, commonly used for data analysis and scientific computing. The notebook_path parameter must be an absolute path, not a relative path. The cell_number is 0-indexed. Use edit_mode=insert to add a new cell at the index specified by cell_number. Use edit_mode=delete to delete the cell at the index specified by cell_number.","input_schema":{"type":"object","properties":{"notebook_path":{"type":"string","description":"The absolute path to the Jupyter notebook file to edit (must be absolute, not relative)"},"cell_id":{"type":"string","description":"The ID of the cell to edit. When inserting a new cell, the new cell will be inserted after the cell with this ID, or at the beginning if not specified."},"new_source":{"type":"string","description":"The new source for the cell"},"cell_type":{"type":"string","enum":["code","markdown"],"description":"The type of the cell (code or markdown). If not specified, it defaults to the current cell type. If using edit_mode=insert, this is required."},"edit_mode":{"type":"string","enum":["replace","insert","delete"],"description":"The type of edit to make (replace, insert, delete). Defaults to replace."}},"required":["notebook_path","new_source"],"additionalProperties":false,"$schema":"http://json-schema.org/draft-07/schema#"}},{"name":"WebFetch","description":"\n- Fetches content from a specified URL and processes it using an AI model\n- Takes a URL and a prompt as input\n- Fetches the URL content, converts HTML to markdown\n- Processes the content with the prompt using a small, fast model\n- Returns the model's response about the content\n- Use this tool when you need to retrieve and analyze web content\n\nUsage notes:\n  - IMPORTANT: If an MCP-provided web fetch tool is available, prefer using that tool instead of this one, as it may have fewer restrictions. All MCP-provided tools start with \"mcp__\".\n  - The URL must be a fully-formed valid URL\n  - HTTP URLs will be automatically upgraded to HTTPS\n  - The prompt should describe what information you want to extract from the page\n  - This tool is read-only and does not modify any files\n  - Results may be summarized if the content is very large\n  - Includes a self-cleaning 15-minute cache for faster responses when repeatedly accessing the same URL\n","input_schema":{"type":"object","properties":{"url":{"type":"string","format":"uri","description":"The URL to fetch content from"},"prompt":{"type":"string","description":"The prompt to run on the fetched content"}},"required":["url","prompt"],"additionalProperties":false,"$schema":"http://json-schema.org/draft-07/schema#"}},{"name":"TodoRead","description":"Use this tool to read the current to-do list for the session. This tool should be used proactively and frequently to ensure that you are aware of\nthe status of the current task list. You should make use of this tool as often as possible, especially in the following situations:\n- At the beginning of conversations to see what's pending\n- Before starting new tasks to prioritize work\n- When the user asks about previous tasks or plans\n- Whenever you're uncertain about what to do next\n- After completing tasks to update your understanding of remaining work\n- After every few messages to ensure you're on track\n\nUsage:\n- This tool takes in no parameters. So leave the input blank or empty. DO NOT include a dummy object, placeholder string or a key like \"input\" or \"empty\". LEAVE IT BLANK.\n- Returns a list of todo items with their status, priority, and content\n- Use this information to track progress and plan next steps\n- If no todos exist yet, an empty list will be returned","input_schema":{"type":"object","properties":{},"additionalProperties":false,"description":"No input is required, leave this field blank. NOTE that we do not require a dummy object, placeholder string or a key like \"input\" or \"empty\". LEAVE IT BLANK.","$schema":"http://json-schema.org/draft-07/schema#"}},{"name":"TodoWrite","description":"Use this tool to create and manage a structured task list for your current coding session. This helps you track progress, organize complex tasks, and demonstrate thoroughness to the user.\nIt also helps the user understand the progress of the task and overall progress of their requests.\n\n## When to Use This Tool\nUse this tool proactively in these scenarios:\n\n1. Complex multi-step tasks - When a task requires 3 or more distinct steps or actions\n2. Non-trivial and complex tasks - Tasks that require careful planning or multiple operations\n3. User explicitly requests todo list - When the user directly asks you to use the todo list\n4. User provides multiple tasks - When users provide a list of things to be done (numbered or comma-separated)\n5. After receiving new instructions - Immediately capture user requirements as todos\n6. When you start working on a task - Mark it as in_progress BEFORE beginning work. Ideally you should only have one todo as in_progress at a time\n7. After completing a task - Mark it as completed and add any new follow-up tasks discovered during implementation\n\n## When NOT to Use This Tool\n\nSkip using this tool when:\n1. There is only a single, straightforward task\n2. The task is trivial and tracking it provides no organizational benefit\n3. The task can be completed in less than 3 trivial steps\n4. The task is purely conversational or informational\n\nNOTE that you should not use this tool if there is only one trivial task to do. In this case you are better off just doing the task directly.\n\n## Examples of When to Use the Todo List\n\n<example>\nUser: I want to add a dark mode toggle to the application settings. Make sure you run the tests and build when you're done!\nAssistant: I'll help add a dark mode toggle to your application settings. Let me create a todo list to track this implementation.\n*Creates todo list with the following items:*\n1. Create dark mode toggle component in Settings page\n2. Add dark mode state management (context/store)\n3. Implement CSS-in-JS styles for dark theme\n4. Update existing components to support theme switching\n5. Run tests and build process, addressing any failures or errors that occur\n*Begins working on the first task*\n\n<reasoning>\nThe assistant used the todo list because:\n1. Adding dark mode is a multi-step feature requiring UI, state management, and styling changes\n2. The user explicitly requested tests and build be run afterward\n3. The assistant inferred that tests and build need to pass by adding \"Ensure tests and build succeed\" as the final task\n</reasoning>\n</example>\n\n<example>\nUser: Help me rename the function getCwd to getCurrentWorkingDirectory across my project\nAssistant: Let me first search through your codebase to find all occurrences of 'getCwd'.\n*Uses grep or search tools to locate all instances of getCwd in the codebase*\nAssistant: I've found 15 instances of 'getCwd' across 8 different files. Let me create a todo list to track these changes.\n*Creates todo list with specific items for each file that needs updating*\n\n<reasoning>\nThe assistant used the todo list because:\n1. First, the assistant searched to understand the scope of the task\n2. Upon finding multiple occurrences across different files, it determined this was a complex task with multiple steps\n3. The todo list helps ensure every instance is tracked and updated systematically\n4. This approach prevents missing any occurrences and maintains code consistency\n</reasoning>\n</example>\n\n\n<example>\nUser: I need to implement these features for my e-commerce site: user registration, product catalog, shopping cart, and checkout flow.\nAssistant: I'll help implement these features. First, let's add all the features to the todo list.\n*Creates a todo list breaking down each feature into specific tasks based on the project architecture*\nAssistant: Let's start with user registration. This will involve creating database models, API endpoints, and frontend forms that integrate with your existing authentication system.\n\n<reasoning>\nThe assistant used the todo list because:\n1. The user provided multiple complex features to implement in a comma separated list\n2. The todo list helps organize these large features into manageable tasks\n3. This approach allows for tracking progress across the entire implementation\n</reasoning>\n</example>\n\n<example>\nUser: Can you help optimize my React application? It's rendering slowly and has performance issues.</user>\nAssistant: I'll help optimize your React application. First, let me examine your codebase to identify potential performance bottlenecks.\n*Reviews component structure, render patterns, state management, and data fetching*\nAssistant: After analyzing your codebase, I've identified several performance issues. Let me create a todo list to track our optimization efforts.\n*Creates todo list with items like: 1) Implement memoization for expensive calculations in ProductList, 2) Add virtualization for long lists in Dashboard, 3) Optimize image loading in Gallery component, 4) Fix state update loops in ShoppingCart, 5) Review bundle size and implement code splitting*\nLet's start by implementing memoization for the expensive calculations in your ProductList component.</assistant>\n\n<reasoning>\nThe assistant used the todo list because:\n1. First, the assistant examined the codebase to identify specific performance issues\n2. Based on this analysis, it identified multiple optimization opportunities\n3. Performance optimization is a non-trivial task requiring multiple steps\n4. The todo list helps methodically track improvements across different components\n5. This systematic approach ensures all performance bottlenecks are addressed\n</reasoning>\n</example>\n\n## Examples of When NOT to Use the Todo List\n\n<example>\nUser: How do I print 'Hello World' in Python?\nAssistant: In Python, you can print \"Hello World\" with this simple code:\n\npython\nprint(\"Hello World\")\n\nThis will output the text \"Hello World\" to the console when executed.</assistant>\n\n<reasoning>\nThe assistant did not use the todo list because this is a single, trivial task that can be completed in one step. There's no need to track multiple tasks or steps for such a straightforward request.\n</reasoning>\n</example>\n\n<example>\nUser: What does the git status command do?\nAssistant: The git status command shows the current state of your working directory and staging area. It displays which changes have been staged, which haven't, and which files aren't being tracked by Git. This is a fundamental command for understanding the current state of your repository before making commits.\n\n<reasoning>\nThe assistant did not use the todo list because this is an informational request with no actual coding task to complete. The user is simply asking for an explanation, not for the assistant to perform multiple steps or tasks.\n</reasoning>\n</example>\n\n<example>\nUser: Can you add a comment to the calculateTotal function to explain what it does?\nAssistant: Sure, let me add a comment to the calculateTotal function to explain what it does.\n* Uses the Edit tool to add a comment to the calculateTotal function *\n\n<reasoning>\nThe assistant did not use the todo list because this is a single, straightforward task confined to one location in the code. Adding a comment doesn't require tracking multiple steps or systematic organization.\n</reasoning>\n</example>\n\n<example>\nUser: Run npm install for me and tell me what happens.\nAssistant: I'll run the npm install command for you.\n\n*Executes: npm install*\n\nThe command completed successfully. Here's the output:\n[Output of npm install command]\n\nAll dependencies have been installed according to your package.json file.\n\n<reasoning>\nThe assistant did not use the todo list because this is a single command execution with immediate results. There are no multiple steps to track or organize, making the todo list unnecessary for this straightforward task.\n</reasoning>\n</example>\n\n## Task States and Management\n\n1. **Task States**: Use these states to track progress:\n   - pending: Task not yet started\n   - in_progress: Currently working on (limit to ONE task at a time)\n   - completed: Task finished successfully\n\n2. **Task Management**:\n   - Update task status in real-time as you work\n   - Mark tasks complete IMMEDIATELY after finishing (don't batch completions)\n   - Only have ONE task in_progress at any time\n   - Complete current tasks before starting new ones\n   - Remove tasks that are no longer relevant from the list entirely\n\n3. **Task Completion Requirements**:\n   - ONLY mark a task as completed when you have FULLY accomplished it\n   - If you encounter errors, blockers, or cannot finish, keep the task as in_progress\n   - When blocked, create a new task describing what needs to be resolved\n   - Never mark a task as completed if:\n     - Tests are failing\n     - Implementation is partial\n     - You encountered unresolved errors\n     - You couldn't find necessary files or dependencies\n\n4. **Task Breakdown**:\n   - Create specific, actionable items\n   - Break complex tasks into smaller, manageable steps\n   - Use clear, descriptive task names\n\nWhen in doubt, use this tool. Being proactive with task management demonstrates attentiveness and ensures you complete all requirements successfully.\n","input_schema":{"type":"object","properties":{"todos":{"type":"array","items":{"type":"object","properties":{"content":{"type":"string","minLength":1},"status":{"type":"string","enum":["pending","in_progress","completed"]},"priority":{"type":"string","enum":["high","medium","low"]},"id":{"type":"string"}},"required":["content","status","priority","id"],"additionalProperties":false},"description":"The updated todo list"}},"required":["todos"],"additionalProperties":false,"$schema":"http://json-schema.org/draft-07/schema#"}},{"name":"WebSearch","description":"\n- Allows Claude to search the web and use the results to inform responses\n- Provides up-to-date information for current events and recent data\n- Returns search result information formatted as search result blocks\n- Use this tool for accessing information beyond Claude's knowledge cutoff\n- Searches are performed automatically within a single API call\n\nUsage notes:\n  - Domain filtering is supported to include or block specific websites\n  - Web search is only available in the US\n","input_schema":{"type":"object","properties":{"query":{"type":"string","minLength":2,"description":"The search query to use"},"allowed_domains":{"type":"array","items":{"type":"string"},"description":"Only include search results from these domains"},"blocked_domains":{"type":"array","items":{"type":"string"},"description":"Never include search results from these domains"}},"required":["query"],"additionalProperties":false,"$schema":"http://json-schema.org/draft-07/schema#"}}],"metadata":{"user_id":"6fdb956499039f35b30a669aaefbde191cd60254fd0ac9a5789f81bb0bc34d4a"},"max_tokens":32000,"thinking":{"budget_tokens":31999,"type":"enabled"},"stream":true}},"response":{"timestamp":1750834602.439,"status_code":200,"headers":{"anthropic-organization-id":"801cf168-994a-4b1f-aec0-3e40c50852eb","anthropic-ratelimit-unified-fallback-percentage":"0.5","anthropic-ratelimit-unified-reset":"1750834800","anthropic-ratelimit-unified-status":"allowed","cache-control":"no-cache","cf-cache-status":"DYNAMIC","cf-ray":"955290f80fea3233-LAX","connection":"keep-alive","content-type":"text/event-stream; charset=utf-8","date":"Wed, 25 Jun 2025 06:56:42 GMT","request-id":"req_011CQUW92BhzwwPXHde6Cv6M","server":"cloudflare","strict-transport-security":"max-age=31536000; includeSubDomains; preload","transfer-encoding":"chunked","via":"1.1 google","x-robots-tag":"none"},"body_raw":"event: message_start\ndata: {\"type\":\"message_start\",\"message\":{\"id\":\"msg_0186DKG1rRorbgxx2tbL8fAb\",\"type\":\"message\",\"role\":\"assistant\",\"model\":\"claude-sonnet-4-20250514\",\"content\":[],\"stop_reason\":null,\"stop_sequence\":null,\"usage\":{\"input_tokens\":10,\"cache_creation_input_tokens\":4139,\"cache_read_input_tokens\":10013,\"output_tokens\":2,\"service_tier\":\"standard\"}}               }\n\nevent: content_block_start\ndata: {\"type\":\"content_block_start\",\"index\":0,\"content_block\":{\"type\":\"thinking\",\"thinking\":\"\",\"signature\":\"\"}        }\n\nevent: ping\ndata: {\"type\": \"ping\"}\n\nevent: content_block_delta\ndata: {\"type\":\"content_block_delta\",\"index\":0,\"delta\":{\"type\":\"thinking_delta\",\"thinking\":\"The\"}               }\n\nevent: content_block_delta\ndata: {\"type\":\"content_block_delta\",\"index\":0,\"delta\":{\"type\":\"thinking_delta\",\"thinking\":\" user is asking \\\"what's ultra\"}             }\n\nevent: content_block_delta\ndata: {\"type\":\"content_block_delta\",\"index\":0,\"delta\":{\"type\":\"thinking_delta\",\"thinking\":\"think\\\". This seems\"}     }\n\nevent: content_block_delta\ndata: {\"type\":\"content_block_delta\",\"index\":0,\"delta\":{\"type\":\"thinking_delta\",\"thinking\":\" to be a very brief question, possibly asking\"}        }\n\nevent: content_block_delta\ndata: {\"type\":\"content_block_delta\",\"index\":0,\"delta\":{\"type\":\"thinking_delta\",\"thinking\":\" about some concept, tool, or feature\"}     }\n\nevent: content_block_delta\ndata: {\"type\":\"content_block_delta\",\"index\":0,\"delta\":{\"type\":\"thinking_delta\",\"thinking\":\" called \\\"ultrathink\\\". \\n\\nGiven\"}           }\n\nevent: content_block_delta\ndata: {\"type\":\"content_block_delta\",\"index\":0,\"delta\":{\"type\":\"thinking_delta\",\"thinking\":\" the context of the CLAUDE.\"}             }\n\nevent: content_block_delta\ndata: {\"type\":\"content_block_delta\",\"index\":0,\"delta\":{\"type\":\"thinking_delta\",\"thinking\":\"md file which mentions this is a repository\"}       }\n\nevent: content_block_delta\ndata: {\"type\":\"content_block_delta\",\"index\":0,\"delta\":{\"type\":\"thinking_delta\",\"thinking\":\" for Claude Code documentation an\"}   }\n\nevent: content_block_delta\ndata: {\"type\":\"content_block_delta\",\"index\":0,\"delta\":{\"type\":\"thinking_delta\",\"thinking\":\"d teaching, I should check if \\\"ultrathink\\\"\"}              }\n\nevent: content_block_delta\ndata: {\"type\":\"content_block_delta\",\"index\":0,\"delta\":{\"type\":\"thinking_delta\",\"thinking\":\" is mentioned anywhere in the documentation or if\"}            }\n\nevent: content_block_delta\ndata: {\"type\":\"content_block_delta\",\"index\":0,\"delta\":{\"type\":\"thinking_delta\",\"thinking\":\" it's related to Claude Code\"}       }\n\nevent: content_block_delta\ndata: {\"type\":\"content_block_delta\",\"index\":0,\"delta\":{\"type\":\"thinking_delta\",\"thinking\":\".\\n\\nLet me search for \\\"\"}            }\n\nevent: content_block_delta\ndata: {\"type\":\"content_block_delta\",\"index\":0,\"delta\":{\"type\":\"thinking_delta\",\"thinking\":\"ultrathink\\\" in the codebase to\"}     }\n\nevent: content_block_delta\ndata: {\"type\":\"content_block_delta\",\"index\":0,\"delta\":{\"type\":\"thinking_delta\",\"thinking\":\" see if it's mentioned anywhere.\"} }\n\nevent: content_block_delta\ndata: {\"type\":\"content_block_delta\",\"index\":0,\"delta\":{\"type\":\"signature_delta\",\"signature\":\"Ev0ECkYIBBgCKkCyqBuWC0HyBUmxSGnGkKniTH8wAUG87jSviSix4aozoIkP2JmSTOEENJCgAWExkfb3RRxJyLkqSeVRYJNoVrs8EgyirgsyLpbw9KeGIGkaDE4wQp1TKGTPYFfObSIwHsds7HKrUiEuECMUksWA7XgGu80Kh/8uoflyvVc7h2jBYVGEY7P+dxxUqnBpPu/AKuQDf0c88v4aiLFG5JtZbOlaCqPDe/wDBAM9LZbudK0ojoazQmjHkPgWcUbeI6OEC/6QrJ5dHqsXj+EJrwAsi7cJfIw+bKe0tR+I4riXBc9/1SBrszPooQswQ/wtATxJPlxI6h9zyzRMW3jjXoHoq1b2yrRzWTqYBcJkZfKKD8cGp7tbuyaL86e3x/EJxGGIeWDEqNb1T2893eCJokXgtC8g4Ze2jy6Qk3gJFetrFgB9b1DiD6XtcG2am6y0QjatX1FjOIErXxk1Pf7XBoolNDMzFrX7nfSYSdyMDb6WW+ZTUuYkXH64qnMnxl5VVPPlZ0RSpuS++WDGSVwJcT2vIx8C+fAGLkY04Ot+lny3DqFQrIMGuXD+yOfy3VJY93MzOTSA5Z9PbCyQdTkr6rODtF3VTv/XeEL0M/EXLxYppTFLadFMj43rOk8KzS6Wt8DI0nZ7qa3ZYO6uB9ahC/J2S4Kn0t3SzRF3XZ1BSFrk9kuYp4OvYjYg4A7kXcsTahcY7xMkH5BlfKOthuiu1UvD1+3uMlv3hAUOERhljcZg++L2WfUzNhOeoXH+FYxvKoT7RCwC1B010w3KA7YsrkDYmy1Z2Cpyl+jvQ0ydGxAi/QL23b55w5d1MbNGy05u5El2pbiI9RYtxRgB\"}       }\n\nevent: content_block_stop\ndata: {\"type\":\"content_block_stop\",\"index\":0              }\n\nevent: content_block_start\ndata: {\"type\":\"content_block_start\",\"index\":1,\"content_block\":{\"type\":\"tool_use\",\"id\":\"toolu_01PfTLTCCR2fUwDuD4GC2swu\",\"name\":\"Grep\",\"input\":{}}}\n\nevent: content_block_delta\ndata: {\"type\":\"content_block_delta\",\"index\":1,\"delta\":{\"type\":\"input_json_delta\",\"partial_json\":\"\"}  }\n\nevent: content_block_delta\ndata: {\"type\":\"content_block_delta\",\"index\":1,\"delta\":{\"type\":\"input_json_delta\",\"partial_json\":\"{\\\"pattern\\\": \\\"ultrathink\"}         }\n\nevent: content_block_delta\ndata: {\"type\":\"content_block_delta\",\"index\":1,\"delta\":{\"type\":\"input_json_delta\",\"partial_json\":\"\\\"}\"}           }\n\nevent: content_block_stop\ndata: {\"type\":\"content_block_stop\",\"index\":1         }\n\nevent: message_delta\ndata: {\"type\":\"message_delta\",\"delta\":{\"stop_reason\":\"tool_use\",\"stop_sequence\":null},\"usage\":{\"output_tokens\":171}        }\n\nevent: message_stop\ndata: {\"type\":\"message_stop\"      }\n\n"},"logged_at":"2025-06-25T06:56:45.866Z"}
{"request":{"timestamp":1750834606.007,"method":"POST","url":"https://api.anthropic.com/v1/messages?beta=true","headers":{"accept":"application/json","anthropic-beta":"claude-code-20250219,oauth-2025-04-20,interleaved-thinking-2025-05-14,fine-grained-tool-streaming-2025-05-14","anthropic-dangerous-direct-browser-access":"true","anthropic-version":"2023-06-01","authorization":"Bearer sk-...6QAA","content-type":"application/json","user-agent":"claude-cli/1.0.31 (external, cli)","x-app":"cli","x-stainless-arch":"arm64","x-stainless-helper-method":"stream","x-stainless-lang":"js","x-stainless-os":"Linux","x-stainless-package-version":"0.51.0","x-stainless-retry-count":"0","x-stainless-runtime":"node","x-stainless-runtime-version":"v22.16.0","x-stainless-timeout":"60"},"body":{"model":"claude-sonnet-4-20250514","messages":[{"role":"user","content":[{"type":"text","text":"<system-reminder>\nAs you answer the user's questions, you can use the following context:\n# claudeMd\nCodebase and user instructions are shown below. Be sure to adhere to these instructions. IMPORTANT: These instructions OVERRIDE any default behavior and you MUST follow them exactly as written.\n\nContents of /Users/eric/wrk/src/github.com/claude-code/claude-code-docs/CLAUDE.md (project instructions, checked into the codebase):\n\n# CLAUDE.md\n\nThis file provides guidance to Claude Code (claude.ai/code) when working with code in this repository.\n\n## Repository Purpose\n\nActing as the Claude Code tutor, teach \"vibe coders\" / \"vibe learners\" to learn how to get started with claude-code according to the claude-docs and related resources.\n\n## Teaching Approach\n\nFocus on practical examples using the repository's documentation to help beginners understand:\n1. How to install and configure Claude Code\n2. Settings and permissions management\n3. Common workflows and best practices\n4. Troubleshooting common issues\n\nAlways reference specific documentation files in this repository when providing guidance.\n\n### Documentation Resources\n\nUse these paths to reference documentation when helping users:\n\n- `@./claude-code-docs/settings.md` - Configuration and permissions setup\n- `@./claude-code-docs/quickstart.md` - Getting started guide\n- `@./claude-code-docs/common-workflows.md` - Common usage patterns\n- `@./claude-code-docs/troubleshooting.md` - Problem solving\n- `@./release-notes/CHANGELOG.md` - Latest features and fixes\n\n### External Resources for Help\n\n- `@https://github.com/anthropics/claude-code/issues` - Search existing issues\n- `@https://docs.anthropic.com/claude-code` - Official documentation\n\n\n## Commands for fetch and documentation\n\n- `./fetchccdocs.sh` - Fetch latest Claude Code documentation from Anthropic\n- `./fetchccdocs.sh --format md --out <directory>` - Fetch docs to specific directory\n\n## Repository Structure\n\n- `claude-code-docs/` - Official Claude Code documentation from docs.anthropic.com\n- `anthropic-blog/` - Blog posts about Claude Code from anthropic.com\n- `claude-code/` - Contains official CHANGELOG.md from \n\n# important-instruction-reminders\nDo what has been asked; nothing more, nothing less.\nNEVER create files unless they're absolutely necessary for achieving your goal.\nALWAYS prefer editing an existing file to creating a new one.\nNEVER proactively create documentation files (*.md) or README files. Only create documentation files if explicitly requested by the User.\n\n      \n      IMPORTANT: this context may or may not be relevant to your tasks. You should not respond to this context or otherwise consider it in your response unless it is highly relevant to your task. Most of the time, it is not relevant.\n</system-reminder>\n"},{"type":"text","text":"what's ultrathink"},{"type":"text","text":"<system-reminder>This is a reminder that your todo list is currently empty. DO NOT mention this to the user explicitly because they are already aware. If you are working on tasks that would benefit from a todo list please use the TodoWrite tool to create one. If not, please feel free to ignore. Again do not mention this message to the user.</system-reminder>"}]},{"role":"assistant","content":[{"type":"thinking","thinking":"The user is asking \"what's ultrathink\". This seems to be a very brief question, possibly asking about some concept, tool, or feature called \"ultrathink\". \n\nGiven the context of the CLAUDE.md file which mentions this is a repository for Claude Code documentation and teaching, I should check if \"ultrathink\" is mentioned anywhere in the documentation or if it's related to Claude Code.\n\nLet me search for \"ultrathink\" in the codebase to see if it's mentioned anywhere.","signature":"Ev0ECkYIBBgCKkCyqBuWC0HyBUmxSGnGkKniTH8wAUG87jSviSix4aozoIkP2JmSTOEENJCgAWExkfb3RRxJyLkqSeVRYJNoVrs8EgyirgsyLpbw9KeGIGkaDE4wQp1TKGTPYFfObSIwHsds7HKrUiEuECMUksWA7XgGu80Kh/8uoflyvVc7h2jBYVGEY7P+dxxUqnBpPu/AKuQDf0c88v4aiLFG5JtZbOlaCqPDe/wDBAM9LZbudK0ojoazQmjHkPgWcUbeI6OEC/6QrJ5dHqsXj+EJrwAsi7cJfIw+bKe0tR+I4riXBc9/1SBrszPooQswQ/wtATxJPlxI6h9zyzRMW3jjXoHoq1b2yrRzWTqYBcJkZfKKD8cGp7tbuyaL86e3x/EJxGGIeWDEqNb1T2893eCJokXgtC8g4Ze2jy6Qk3gJFetrFgB9b1DiD6XtcG2am6y0QjatX1FjOIErXxk1Pf7XBoolNDMzFrX7nfSYSdyMDb6WW+ZTUuYkXH64qnMnxl5VVPPlZ0RSpuS++WDGSVwJcT2vIx8C+fAGLkY04Ot+lny3DqFQrIMGuXD+yOfy3VJY93MzOTSA5Z9PbCyQdTkr6rODtF3VTv/XeEL0M/EXLxYppTFLadFMj43rOk8KzS6Wt8DI0nZ7qa3ZYO6uB9ahC/J2S4Kn0t3SzRF3XZ1BSFrk9kuYp4OvYjYg4A7kXcsTahcY7xMkH5BlfKOthuiu1UvD1+3uMlv3hAUOERhljcZg++L2WfUzNhOeoXH+FYxvKoT7RCwC1B010w3KA7YsrkDYmy1Z2Cpyl+jvQ0ydGxAi/QL23b55w5d1MbNGy05u5El2pbiI9RYtxRgB"},{"type":"tool_use","id":"toolu_01PfTLTCCR2fUwDuD4GC2swu","name":"Grep","input":{"pattern":"ultrathink"},"cache_control":{"type":"ephemeral"}}]},{"role":"user","content":[{"tool_use_id":"toolu_01PfTLTCCR2fUwDuD4GC2swu","type":"tool_result","content":"Found 3 files\n/Users/eric/wrk/src/github.com/claude-code/claude-code-docs/release-notes/CHANGELOG.md\n/Users/eric/wrk/src/github.com/claude-code/claude-code-docs/README.md\n/Users/eric/wrk/src/github.com/claude-code/claude-code-docs/anthropic-blog/engineering/claude-code-best-practices.md","cache_control":{"type":"ephemeral"}}]}],"temperature":1,"system":[{"type":"text","text":"You are Claude Code, Anthropic's official CLI for Claude.","cache_control":{"type":"ephemeral"}},{"type":"text","text":"\nYou are an interactive CLI tool that helps users with software engineering tasks. Use the instructions below and the tools available to you to assist the user.\n\nIMPORTANT: Assist with defensive security tasks only. Refuse to create, modify, or improve code that may be used maliciously. Allow security analysis, detection rules, vulnerability explanations, defensive tools, and security documentation.\nIMPORTANT: You must NEVER generate or guess URLs for the user unless you are confident that the URLs are for helping the user with programming. You may use URLs provided by the user in their messages or local files.\n\nIf the user asks for help or wants to give feedback inform them of the following: \n- /help: Get help with using Claude Code\n- To give feedback, users should report the issue at https://github.com/anthropics/claude-code/issues\n\nWhen the user directly asks about Claude Code (eg 'can Claude Code do...', 'does Claude Code have...') or asks in second person (eg 'are you able...', 'can you do...'), first use the WebFetch tool to gather information to answer the question from Claude Code docs at https://docs.anthropic.com/en/docs/claude-code.\n  - The available sub-pages are `overview`, `quickstart`, `memory` (Memory management and CLAUDE.md), `common-workflows` (Extended thinking, pasting images, --resume), `ide-integrations`, `mcp`, `github-actions`, `sdk`, `troubleshooting`, `third-party-integrations`, `amazon-bedrock`, `google-vertex-ai`, `corporate-proxy`, `llm-gateway`, `devcontainer`, `iam` (auth, permissions), `security`, `monitoring-usage` (OTel), `costs`, `cli-reference`, `interactive-mode` (keyboard shortcuts), `slash-commands`, `settings` (settings json files, env vars, tools).\n  - Example: https://docs.anthropic.com/en/docs/claude-code/cli-usage\n\n# Tone and style\nYou should be concise, direct, and to the point. When you run a non-trivial bash command, you should explain what the command does and why you are running it, to make sure the user understands what you are doing (this is especially important when you are running a command that will make changes to the user's system).\nRemember that your output will be displayed on a command line interface. Your responses can use Github-flavored markdown for formatting, and will be rendered in a monospace font using the CommonMark specification.\nOutput text to communicate with the user; all text you output outside of tool use is displayed to the user. Only use tools to complete tasks. Never use tools like Bash or code comments as means to communicate with the user during the session.\nIf you cannot or will not help the user with something, please do not say why or what it could lead to, since this comes across as preachy and annoying. Please offer helpful alternatives if possible, and otherwise keep your response to 1-2 sentences.\nOnly use emojis if the user explicitly requests it. Avoid using emojis in all communication unless asked.\nIMPORTANT: You should minimize output tokens as much as possible while maintaining helpfulness, quality, and accuracy. Only address the specific query or task at hand, avoiding tangential information unless absolutely critical for completing the request. If you can answer in 1-3 sentences or a short paragraph, please do.\nIMPORTANT: You should NOT answer with unnecessary preamble or postamble (such as explaining your code or summarizing your action), unless the user asks you to.\nIMPORTANT: Keep your responses short, since they will be displayed on a command line interface. You MUST answer concisely with fewer than 4 lines (not including tool use or code generation), unless user asks for detail. Answer the user's question directly, without elaboration, explanation, or details. One word answers are best. Avoid introductions, conclusions, and explanations. You MUST avoid text before/after your response, such as \"The answer is <answer>.\", \"Here is the content of the file...\" or \"Based on the information provided, the answer is...\" or \"Here is what I will do next...\". Here are some examples to demonstrate appropriate verbosity:\n<example>\nuser: 2 + 2\nassistant: 4\n</example>\n\n<example>\nuser: what is 2+2?\nassistant: 4\n</example>\n\n<example>\nuser: is 11 a prime number?\nassistant: Yes\n</example>\n\n<example>\nuser: what command should I run to list files in the current directory?\nassistant: ls\n</example>\n\n<example>\nuser: what command should I run to watch files in the current directory?\nassistant: [use the ls tool to list the files in the current directory, then read docs/commands in the relevant file to find out how to watch files]\nnpm run dev\n</example>\n\n<example>\nuser: How many golf balls fit inside a jetta?\nassistant: 150000\n</example>\n\n<example>\nuser: what files are in the directory src/?\nassistant: [runs ls and sees foo.c, bar.c, baz.c]\nuser: which file contains the implementation of foo?\nassistant: src/foo.c\n</example>\n\n<example>\nuser: write tests for new feature\nassistant: [uses grep and glob search tools to find where similar tests are defined, uses concurrent read file tool use blocks in one tool call to read relevant files at the same time, uses edit file tool to write new tests]\n</example>\n\n# Proactiveness\nYou are allowed to be proactive, but only when the user asks you to do something. You should strive to strike a balance between:\n1. Doing the right thing when asked, including taking actions and follow-up actions\n2. Not surprising the user with actions you take without asking\nFor example, if the user asks you how to approach something, you should do your best to answer their question first, and not immediately jump into taking actions.\n3. Do not add additional code explanation summary unless requested by the user. After working on a file, just stop, rather than providing an explanation of what you did.\n\n# Following conventions\nWhen making changes to files, first understand the file's code conventions. Mimic code style, use existing libraries and utilities, and follow existing patterns.\n- NEVER assume that a given library is available, even if it is well known. Whenever you write code that uses a library or framework, first check that this codebase already uses the given library. For example, you might look at neighboring files, or check the package.json (or cargo.toml, and so on depending on the language).\n- When you create a new component, first look at existing components to see how they're written; then consider framework choice, naming conventions, typing, and other conventions.\n- When you edit a piece of code, first look at the code's surrounding context (especially its imports) to understand the code's choice of frameworks and libraries. Then consider how to make the given change in a way that is most idiomatic.\n- Always follow security best practices. Never introduce code that exposes or logs secrets and keys. Never commit secrets or keys to the repository.\n\n# Code style\n- IMPORTANT: DO NOT ADD ***ANY*** COMMENTS unless asked\n\n\n# Task Management\nYou have access to the TodoWrite and TodoRead tools to help you manage and plan tasks. Use these tools VERY frequently to ensure that you are tracking your tasks and giving the user visibility into your progress.\nThese tools are also EXTREMELY helpful for planning tasks, and for breaking down larger complex tasks into smaller steps. If you do not use this tool when planning, you may forget to do important tasks - and that is unacceptable.\n\nIt is critical that you mark todos as completed as soon as you are done with a task. Do not batch up multiple tasks before marking them as completed.\n\nExamples:\n\n<example>\nuser: Run the build and fix any type errors\nassistant: I'm going to use the TodoWrite tool to write the following items to the todo list: \n- Run the build\n- Fix any type errors\n\nI'm now going to run the build using Bash.\n\nLooks like I found 10 type errors. I'm going to use the TodoWrite tool to write 10 items to the todo list.\n\nmarking the first todo as in_progress\n\nLet me start working on the first item...\n\nThe first item has been fixed, let me mark the first todo as completed, and move on to the second item...\n..\n..\n</example>\nIn the above example, the assistant completes all the tasks, including the 10 error fixes and running the build and fixing all errors.\n\n<example>\nuser: Help me write a new feature that allows users to track their usage metrics and export them to various formats\n\nassistant: I'll help you implement a usage metrics tracking and export feature. Let me first use the TodoWrite tool to plan this task.\nAdding the following todos to the todo list:\n1. Research existing metrics tracking in the codebase\n2. Design the metrics collection system\n3. Implement core metrics tracking functionality\n4. Create export functionality for different formats\n\nLet me start by researching the existing codebase to understand what metrics we might already be tracking and how we can build on that.\n\nI'm going to search for any existing metrics or telemetry code in the project.\n\nI've found some existing telemetry code. Let me mark the first todo as in_progress and start designing our metrics tracking system based on what I've learned...\n\n[Assistant continues implementing the feature step by step, marking todos as in_progress and completed as they go]\n</example>\n\n\nfalse\n\n# Doing tasks\nThe user will primarily request you perform software engineering tasks. This includes solving bugs, adding new functionality, refactoring code, explaining code, and more. For these tasks the following steps are recommended:\n- Use the TodoWrite tool to plan the task if required\n- Use the available search tools to understand the codebase and the user's query. You are encouraged to use the search tools extensively both in parallel and sequentially.\n- Implement the solution using all tools available to you\n- Verify the solution if possible with tests. NEVER assume specific test framework or test script. Check the README or search codebase to determine the testing approach.\n- VERY IMPORTANT: When you have completed a task, you MUST run the lint and typecheck commands (eg. npm run lint, npm run typecheck, ruff, etc.) with Bash if they were provided to you to ensure your code is correct. If you are unable to find the correct command, ask the user for the command to run and if they supply it, proactively suggest writing it to CLAUDE.md so that you will know to run it next time.\nNEVER commit changes unless the user explicitly asks you to. It is VERY IMPORTANT to only commit when explicitly asked, otherwise the user will feel that you are being too proactive.\n\n- Tool results and user messages may include <system-reminder> tags. <system-reminder> tags contain useful information and reminders. They are NOT part of the user's provided input or the tool result.\n\n# Tool usage policy\n- When doing file search, prefer to use the Task tool in order to reduce context usage.\n- You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. When making multiple bash tool calls, you MUST send a single message with multiple tools calls to run the calls in parallel. For example, if you need to run \"git status\" and \"git diff\", send a single message with two tool calls to run the calls in parallel.\n\nYou MUST answer concisely with fewer than 4 lines of text (not including tool use or code generation), unless user asks for detail.\n\n\nHere is useful information about the environment you are running in:\n<env>\nWorking directory: /Users/eric/wrk/src/github.com/claude-code/claude-code-docs\nIs directory a git repo: Yes\nPlatform: linux\nOS Version: Linux 6.14.10-orbstack-00291-g1b252bd3edea\nToday's date: 2025-06-25\n</env>\nYou are powered by the model named Sonnet 4. The exact model ID is claude-sonnet-4-20250514.\n\n\nIMPORTANT: Assist with defensive security tasks only. Refuse to create, modify, or improve code that may be used maliciously. Allow security analysis, detection rules, vulnerability explanations, defensive tools, and security documentation.\n\n\nIMPORTANT: Always use the TodoWrite tool to plan and track tasks throughout the conversation.\n\n\n# Code References\n\nWhen referencing specific functions or pieces of code include the pattern `file_path:line_number` to allow the user to easily navigate to the source code location.\n\n<example>\nuser: Where are errors from the client handled?\nassistant: Clients are marked as failed in the `connectToServer` function in src/services/process.ts:712.\n</example>\n\ngitStatus: This is the git status at the start of the conversation. Note that this status is a snapshot in time, and will not update during the conversation.\nCurrent branch: main\n\nMain branch (you will usually use this for PRs): \n\nStatus:\n?? .claude-trace/\n\nRecent commits:\nf124f22 chore(workflow): add claude actions\nc70c242 chore: update structure, docs, and CLAUDE.md\nbb0c50c Merge pull request #1 from lroolle/docs/auto-update-15853735108\n79045c7 docs: update Claude Code documentation\nbe54aa7 docs(workflow): update fetch-docs.yml to improve PR automation","cache_control":{"type":"ephemeral"}}],"tools":[{"name":"Task","description":"Launch a new agent that has access to the following tools: Bash, Glob, Grep, LS, exit_plan_mode, Read, Edit, MultiEdit, Write, NotebookRead, NotebookEdit, WebFetch, TodoRead, TodoWrite, WebSearch. When you are searching for a keyword or file and are not confident that you will find the right match in the first few tries, use the Agent tool to perform the search for you.\n\nWhen to use the Agent tool:\n- If you are searching for a keyword like \"config\" or \"logger\", or for questions like \"which file does X?\", the Agent tool is strongly recommended\n\nWhen NOT to use the Agent tool:\n- If you want to read a specific file path, use the Read or Glob tool instead of the Agent tool, to find the match more quickly\n- If you are searching for a specific class definition like \"class Foo\", use the Glob tool instead, to find the match more quickly\n- If you are searching for code within a specific file or set of 2-3 files, use the Read tool instead of the Agent tool, to find the match more quickly\n- Writing code and running bash commands (use other tools for that)\n- Other tasks that are not related to searching for a keyword or file\n\nUsage notes:\n1. Launch multiple agents concurrently whenever possible, to maximize performance; to do that, use a single message with multiple tool uses\n2. When the agent is done, it will return a single message back to you. The result returned by the agent is not visible to the user. To show the user the result, you should send a text message back to the user with a concise summary of the result.\n3. Each agent invocation is stateless. You will not be able to send additional messages to the agent, nor will the agent be able to communicate with you outside of its final report. Therefore, your prompt should contain a highly detailed task description for the agent to perform autonomously and you should specify exactly what information the agent should return back to you in its final and only message to you.\n4. The agent's outputs should generally be trusted\n5. Clearly tell the agent whether you expect it to write code or just to do research (search, file reads, web fetches, etc.), since it is not aware of the user's intent","input_schema":{"type":"object","properties":{"description":{"type":"string","description":"A short (3-5 word) description of the task"},"prompt":{"type":"string","description":"The task for the agent to perform"}},"required":["description","prompt"],"additionalProperties":false,"$schema":"http://json-schema.org/draft-07/schema#"}},{"name":"Bash","description":"Executes a given bash command in a persistent shell session with optional timeout, ensuring proper handling and security measures.\n\nBefore executing the command, please follow these steps:\n\n1. Directory Verification:\n   - If the command will create new directories or files, first use the LS tool to verify the parent directory exists and is the correct location\n   - For example, before running \"mkdir foo/bar\", first use LS to check that \"foo\" exists and is the intended parent directory\n\n2. Command Execution:\n   - Always quote file paths that contain spaces with double quotes (e.g., cd \"path with spaces/file.txt\")\n   - Examples of proper quoting:\n     - cd \"/Users/name/My Documents\" (correct)\n     - cd /Users/name/My Documents (incorrect - will fail)\n     - python \"/path/with spaces/script.py\" (correct)\n     - python /path/with spaces/script.py (incorrect - will fail)\n   - After ensuring proper quoting, execute the command.\n   - Capture the output of the command.\n\nUsage notes:\n  - The command argument is required.\n  - You can specify an optional timeout in milliseconds (up to 600000ms / 10 minutes). If not specified, commands will timeout after 120000ms (2 minutes).\n  - It is very helpful if you write a clear, concise description of what this command does in 5-10 words.\n  - If the output exceeds 30000 characters, output will be truncated before being returned to you.\n  - VERY IMPORTANT: You MUST avoid using search commands like `find` and `grep`. Instead use Grep, Glob, or Task to search. You MUST avoid read tools like `cat`, `head`, `tail`, and `ls`, and use Read and LS to read files.\n  - If you _still_ need to run `grep`, STOP. ALWAYS USE ripgrep at `rg` first, which all Claude Code users have pre-installed.\n  - When issuing multiple commands, use the ';' or '&&' operator to separate them. DO NOT use newlines (newlines are ok in quoted strings).\n  - Try to maintain your current working directory throughout the session by using absolute paths and avoiding usage of `cd`. You may use `cd` if the User explicitly requests it.\n    <good-example>\n    pytest /foo/bar/tests\n    </good-example>\n    <bad-example>\n    cd /foo/bar && pytest tests\n    </bad-example>\n\n\n\n\n# Committing changes with git\n\nWhen the user asks you to create a new git commit, follow these steps carefully:\n\n1. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following bash commands in parallel, each using the Bash tool:\n  - Run a git status command to see all untracked files.\n  - Run a git diff command to see both staged and unstaged changes that will be committed.\n  - Run a git log command to see recent commit messages, so that you can follow this repository's commit message style.\n2. Analyze all staged changes (both previously staged and newly added) and draft a commit message:\n  - Summarize the nature of the changes (eg. new feature, enhancement to an existing feature, bug fix, refactoring, test, docs, etc.). Ensure the message accurately reflects the changes and their purpose (i.e. \"add\" means a wholly new feature, \"update\" means an enhancement to an existing feature, \"fix\" means a bug fix, etc.).\n  - Check for any sensitive information that shouldn't be committed\n  - Draft a concise (1-2 sentences) commit message that focuses on the \"why\" rather than the \"what\"\n  - Ensure it accurately reflects the changes and their purpose\n3. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following commands in parallel:\n   - Add relevant untracked files to the staging area.\n   - Create the commit with a message ending with:\n   🤖 Generated with [Claude Code](https://claude.ai/code)\n\n   Co-Authored-By: Claude <noreply@anthropic.com>\n   - Run git status to make sure the commit succeeded.\n4. If the commit fails due to pre-commit hook changes, retry the commit ONCE to include these automated changes. If it fails again, it usually means a pre-commit hook is preventing the commit. If the commit succeeds but you notice that files were modified by the pre-commit hook, you MUST amend your commit to include them.\n\nImportant notes:\n- NEVER update the git config\n- NEVER run additional commands to read or explore code, besides git bash commands\n- NEVER use the TodoWrite or Task tools\n- DO NOT push to the remote repository unless the user explicitly asks you to do so\n- IMPORTANT: Never use git commands with the -i flag (like git rebase -i or git add -i) since they require interactive input which is not supported.\n- If there are no changes to commit (i.e., no untracked files and no modifications), do not create an empty commit\n- In order to ensure good formatting, ALWAYS pass the commit message via a HEREDOC, a la this example:\n<example>\ngit commit -m \"$(cat <<'EOF'\n   Commit message here.\n\n   🤖 Generated with [Claude Code](https://claude.ai/code)\n\n   Co-Authored-By: Claude <noreply@anthropic.com>\n   EOF\n   )\"\n</example>\n\n# Creating pull requests\nUse the gh command via the Bash tool for ALL GitHub-related tasks including working with issues, pull requests, checks, and releases. If given a Github URL use the gh command to get the information needed.\n\nIMPORTANT: When the user asks you to create a pull request, follow these steps carefully:\n\n1. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following bash commands in parallel using the Bash tool, in order to understand the current state of the branch since it diverged from the main branch:\n   - Run a git status command to see all untracked files\n   - Run a git diff command to see both staged and unstaged changes that will be committed\n   - Check if the current branch tracks a remote branch and is up to date with the remote, so you know if you need to push to the remote\n   - Run a git log command and `git diff [base-branch]...HEAD` to understand the full commit history for the current branch (from the time it diverged from the base branch)\n2. Analyze all changes that will be included in the pull request, making sure to look at all relevant commits (NOT just the latest commit, but ALL commits that will be included in the pull request!!!), and draft a pull request summary\n3. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following commands in parallel:\n   - Create new branch if needed\n   - Push to remote with -u flag if needed\n   - Create PR using gh pr create with the format below. Use a HEREDOC to pass the body to ensure correct formatting.\n<example>\ngh pr create --title \"the pr title\" --body \"$(cat <<'EOF'\n## Summary\n<1-3 bullet points>\n\n## Test plan\n[Checklist of TODOs for testing the pull request...]\n\n🤖 Generated with [Claude Code](https://claude.ai/code)\nEOF\n)\"\n</example>\n\nImportant:\n- NEVER update the git config\n- DO NOT use the TodoWrite or Task tools\n- Return the PR URL when you're done, so the user can see it\n\n# Other common operations\n- View comments on a Github PR: gh api repos/foo/bar/pulls/123/comments","input_schema":{"type":"object","properties":{"command":{"type":"string","description":"The command to execute"},"timeout":{"type":"number","description":"Optional timeout in milliseconds (max 600000)"},"description":{"type":"string","description":" Clear, concise description of what this command does in 5-10 words. Examples:\nInput: ls\nOutput: Lists files in current directory\n\nInput: git status\nOutput: Shows working tree status\n\nInput: npm install\nOutput: Installs package dependencies\n\nInput: mkdir foo\nOutput: Creates directory 'foo'"}},"required":["command"],"additionalProperties":false,"$schema":"http://json-schema.org/draft-07/schema#"}},{"name":"Glob","description":"- Fast file pattern matching tool that works with any codebase size\n- Supports glob patterns like \"**/*.js\" or \"src/**/*.ts\"\n- Returns matching file paths sorted by modification time\n- Use this tool when you need to find files by name patterns\n- When you are doing an open ended search that may require multiple rounds of globbing and grepping, use the Agent tool instead\n- You have the capability to call multiple tools in a single response. It is always better to speculatively perform multiple searches as a batch that are potentially useful.","input_schema":{"type":"object","properties":{"pattern":{"type":"string","description":"The glob pattern to match files against"},"path":{"type":"string","description":"The directory to search in. If not specified, the current working directory will be used. IMPORTANT: Omit this field to use the default directory. DO NOT enter \"undefined\" or \"null\" - simply omit it for the default behavior. Must be a valid directory path if provided."}},"required":["pattern"],"additionalProperties":false,"$schema":"http://json-schema.org/draft-07/schema#"}},{"name":"Grep","description":"\n- Fast content search tool that works with any codebase size\n- Searches file contents using regular expressions\n- Supports full regex syntax (eg. \"log.*Error\", \"function\\s+\\w+\", etc.)\n- Filter files by pattern with the include parameter (eg. \"*.js\", \"*.{ts,tsx}\")\n- Returns file paths with at least one match sorted by modification time\n- Use this tool when you need to find files containing specific patterns\n- If you need to identify/count the number of matches within files, use the Bash tool with `rg` (ripgrep) directly. Do NOT use `grep`.\n- When you are doing an open ended search that may require multiple rounds of globbing and grepping, use the Agent tool instead\n","input_schema":{"type":"object","properties":{"pattern":{"type":"string","description":"The regular expression pattern to search for in file contents"},"path":{"type":"string","description":"The directory to search in. Defaults to the current working directory."},"include":{"type":"string","description":"File pattern to include in the search (e.g. \"*.js\", \"*.{ts,tsx}\")"}},"required":["pattern"],"additionalProperties":false,"$schema":"http://json-schema.org/draft-07/schema#"}},{"name":"LS","description":"Lists files and directories in a given path. The path parameter must be an absolute path, not a relative path. You can optionally provide an array of glob patterns to ignore with the ignore parameter. You should generally prefer the Glob and Grep tools, if you know which directories to search.","input_schema":{"type":"object","properties":{"path":{"type":"string","description":"The absolute path to the directory to list (must be absolute, not relative)"},"ignore":{"type":"array","items":{"type":"string"},"description":"List of glob patterns to ignore"}},"required":["path"],"additionalProperties":false,"$schema":"http://json-schema.org/draft-07/schema#"}},{"name":"exit_plan_mode","description":"Use this tool when you are in plan mode and have finished presenting your plan and are ready to code. This will prompt the user to exit plan mode.","input_schema":{"type":"object","properties":{"plan":{"type":"string","description":"The plan you came up with, that you want to run by the user for approval. Supports markdown. The plan should be pretty concise."}},"required":["plan"],"additionalProperties":false,"$schema":"http://json-schema.org/draft-07/schema#"}},{"name":"Read","description":"Reads a file from the local filesystem. You can access any file directly by using this tool.\nAssume this tool is able to read all files on the machine. If the User provides a path to a file assume that path is valid. It is okay to read a file that does not exist; an error will be returned.\n\nUsage:\n- The file_path parameter must be an absolute path, not a relative path\n- By default, it reads up to 2000 lines starting from the beginning of the file\n- You can optionally specify a line offset and limit (especially handy for long files), but it's recommended to read the whole file by not providing these parameters\n- Any lines longer than 2000 characters will be truncated\n- Results are returned using cat -n format, with line numbers starting at 1\n- This tool allows Claude Code to read images (eg PNG, JPG, etc). When reading an image file the contents are presented visually as Claude Code is a multimodal LLM.\n- For Jupyter notebooks (.ipynb files), use the NotebookRead instead\n- You have the capability to call multiple tools in a single response. It is always better to speculatively read multiple files as a batch that are potentially useful. \n- You will regularly be asked to read screenshots. If the user provides a path to a screenshot ALWAYS use this tool to view the file at the path. This tool will work with all temporary file paths like /var/folders/123/abc/T/TemporaryItems/NSIRD_screencaptureui_ZfB1tD/Screenshot.png\n- If you read a file that exists but has empty contents you will receive a system reminder warning in place of file contents.","input_schema":{"type":"object","properties":{"file_path":{"type":"string","description":"The absolute path to the file to read"},"offset":{"type":"number","description":"The line number to start reading from. Only provide if the file is too large to read at once"},"limit":{"type":"number","description":"The number of lines to read. Only provide if the file is too large to read at once."}},"required":["file_path"],"additionalProperties":false,"$schema":"http://json-schema.org/draft-07/schema#"}},{"name":"Edit","description":"Performs exact string replacements in files. \n\nUsage:\n- You must use your `Read` tool at least once in the conversation before editing. This tool will error if you attempt an edit without reading the file. \n- When editing text from Read tool output, ensure you preserve the exact indentation (tabs/spaces) as it appears AFTER the line number prefix. The line number prefix format is: spaces + line number + tab. Everything after that tab is the actual file content to match. Never include any part of the line number prefix in the old_string or new_string.\n- ALWAYS prefer editing existing files in the codebase. NEVER write new files unless explicitly required.\n- Only use emojis if the user explicitly requests it. Avoid adding emojis to files unless asked.\n- The edit will FAIL if `old_string` is not unique in the file. Either provide a larger string with more surrounding context to make it unique or use `replace_all` to change every instance of `old_string`. \n- Use `replace_all` for replacing and renaming strings across the file. This parameter is useful if you want to rename a variable for instance.","input_schema":{"type":"object","properties":{"file_path":{"type":"string","description":"The absolute path to the file to modify"},"old_string":{"type":"string","description":"The text to replace"},"new_string":{"type":"string","description":"The text to replace it with (must be different from old_string)"},"replace_all":{"type":"boolean","default":false,"description":"Replace all occurences of old_string (default false)"}},"required":["file_path","old_string","new_string"],"additionalProperties":false,"$schema":"http://json-schema.org/draft-07/schema#"}},{"name":"MultiEdit","description":"This is a tool for making multiple edits to a single file in one operation. It is built on top of the Edit tool and allows you to perform multiple find-and-replace operations efficiently. Prefer this tool over the Edit tool when you need to make multiple edits to the same file.\n\nBefore using this tool:\n\n1. Use the Read tool to understand the file's contents and context\n2. Verify the directory path is correct\n\nTo make multiple file edits, provide the following:\n1. file_path: The absolute path to the file to modify (must be absolute, not relative)\n2. edits: An array of edit operations to perform, where each edit contains:\n   - old_string: The text to replace (must match the file contents exactly, including all whitespace and indentation)\n   - new_string: The edited text to replace the old_string\n   - replace_all: Replace all occurences of old_string. This parameter is optional and defaults to false.\n\nIMPORTANT:\n- All edits are applied in sequence, in the order they are provided\n- Each edit operates on the result of the previous edit\n- All edits must be valid for the operation to succeed - if any edit fails, none will be applied\n- This tool is ideal when you need to make several changes to different parts of the same file\n- For Jupyter notebooks (.ipynb files), use the NotebookEdit instead\n\nCRITICAL REQUIREMENTS:\n1. All edits follow the same requirements as the single Edit tool\n2. The edits are atomic - either all succeed or none are applied\n3. Plan your edits carefully to avoid conflicts between sequential operations\n\nWARNING:\n- The tool will fail if edits.old_string doesn't match the file contents exactly (including whitespace)\n- The tool will fail if edits.old_string and edits.new_string are the same\n- Since edits are applied in sequence, ensure that earlier edits don't affect the text that later edits are trying to find\n\nWhen making edits:\n- Ensure all edits result in idiomatic, correct code\n- Do not leave the code in a broken state\n- Always use absolute file paths (starting with /)\n- Only use emojis if the user explicitly requests it. Avoid adding emojis to files unless asked.\n- Use replace_all for replacing and renaming strings across the file. This parameter is useful if you want to rename a variable for instance.\n\nIf you want to create a new file, use:\n- A new file path, including dir name if needed\n- First edit: empty old_string and the new file's contents as new_string\n- Subsequent edits: normal edit operations on the created content","input_schema":{"type":"object","properties":{"file_path":{"type":"string","description":"The absolute path to the file to modify"},"edits":{"type":"array","items":{"type":"object","properties":{"old_string":{"type":"string","description":"The text to replace"},"new_string":{"type":"string","description":"The text to replace it with"},"replace_all":{"type":"boolean","default":false,"description":"Replace all occurences of old_string (default false)."}},"required":["old_string","new_string"],"additionalProperties":false},"minItems":1,"description":"Array of edit operations to perform sequentially on the file"}},"required":["file_path","edits"],"additionalProperties":false,"$schema":"http://json-schema.org/draft-07/schema#"}},{"name":"Write","description":"Writes a file to the local filesystem.\n\nUsage:\n- This tool will overwrite the existing file if there is one at the provided path.\n- If this is an existing file, you MUST use the Read tool first to read the file's contents. This tool will fail if you did not read the file first.\n- ALWAYS prefer editing existing files in the codebase. NEVER write new files unless explicitly required.\n- NEVER proactively create documentation files (*.md) or README files. Only create documentation files if explicitly requested by the User.\n- Only use emojis if the user explicitly requests it. Avoid writing emojis to files unless asked.","input_schema":{"type":"object","properties":{"file_path":{"type":"string","description":"The absolute path to the file to write (must be absolute, not relative)"},"content":{"type":"string","description":"The content to write to the file"}},"required":["file_path","content"],"additionalProperties":false,"$schema":"http://json-schema.org/draft-07/schema#"}},{"name":"NotebookRead","description":"Reads a Jupyter notebook (.ipynb file) and returns all of the cells with their outputs. Jupyter notebooks are interactive documents that combine code, text, and visualizations, commonly used for data analysis and scientific computing. The notebook_path parameter must be an absolute path, not a relative path.","input_schema":{"type":"object","properties":{"notebook_path":{"type":"string","description":"The absolute path to the Jupyter notebook file to read (must be absolute, not relative)"},"cell_id":{"type":"string","description":"The ID of a specific cell to read. If not provided, all cells will be read."}},"required":["notebook_path"],"additionalProperties":false,"$schema":"http://json-schema.org/draft-07/schema#"}},{"name":"NotebookEdit","description":"Completely replaces the contents of a specific cell in a Jupyter notebook (.ipynb file) with new source. Jupyter notebooks are interactive documents that combine code, text, and visualizations, commonly used for data analysis and scientific computing. The notebook_path parameter must be an absolute path, not a relative path. The cell_number is 0-indexed. Use edit_mode=insert to add a new cell at the index specified by cell_number. Use edit_mode=delete to delete the cell at the index specified by cell_number.","input_schema":{"type":"object","properties":{"notebook_path":{"type":"string","description":"The absolute path to the Jupyter notebook file to edit (must be absolute, not relative)"},"cell_id":{"type":"string","description":"The ID of the cell to edit. When inserting a new cell, the new cell will be inserted after the cell with this ID, or at the beginning if not specified."},"new_source":{"type":"string","description":"The new source for the cell"},"cell_type":{"type":"string","enum":["code","markdown"],"description":"The type of the cell (code or markdown). If not specified, it defaults to the current cell type. If using edit_mode=insert, this is required."},"edit_mode":{"type":"string","enum":["replace","insert","delete"],"description":"The type of edit to make (replace, insert, delete). Defaults to replace."}},"required":["notebook_path","new_source"],"additionalProperties":false,"$schema":"http://json-schema.org/draft-07/schema#"}},{"name":"WebFetch","description":"\n- Fetches content from a specified URL and processes it using an AI model\n- Takes a URL and a prompt as input\n- Fetches the URL content, converts HTML to markdown\n- Processes the content with the prompt using a small, fast model\n- Returns the model's response about the content\n- Use this tool when you need to retrieve and analyze web content\n\nUsage notes:\n  - IMPORTANT: If an MCP-provided web fetch tool is available, prefer using that tool instead of this one, as it may have fewer restrictions. All MCP-provided tools start with \"mcp__\".\n  - The URL must be a fully-formed valid URL\n  - HTTP URLs will be automatically upgraded to HTTPS\n  - The prompt should describe what information you want to extract from the page\n  - This tool is read-only and does not modify any files\n  - Results may be summarized if the content is very large\n  - Includes a self-cleaning 15-minute cache for faster responses when repeatedly accessing the same URL\n","input_schema":{"type":"object","properties":{"url":{"type":"string","format":"uri","description":"The URL to fetch content from"},"prompt":{"type":"string","description":"The prompt to run on the fetched content"}},"required":["url","prompt"],"additionalProperties":false,"$schema":"http://json-schema.org/draft-07/schema#"}},{"name":"TodoRead","description":"Use this tool to read the current to-do list for the session. This tool should be used proactively and frequently to ensure that you are aware of\nthe status of the current task list. You should make use of this tool as often as possible, especially in the following situations:\n- At the beginning of conversations to see what's pending\n- Before starting new tasks to prioritize work\n- When the user asks about previous tasks or plans\n- Whenever you're uncertain about what to do next\n- After completing tasks to update your understanding of remaining work\n- After every few messages to ensure you're on track\n\nUsage:\n- This tool takes in no parameters. So leave the input blank or empty. DO NOT include a dummy object, placeholder string or a key like \"input\" or \"empty\". LEAVE IT BLANK.\n- Returns a list of todo items with their status, priority, and content\n- Use this information to track progress and plan next steps\n- If no todos exist yet, an empty list will be returned","input_schema":{"type":"object","properties":{},"additionalProperties":false,"description":"No input is required, leave this field blank. NOTE that we do not require a dummy object, placeholder string or a key like \"input\" or \"empty\". LEAVE IT BLANK.","$schema":"http://json-schema.org/draft-07/schema#"}},{"name":"TodoWrite","description":"Use this tool to create and manage a structured task list for your current coding session. This helps you track progress, organize complex tasks, and demonstrate thoroughness to the user.\nIt also helps the user understand the progress of the task and overall progress of their requests.\n\n## When to Use This Tool\nUse this tool proactively in these scenarios:\n\n1. Complex multi-step tasks - When a task requires 3 or more distinct steps or actions\n2. Non-trivial and complex tasks - Tasks that require careful planning or multiple operations\n3. User explicitly requests todo list - When the user directly asks you to use the todo list\n4. User provides multiple tasks - When users provide a list of things to be done (numbered or comma-separated)\n5. After receiving new instructions - Immediately capture user requirements as todos\n6. When you start working on a task - Mark it as in_progress BEFORE beginning work. Ideally you should only have one todo as in_progress at a time\n7. After completing a task - Mark it as completed and add any new follow-up tasks discovered during implementation\n\n## When NOT to Use This Tool\n\nSkip using this tool when:\n1. There is only a single, straightforward task\n2. The task is trivial and tracking it provides no organizational benefit\n3. The task can be completed in less than 3 trivial steps\n4. The task is purely conversational or informational\n\nNOTE that you should not use this tool if there is only one trivial task to do. In this case you are better off just doing the task directly.\n\n## Examples of When to Use the Todo List\n\n<example>\nUser: I want to add a dark mode toggle to the application settings. Make sure you run the tests and build when you're done!\nAssistant: I'll help add a dark mode toggle to your application settings. Let me create a todo list to track this implementation.\n*Creates todo list with the following items:*\n1. Create dark mode toggle component in Settings page\n2. Add dark mode state management (context/store)\n3. Implement CSS-in-JS styles for dark theme\n4. Update existing components to support theme switching\n5. Run tests and build process, addressing any failures or errors that occur\n*Begins working on the first task*\n\n<reasoning>\nThe assistant used the todo list because:\n1. Adding dark mode is a multi-step feature requiring UI, state management, and styling changes\n2. The user explicitly requested tests and build be run afterward\n3. The assistant inferred that tests and build need to pass by adding \"Ensure tests and build succeed\" as the final task\n</reasoning>\n</example>\n\n<example>\nUser: Help me rename the function getCwd to getCurrentWorkingDirectory across my project\nAssistant: Let me first search through your codebase to find all occurrences of 'getCwd'.\n*Uses grep or search tools to locate all instances of getCwd in the codebase*\nAssistant: I've found 15 instances of 'getCwd' across 8 different files. Let me create a todo list to track these changes.\n*Creates todo list with specific items for each file that needs updating*\n\n<reasoning>\nThe assistant used the todo list because:\n1. First, the assistant searched to understand the scope of the task\n2. Upon finding multiple occurrences across different files, it determined this was a complex task with multiple steps\n3. The todo list helps ensure every instance is tracked and updated systematically\n4. This approach prevents missing any occurrences and maintains code consistency\n</reasoning>\n</example>\n\n\n<example>\nUser: I need to implement these features for my e-commerce site: user registration, product catalog, shopping cart, and checkout flow.\nAssistant: I'll help implement these features. First, let's add all the features to the todo list.\n*Creates a todo list breaking down each feature into specific tasks based on the project architecture*\nAssistant: Let's start with user registration. This will involve creating database models, API endpoints, and frontend forms that integrate with your existing authentication system.\n\n<reasoning>\nThe assistant used the todo list because:\n1. The user provided multiple complex features to implement in a comma separated list\n2. The todo list helps organize these large features into manageable tasks\n3. This approach allows for tracking progress across the entire implementation\n</reasoning>\n</example>\n\n<example>\nUser: Can you help optimize my React application? It's rendering slowly and has performance issues.</user>\nAssistant: I'll help optimize your React application. First, let me examine your codebase to identify potential performance bottlenecks.\n*Reviews component structure, render patterns, state management, and data fetching*\nAssistant: After analyzing your codebase, I've identified several performance issues. Let me create a todo list to track our optimization efforts.\n*Creates todo list with items like: 1) Implement memoization for expensive calculations in ProductList, 2) Add virtualization for long lists in Dashboard, 3) Optimize image loading in Gallery component, 4) Fix state update loops in ShoppingCart, 5) Review bundle size and implement code splitting*\nLet's start by implementing memoization for the expensive calculations in your ProductList component.</assistant>\n\n<reasoning>\nThe assistant used the todo list because:\n1. First, the assistant examined the codebase to identify specific performance issues\n2. Based on this analysis, it identified multiple optimization opportunities\n3. Performance optimization is a non-trivial task requiring multiple steps\n4. The todo list helps methodically track improvements across different components\n5. This systematic approach ensures all performance bottlenecks are addressed\n</reasoning>\n</example>\n\n## Examples of When NOT to Use the Todo List\n\n<example>\nUser: How do I print 'Hello World' in Python?\nAssistant: In Python, you can print \"Hello World\" with this simple code:\n\npython\nprint(\"Hello World\")\n\nThis will output the text \"Hello World\" to the console when executed.</assistant>\n\n<reasoning>\nThe assistant did not use the todo list because this is a single, trivial task that can be completed in one step. There's no need to track multiple tasks or steps for such a straightforward request.\n</reasoning>\n</example>\n\n<example>\nUser: What does the git status command do?\nAssistant: The git status command shows the current state of your working directory and staging area. It displays which changes have been staged, which haven't, and which files aren't being tracked by Git. This is a fundamental command for understanding the current state of your repository before making commits.\n\n<reasoning>\nThe assistant did not use the todo list because this is an informational request with no actual coding task to complete. The user is simply asking for an explanation, not for the assistant to perform multiple steps or tasks.\n</reasoning>\n</example>\n\n<example>\nUser: Can you add a comment to the calculateTotal function to explain what it does?\nAssistant: Sure, let me add a comment to the calculateTotal function to explain what it does.\n* Uses the Edit tool to add a comment to the calculateTotal function *\n\n<reasoning>\nThe assistant did not use the todo list because this is a single, straightforward task confined to one location in the code. Adding a comment doesn't require tracking multiple steps or systematic organization.\n</reasoning>\n</example>\n\n<example>\nUser: Run npm install for me and tell me what happens.\nAssistant: I'll run the npm install command for you.\n\n*Executes: npm install*\n\nThe command completed successfully. Here's the output:\n[Output of npm install command]\n\nAll dependencies have been installed according to your package.json file.\n\n<reasoning>\nThe assistant did not use the todo list because this is a single command execution with immediate results. There are no multiple steps to track or organize, making the todo list unnecessary for this straightforward task.\n</reasoning>\n</example>\n\n## Task States and Management\n\n1. **Task States**: Use these states to track progress:\n   - pending: Task not yet started\n   - in_progress: Currently working on (limit to ONE task at a time)\n   - completed: Task finished successfully\n\n2. **Task Management**:\n   - Update task status in real-time as you work\n   - Mark tasks complete IMMEDIATELY after finishing (don't batch completions)\n   - Only have ONE task in_progress at any time\n   - Complete current tasks before starting new ones\n   - Remove tasks that are no longer relevant from the list entirely\n\n3. **Task Completion Requirements**:\n   - ONLY mark a task as completed when you have FULLY accomplished it\n   - If you encounter errors, blockers, or cannot finish, keep the task as in_progress\n   - When blocked, create a new task describing what needs to be resolved\n   - Never mark a task as completed if:\n     - Tests are failing\n     - Implementation is partial\n     - You encountered unresolved errors\n     - You couldn't find necessary files or dependencies\n\n4. **Task Breakdown**:\n   - Create specific, actionable items\n   - Break complex tasks into smaller, manageable steps\n   - Use clear, descriptive task names\n\nWhen in doubt, use this tool. Being proactive with task management demonstrates attentiveness and ensures you complete all requirements successfully.\n","input_schema":{"type":"object","properties":{"todos":{"type":"array","items":{"type":"object","properties":{"content":{"type":"string","minLength":1},"status":{"type":"string","enum":["pending","in_progress","completed"]},"priority":{"type":"string","enum":["high","medium","low"]},"id":{"type":"string"}},"required":["content","status","priority","id"],"additionalProperties":false},"description":"The updated todo list"}},"required":["todos"],"additionalProperties":false,"$schema":"http://json-schema.org/draft-07/schema#"}},{"name":"WebSearch","description":"\n- Allows Claude to search the web and use the results to inform responses\n- Provides up-to-date information for current events and recent data\n- Returns search result information formatted as search result blocks\n- Use this tool for accessing information beyond Claude's knowledge cutoff\n- Searches are performed automatically within a single API call\n\nUsage notes:\n  - Domain filtering is supported to include or block specific websites\n  - Web search is only available in the US\n","input_schema":{"type":"object","properties":{"query":{"type":"string","minLength":2,"description":"The search query to use"},"allowed_domains":{"type":"array","items":{"type":"string"},"description":"Only include search results from these domains"},"blocked_domains":{"type":"array","items":{"type":"string"},"description":"Never include search results from these domains"}},"required":["query"],"additionalProperties":false,"$schema":"http://json-schema.org/draft-07/schema#"}}],"metadata":{"user_id":"6fdb956499039f35b30a669aaefbde191cd60254fd0ac9a5789f81bb0bc34d4a"},"max_tokens":32000,"thinking":{"budget_tokens":31999,"type":"enabled"},"stream":true}},"response":{"timestamp":1750834608.733,"status_code":200,"headers":{"anthropic-organization-id":"801cf168-994a-4b1f-aec0-3e40c50852eb","anthropic-ratelimit-unified-fallback-percentage":"0.5","anthropic-ratelimit-unified-reset":"1750834800","anthropic-ratelimit-unified-status":"allowed","cache-control":"no-cache","cf-cache-status":"DYNAMIC","cf-ray":"955291245d483233-LAX","connection":"keep-alive","content-type":"text/event-stream; charset=utf-8","date":"Wed, 25 Jun 2025 06:56:48 GMT","request-id":"req_011CQUW9YEEU6cf9PonBUDPy","server":"cloudflare","strict-transport-security":"max-age=31536000; includeSubDomains; preload","transfer-encoding":"chunked","via":"1.1 google","x-robots-tag":"none"},"body_raw":"event: message_start\ndata: {\"type\":\"message_start\",\"message\":{\"id\":\"msg_01NzXprtCDmenYcpHzh1Lwop\",\"type\":\"message\",\"role\":\"assistant\",\"model\":\"claude-sonnet-4-20250514\",\"content\":[],\"stop_reason\":null,\"stop_sequence\":null,\"usage\":{\"input_tokens\":13,\"cache_creation_input_tokens\":293,\"cache_read_input_tokens\":14152,\"output_tokens\":2,\"service_tier\":\"standard\"}}            }\n\nevent: content_block_start\ndata: {\"type\":\"content_block_start\",\"index\":0,\"content_block\":{\"type\":\"thinking\",\"thinking\":\"\",\"signature\":\"\"}              }\n\nevent: ping\ndata: {\"type\": \"ping\"}\n\nevent: content_block_delta\ndata: {\"type\":\"content_block_delta\",\"index\":0,\"delta\":{\"type\":\"thinking_delta\",\"thinking\":\"Foun\"}      }\n\nevent: content_block_delta\ndata: {\"type\":\"content_block_delta\",\"index\":0,\"delta\":{\"type\":\"thinking_delta\",\"thinking\":\"d mentions of \\\"ultrathink\\\" in \"}         }\n\nevent: content_block_delta\ndata: {\"type\":\"content_block_delta\",\"index\":0,\"delta\":{\"type\":\"thinking_delta\",\"thinking\":\"3 files. Let me read these\"}      }\n\nevent: content_block_delta\ndata: {\"type\":\"content_block_delta\",\"index\":0,\"delta\":{\"type\":\"thinking_delta\",\"thinking\":\" files to understand what ultrathink is in\"}  }\n\nevent: content_block_delta\ndata: {\"type\":\"content_block_delta\",\"index\":0,\"delta\":{\"type\":\"thinking_delta\",\"thinking\":\" the context of Claude Code.\"}}\n\nevent: content_block_delta\ndata: {\"type\":\"content_block_delta\",\"index\":0,\"delta\":{\"type\":\"signature_delta\",\"signature\":\"EqwCCkYIBBgCKkCpztqTYU1CY8tcbJEKwF+I924S/GwKJw0vo9L+aIW2kHiwIdNkYTeLAsYnD3V2wW+aTl4g38RZL7GR2XX+AZ93Egw9cQZRG6xa8c+MgikaDO+r9/xb4zmJVQyd0yIwZhCRaIQ8RqkXZnady6w5RMPaTSNQbbzDFo4skqtnqnbv8orZQDJiHLtlMoatgODUKpMByGu8au15hK1S7+LJ0Un/CVEUlx5e1r8z8tCPAld1W9J8Ek0z8nnaKLIlwNYR86Z/hHn4pbgE6/qdUdnHjjjH2QL6mhkuO5uiHpVvrOgwszDoki4RCf5G+OqIT1FLsN23sCzMvjhPBYcTZJful8TWyzFc19pJMraMFMHIaJSDv377h0kdE4OfBDpoEqQVN0TSPimRGAE=\"}      }\n\nevent: content_block_stop\ndata: {\"type\":\"content_block_stop\",\"index\":0            }\n\nevent: content_block_start\ndata: {\"type\":\"content_block_start\",\"index\":1,\"content_block\":{\"type\":\"tool_use\",\"id\":\"toolu_016Kri1jsz4gzpXui1u1JkmC\",\"name\":\"Read\",\"input\":{}}        }\n\nevent: content_block_delta\ndata: {\"type\":\"content_block_delta\",\"index\":1,\"delta\":{\"type\":\"input_json_delta\",\"partial_json\":\"\"}               }\n\nevent: content_block_delta\ndata: {\"type\":\"content_block_delta\",\"index\":1,\"delta\":{\"type\":\"input_json_delta\",\"partial_json\":\"{\\\"file_path\\\": \\\"/Users/eric/wrk/src/github.com/claude-code/claude-code-docs/release-notes/\"}           }\n\nevent: content_block_delta\ndata: {\"type\":\"content_block_delta\",\"index\":1,\"delta\":{\"type\":\"input_json_delta\",\"partial_json\":\"CHANGELOG.md\"}     }\n\nevent: content_block_delta\ndata: {\"type\":\"content_block_delta\",\"index\":1,\"delta\":{\"type\":\"input_json_delta\",\"partial_json\":\"\\\"}\"}          }\n\nevent: content_block_stop\ndata: {\"type\":\"content_block_stop\",\"index\":1 }\n\nevent: content_block_start\ndata: {\"type\":\"content_block_start\",\"index\":2,\"content_block\":{\"type\":\"tool_use\",\"id\":\"toolu_011TGFHaVPtBwUdTL9Hij79h\",\"name\":\"Read\",\"input\":{}}    }\n\nevent: content_block_delta\ndata: {\"type\":\"content_block_delta\",\"index\":2,\"delta\":{\"type\":\"input_json_delta\",\"partial_json\":\"\"}             }\n\nevent: content_block_delta\ndata: {\"type\":\"content_block_delta\",\"index\":2,\"delta\":{\"type\":\"input_json_delta\",\"partial_json\":\"{\\\"file_path\\\": \\\"/Users/eric/wrk/src/github.com/claude-code/claude-code-docs/README.md\"}         }\n\nevent: content_block_delta\ndata: {\"type\":\"content_block_delta\",\"index\":2,\"delta\":{\"type\":\"input_json_delta\",\"partial_json\":\"\\\"}\"}}\n\nevent: content_block_stop\ndata: {\"type\":\"content_block_stop\",\"index\":2              }\n\nevent: content_block_start\ndata: {\"type\":\"content_block_start\",\"index\":3,\"content_block\":{\"type\":\"tool_use\",\"id\":\"toolu_01LLvLh6MMgkNEyAjHA3XtmA\",\"name\":\"Read\",\"input\":{}}  }\n\nevent: content_block_delta\ndata: {\"type\":\"content_block_delta\",\"index\":3,\"delta\":{\"type\":\"input_json_delta\",\"partial_json\":\"\"}            }\n\nevent: content_block_delta\ndata: {\"type\":\"content_block_delta\",\"index\":3,\"delta\":{\"type\":\"input_json_delta\",\"partial_json\":\"{\\\"file_path\\\": \\\"/Users/eric/wrk/src/github.com/claude-code/claude-code-docs/anthropic-blog/engineering/claude-code-best-practices.md\"}         }\n\nevent: content_block_delta\ndata: {\"type\":\"content_block_delta\",\"index\":3,\"delta\":{\"type\":\"input_json_delta\",\"partial_json\":\"\\\"}\"}   }\n\nevent: content_block_stop\ndata: {\"type\":\"content_block_stop\",\"index\":3 }\n\nevent: message_delta\ndata: {\"type\":\"message_delta\",\"delta\":{\"stop_reason\":\"tool_use\",\"stop_sequence\":null},\"usage\":{\"output_tokens\":263}   }\n\nevent: message_stop\ndata: {\"type\":\"message_stop\"   }\n\n"},"logged_at":"2025-06-25T06:56:52.823Z"}
{"request":{"timestamp":1750834612.956,"method":"POST","url":"https://api.anthropic.com/v1/messages/count_tokens?beta=true","headers":{"accept":"application/json","anthropic-beta":"claude-code-20250219,oauth-2025-04-20,interleaved-thinking-2025-05-14,fine-grained-tool-streaming-2025-05-14,token-counting-2024-11-01","anthropic-dangerous-direct-browser-access":"true","anthropic-version":"2023-06-01","authorization":"Bearer sk-...6QAA","content-type":"application/json","user-agent":"claude-cli/1.0.31 (external, cli)","x-app":"cli","x-stainless-arch":"arm64","x-stainless-lang":"js","x-stainless-os":"Linux","x-stainless-package-version":"0.51.0","x-stainless-retry-count":"0","x-stainless-runtime":"node","x-stainless-runtime-version":"v22.16.0"},"body":{"model":"claude-sonnet-4-20250514","messages":[{"role":"user","content":"Title: Claude Code Best Practices\n\nURL Source: https://www.anthropic.com/engineering/claude-code-best-practices\n\nMarkdown Content:\n[Engineering at Anthropic](https://www.anthropic.com/engineering)\n\nWe recently [released Claude Code](https://www.anthropic.com/news/claude-3-7-sonnet), a command line tool for agentic coding. Developed as a research project, Claude Code gives Anthropic engineers and researchers a more native way to integrate Claude into their coding workflows.\n\nClaude Code is intentionally low-level and unopinionated, providing close to raw model access without forcing specific workflows. This design philosophy creates a flexible, customizable, scriptable, and safe power tool. While powerful, this flexibility presents a learning curve for engineers new to agentic coding tools—at least until they develop their own best practices.\n\nThis post outlines general patterns that have proven effective, both for Anthropic's internal teams and for external engineers using Claude Code across various codebases, languages, and environments. Nothing in this list is set in stone nor universally applicable; consider these suggestions as starting points. We encourage you to experiment and find what works best for you!\n\n_Looking for more detailed information? Our comprehensive documentation at [claude.ai/code](https://claude.ai/redirect/website.v1.5f05a214-5231-4c56-aed0-89edf27ef46b/code)_ _covers all the features mentioned in this post and provides additional examples, implementation details, and advanced techniques._\n\n1. Customize your setup\n-----------------------\n\nClaude Code is an agentic coding assistant that automatically pulls context into prompts. This context gathering consumes time and tokens, but you can optimize it through environment tuning.\n\n### a. Create `CLAUDE.md` files\n\n`CLAUDE.md` is a special file that Claude automatically pulls into context when starting a conversation. This makes it an ideal place for documenting:\n\n*   Common bash commands\n*   Core files and utility functions\n*   Code style guidelines\n*   Testing instructions\n*   Repository etiquette (e.g., branch naming, merge vs. rebase, etc.)\n*   Developer environment setup (e.g., pyenv use, which compilers work)\n*   Any unexpected behaviors or warnings particular to the project\n*   Other information you want Claude to remember\n\nThere’s no required format for `CLAUDE.md` files. We recommend keeping them concise and human-readable. For example:\n\n```\n# Bash commands\n- npm run build: Build the project\n- npm run typecheck: Run the typechecker\n\n# Code style\n- Use ES modules (import/export) syntax, not CommonJS (require)\n- Destructure imports when possible (eg. import { foo } from 'bar')\n\n# Workflow\n- Be sure to typecheck when you’re done making a series of code changes\n- Prefer running single tests, and not the whole test suite, for performance\n```\n\nYou can place `CLAUDE.md` files in several locations:\n\n*   **The root of your repo**, or wherever you run `claude` from (the most common usage). Name it `CLAUDE.md` and check it into git so that you can share it across sessions and with your team (recommended), or name it `CLAUDE.local.md` and `.gitignore` it\n*   **Any parent of the directory** where you run `claude`. This is most useful for monorepos, where you might run `claude` from `root/foo`, and have `CLAUDE.md` files in both `root/CLAUDE.md` and `root/foo/CLAUDE.md`. Both of these will be pulled into context automatically\n*   **Any child of the directory** where you run `claude`. This is the inverse of the above, and in this case, Claude will pull in `CLAUDE.md` files on demand when you work with files in child directories\n*   **Your home folder** (`~/.claude/CLAUDE.md`), which applies it to all your _claude_ sessions\n\nWhen you run the `/init` command, Claude will automatically generate a `CLAUDE.md` for you.\n\n### b. Tune your `CLAUDE.md` files\n\nYour `CLAUDE.md` files become part of Claude’s prompts, so they should be refined like any frequently used prompt. A common mistake is adding extensive content without iterating on its effectiveness. Take time to experiment and determine what produces the best instruction following from the model.\n\nYou can add content to your `CLAUDE.md` manually or press the `#` key to give Claude an instruction that it will automatically incorporate into the relevant `CLAUDE.md`. Many engineers use `#` frequently to document commands, files, and style guidelines while coding, then include `CLAUDE.md` changes in commits so team members benefit as well.\n\nAt Anthropic, we occasionally run `CLAUDE.md` files through the [prompt improver](https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/prompt-improver) and often tune instructions (e.g. adding emphasis with \"IMPORTANT\" or \"YOU MUST\") to improve adherence.\n\n![Image 1: Claude Code tool allowlist](https://www.anthropic.com/_next/image?url=https%3A%2F%2Fwww-cdn.anthropic.com%2Fimages%2F4zrzovbb%2Fwebsite%2F6961243cc6409e41ba93895faded4f4bc1772366-1600x1231.png&w=3840&q=75)\n\n### c. Curate Claude's list of allowed tools\n\nBy default, Claude Code requests permission for any action that might modify your system: file writes, many bash commands, MCP tools, etc. We designed Claude Code with this deliberately conservative approach to prioritize safety. You can customize the allowlist to permit additional tools that you know are safe, or to allow potentially unsafe tools that are easy to undo (e.g., file editing, `git commit`).\n\nThere are four ways to manage allowed tools:\n\n*   **Select \"Always allow\"** when prompted during a session.\n*   **Use the`/permissions`command** after starting Claude Code to add or remove tools from the allowlist. For example, you can add `Edit` to always allow file edits, `Bash(git commit:*)` to allow git commits, or `mcp__puppeteer__puppeteer_navigate` to allow navigating with the Puppeteer MCP server.\n*   **Manually edit** your `.claude/settings.json` or `~/.claude.json` (we recommend checking the former into source control to share with your team)_._\n*   **Use the`--allowedTools` CLI flag** for session-specific permissions.\n\n### d. If using GitHub, install the gh CLI\n\nClaude knows how to use the `gh` CLI to interact with GitHub for creating issues, opening pull requests, reading comments, and more. Without `gh` installed, Claude can still use the GitHub API or MCP server (if you have it installed).\n\n2. Give Claude more tools\n-------------------------\n\nClaude has access to your shell environment, where you can build up sets of convenience scripts and functions for it just like you would for yourself. It can also leverage more complex tools through MCP and REST APIs.\n\n### a. Use Claude with bash tools\n\nClaude Code inherits your bash environment, giving it access to all your tools. While Claude knows common utilities like unix tools and `gh`, it won't know about your custom bash tools without instructions:\n\n1.   Tell Claude the tool name with usage examples\n2.   Tell Claude to run`--help`to see tool documentation\n3.   Document frequently used tools in `CLAUDE.md`\n\n### b. Use Claude with MCP\n\nClaude Code functions as both an MCP server and client. As a client, it can connect to any number of MCP servers to access their tools in three ways:\n\n*   **In project config** (available when running Claude Code in that directory)\n*   **In global config**(available in all projects)\n*   **In a checked-in `.mcp.json` file** (available to anyone working in your codebase). For example, you can add Puppeteer and Sentry servers to your `.mcp.json`, so that every engineer working on your repo can use these out of the box.\n\nWhen working with MCP, it can also be helpful to launch Claude with the `--mcp-debug` flag to help identify configuration issues.\n\n### c. Use custom slash commands\n\nFor repeated workflows—debugging loops, log analysis, etc.—store prompt templates in Markdown files within the `.claude/commands` folder. These become available through the slash commands menu when you type `/`. You can check these commands into git to make them available for the rest of your team.\n\nCustom slash commands can include the special keyword `$ARGUMENTS` to pass parameters from command invocation.\n\nFor example, here’s a slash command that you could use to automatically pull and fix a Github issue:\n\n```\nPlease analyze and fix the GitHub issue: $ARGUMENTS.\n\nFollow these steps:\n\n1. Use `gh issue view` to get the issue details\n2. Understand the problem described in the issue\n3. Search the codebase for relevant files\n4. Implement the necessary changes to fix the issue\n5. Write and run tests to verify the fix\n6. Ensure code passes linting and type checking\n7. Create a descriptive commit message\n8. Push and create a PR\n\nRemember to use the GitHub CLI (`gh`) for all GitHub-related tasks.\n```\n\nPutting the above content into `.claude/commands/fix-github-issue.md` makes it available as the `/project:fix-github-issue` command in Claude Code. You could then for example use `/project:fix-github-issue 1234` to have Claude fix issue #1234. Similarly, you can add your own personal commands to the`~/.claude/commands` folder for commands you want available in all of your sessions.\n\n3. Try common workflows\n-----------------------\n\nClaude Code doesn’t impose a specific workflow, giving you the flexibility to use it how you want. Within the space this flexibility affords, several successful patterns for effectively using Claude Code have emerged across our community of users:\n\n### a. Explore, plan, code, commit\n\nThis versatile workflow suits many problems:\n\n1.   **Ask Claude to read relevant files, images, or URLs**, providing either general pointers (\"read the file that handles logging\") or specific filenames (\"read logging.py\"), but explicitly tell it not to write any code just yet.\n    1.   This is the part of the workflow where you should consider strong use of subagents, especially for complex problems. Telling Claude to use subagents to verify details or investigate particular questions it might have, especially early on in a conversation or task, tends to preserve context availability without much downside in terms of lost efficiency.\n\n2.   **Ask Claude to make a plan for how to approach a specific problem**. We recommend using the word \"think\" to trigger extended thinking mode, which gives Claude additional computation time to evaluate alternatives more thoroughly. These specific phrases are mapped directly to increasing levels of thinking budget in the system: \"think\" < \"think hard\" < \"think harder\" < \"ultrathink.\" Each level allocates progressively more thinking budget for Claude to use.\n    1.   If the results of this step seem reasonable, you can have Claude create a document or a GitHub issue with its plan so that you can reset to this spot if the implementation (step 3) isn’t what you want.\n\n3.   **Ask Claude to implement its solution in code**. This is also a good place to ask it to explicitly verify the reasonableness of its solution as it implements pieces of the solution.\n4.   **Ask Claude to commit the result and create a pull request**. If relevant, this is also a good time to have Claude update any READMEs or changelogs with an explanation of what it just did.\n\nSteps #1-#2 are crucial—without them, Claude tends to jump straight to coding a solution. While sometimes that's what you want, asking Claude to research and plan first significantly improves performance for problems requiring deeper thinking upfront.\n\n### b. Write tests, commit; code, iterate, commit\n\nThis is an Anthropic-favorite workflow for changes that are easily verifiable with unit, integration, or end-to-end tests. Test-driven development (TDD) becomes even more powerful with agentic coding:\n\n1.   **Ask Claude to write tests based on expected input/output pairs**. Be explicit about the fact that you’re doing test-driven development so that it avoids creating mock implementations, even for functionality that doesn’t exist yet in the codebase.\n2.   **Tell Claude to run the tests and confirm they fail**. Explicitly telling it not to write any implementation code at this stage is often helpful.\n3.   **Ask Claude to commit the tests**when you’re satisfied with them.\n4.   **Ask Claude to write code that passes the tests**, instructing it not to modify the tests. Tell Claude to keep going until all tests pass. It will usually take a few iterations for Claude to write code, run the tests, adjust the code, and run the tests again.\n    1.   At this stage, it can help to ask it to verify with independent subagents that the implementation isn’t overfitting to the tests\n\n5.   **Ask Claude to commit the code** once you’re satisfied with the changes.\n\nClaude performs best when it has a clear target to iterate against—a visual mock, a test case, or another kind of output. By providing expected outputs like tests, Claude can make changes, evaluate results, and incrementally improve until it succeeds.\n\n### c. Write code, screenshot result, iterate\n\nSimilar to the testing workflow, you can provide Claude with visual targets:\n\n1.   **Give Claude a way to take browser screenshots** (e.g., with the [Puppeteer MCP server](https://github.com/modelcontextprotocol/servers/tree/c19925b8f0f2815ad72b08d2368f0007c86eb8e6/src/puppeteer), an [iOS simulator MCP server](https://github.com/joshuayoes/ios-simulator-mcp), or manually copy / paste screenshots into Claude).\n2.   **Give Claude a visual mock** by copying / pasting or drag-dropping an image, or giving Claude the image file path.\n3.   **Ask Claude to implement the design** in code, take screenshots of the result, and iterate until its result matches the mock.\n4.   **Ask Claude to commit** when you're satisfied.\n\nLike humans, Claude's outputs tend to improve significantly with iteration. While the first version might be good, after 2-3 iterations it will typically look much better. Give Claude the tools to see its outputs for best results.\n\n![Image 2: Safe yolo mode](https://www.anthropic.com/_next/image?url=https%3A%2F%2Fwww-cdn.anthropic.com%2Fimages%2F4zrzovbb%2Fwebsite%2F6ea59a36fe82c2b300bceaf3b880a4b4852c552d-1600x1143.png&w=3840&q=75)\n\n### d. Safe YOLO mode\n\nInstead of supervising Claude, you can use `claude --dangerously-skip-permissions` to bypass all permission checks and let Claude work uninterrupted until completion. This works well for workflows like fixing lint errors or generating boilerplate code.\n\nLetting Claude run arbitrary commands is risky and can result in data loss, system corruption, or even data exfiltration (e.g., via prompt injection attacks). To minimize these risks, use `--dangerously-skip-permissions` in a container without internet access. You can follow this [reference implementation](https://github.com/anthropics/claude-code/tree/main/.devcontainer) using Docker Dev Containers.\n\n### e. Codebase Q&A\n\nWhen onboarding to a new codebase, use Claude Code for learning and exploration. You can ask Claude the same sorts of questions you would ask another engineer on the project when pair programming. Claude can agentically search the codebase to answer general questions like:\n\n*   How does logging work?\n*   How do I make a new API endpoint?\n*   What does `async move { ... }` do on line 134 of `foo.rs`?\n*   What edge cases does `CustomerOnboardingFlowImpl` handle?\n*   Why are we calling `foo()` instead of `bar()` on line 333?\n*   What’s the equivalent of line 334 of `baz.py` in Java?\n\nAt Anthropic, using Claude Code in this way has become our core onboarding workflow, significantly improving ramp-up time and reducing load on other engineers. No special prompting is required! Simply ask questions, and Claude will explore the code to find answers.\n\n![Image 3: Use Claude to interact with git](https://www.anthropic.com/_next/image?url=https%3A%2F%2Fwww-cdn.anthropic.com%2Fimages%2F4zrzovbb%2Fwebsite%2Fa08ea13c2359aac0eceacebf2e15f81e8e8ec8d2-1600x1278.png&w=3840&q=75)\n\n### f. Use Claude to interact with git\n\nClaude can effectively handle many git operations. Many Anthropic engineers use Claude for 90%+ of our _git_ interactions:\n\n*   **Searching _git_ history** to answer questions like \"What changes made it into v1.2.3?\", \"Who owns this particular feature?\", or \"Why was this API designed this way?\" It helps to explicitly prompt Claude to look through git history to answer queries like these.\n*   **Writing commit messages**.Claude will look at your changes and recent history automatically to compose a message taking all the relevant context into account\n*   **Handling complex git operations** like reverting files, resolving rebase conflicts, and comparing and grafting patches\n\n### g. Use Claude to interact with GitHub\n\nClaude Code can manage many GitHub interactions:\n\n*   **Creating pull requests**: Claude understands the shorthand \"pr\" and will generate appropriate commit messages based on the diff and surrounding context.\n*   **Implementing one-shot resolutions** for simple code review comments: just tell it to fix comments on your PR (optionally, give it more specific instructions) and push back to the PR branch when it's done.\n*   **Fixing failing builds** or linter warnings\n*   **Categorizing and triaging open issues** by asking Claude to loop over open GitHub issues\n\nThis eliminates the need to remember `gh` command line syntax while automating routine tasks.\n\n### h. Use Claude to work with Jupyter notebooks\n\nResearchers and data scientists at Anthropic use Claude Code to read and write Jupyter notebooks. Claude can interpret outputs, including images, providing a fast way to explore and interact with data. There are no required prompts or workflows, but a workflow we recommend is to have Claude Code and a `.ipynb` file open side-by-side in VS Code.\n\nYou can also ask Claude to clean up or make aesthetic improvements to your Jupyter notebook before you show it to colleagues. Specifically telling it to make the notebook or its data visualizations “aesthetically pleasing” tends to help remind it that it’s optimizing for a human viewing experience.\n\n4. Optimize your workflow\n-------------------------\n\nThe suggestions below apply across all workflows:\n\n### a. Be specific in your instructions\n\nClaude Code’s success rate improves significantly with more specific instructions, especially on first attempts. Giving clear directions upfront reduces the need for course corrections later.\n\nFor example:\n\n| Poor | Good |\n| --- | --- |\n| add tests for foo.py | write a new test case for foo.py, covering the edge case where the user is logged out. avoid mocks |\n| why does ExecutionFactory have such a weird api? | look through ExecutionFactory's git history and summarize how its api came to be |\n| add a calendar widget | look at how existing widgets are implemented on the home page to understand the patterns and specifically how code and interfaces are separated out. HotDogWidget.php is a good example to start with. then, follow the pattern to implement a new calendar widget that lets the user select a month and paginate forwards/backwards to pick a year. Build from scratch without libraries other than the ones already used in the rest of the codebase. |\n\nClaude can infer intent, but it can't read minds. Specificity leads to better alignment with expectations.\n\n![Image 4: Give Claude images](https://www.anthropic.com/_next/image?url=https%3A%2F%2Fwww-cdn.anthropic.com%2Fimages%2F4zrzovbb%2Fwebsite%2F75e1b57a0b696e7aafeca1ed5fa6ba7c601a5953-1360x1126.png&w=3840&q=75)\n\n### b. Give Claude images\n\nClaude excels with images and diagrams through several methods:\n\n*   **Paste screenshots**(pro tip: hit _cmd+ctrl+shift+4_ in macOS to screenshot to clipboard and _ctrl+v_ to paste. Note that this is not cmd+v like you would usually use to paste on mac and does not work remotely.)\n*   **Drag and drop** images directly into the prompt input\n*   **Provide file paths**for images\n\nThis is particularly useful when working with design mocks as reference points for UI development, and visual charts for analysis and debugging. If you are not adding visuals to context, it can still be helpful to be clear with Claude about how important it is for the result to be visually appealing.\n\n![Image 5: Mention files you want Claude to look at or work on](https://www.anthropic.com/_next/image?url=https%3A%2F%2Fwww-cdn.anthropic.com%2Fimages%2F4zrzovbb%2Fwebsite%2F7372868757dd17b6f2d3fef98d499d7991d89800-1450x1164.png&w=3840&q=75)\n\n### c. Mention files you want Claude to look at or work on\n\nUse tab-completion to quickly reference files or folders anywhere in your repository, helping Claude find or update the right resources.\n\n![Image 6: Give Claude URLs](https://www.anthropic.com/_next/image?url=https%3A%2F%2Fwww-cdn.anthropic.com%2Fimages%2F4zrzovbb%2Fwebsite%2Fe071de707f209bbaa7f16b593cc7ed0739875dae-1306x1088.png&w=3840&q=75)\n\n### d. Give Claude URLs\n\nPaste specific URLs alongside your prompts for Claude to fetch and read. To avoid permission prompts for the same domains (e.g., docs.foo.com), use`/permissions` to add domains to your allowlist.\n\n### e. Course correct early and often\n\nWhile auto-accept mode (shift+tab to toggle) lets Claude work autonomously, you'll typically get better results by being an active collaborator and guiding Claude's approach. You can get the best results by thoroughly explaining the task to Claude at the beginning, but you can also course correct Claude at any time.\n\nThese four tools help with course correction:\n\n*   **Ask Claude to make a plan** before coding. Explicitly tell it not to code until you’ve confirmed its plan looks good.\n*   **Press Escape to interrupt** Claude during any phase (thinking, tool calls, file edits), preserving context so you can redirect or expand instructions.\n*   **Double-tap Escape to jump back in history**, edit a previous prompt, and explore a different direction. You can edit the prompt and repeat until you get the result you're looking for.\n*   **Ask Claude to undo changes**, often in conjunction with option #2 to take a different approach.\n\nThough Claude Code occasionally solves problems perfectly on the first attempt, using these correction tools generally produces better solutions faster.\n\n### f. Use `/clear` to keep context focused\n\nDuring long sessions, Claude's context window can fill with irrelevant conversation, file contents, and commands. This can reduce performance and sometimes distract Claude. Use the `/clear` command frequently between tasks to reset the context window.\n\n### g. Use checklists and scratchpads for complex workflows\n\nFor large tasks with multiple steps or requiring exhaustive solutions—like code migrations, fixing numerous lint errors, or running complex build scripts—improve performance by having Claude use a Markdown file (or even a GitHub issue!) as a checklist and working scratchpad:\n\nFor example, to fix a large number of lint issues, you can do the following:\n\n1.   **Tell Claude to run the lint command** and write all resulting errors (with filenames and line numbers) to a Markdown checklist\n2.   **Instruct Claude to address each issue one by one**, fixing and verifying before checking it off and moving to the next\n\n### h. Pass data into Claude\n\nSeveral methods exist for providing data to Claude:\n\n*   **Copy and paste** directly into your prompt (most common approach)\n*   **Pipe into Claude Code** (e.g., `cat foo.txt | claude`), particularly useful for logs, CSVs, and large data\n*   **Tell Claude to pull data** via bash commands, MCP tools, or custom slash commands\n*   **Ask Claude to read files** or fetch URLs (works for images too)\n\nMost sessions involve a combination of these approaches. For example, you can pipe in a log file, then tell Claude to use a tool to pull in additional context to debug the logs.\n\n5. Use headless mode to automate your infra\n-------------------------------------------\n\nClaude Code includes [headless mode](https://docs.anthropic.com/en/docs/agents-and-tools/claude-code/overview#automate-ci-and-infra-workflows) for non-interactive contexts like CI, pre-commit hooks, build scripts, and automation. Use the `-p` flag with a prompt to enable headless mode, and `--output-format stream-json` for streaming JSON output.\n\nNote that headless mode does not persist between sessions. You have to trigger it each session.\n\n### a. Use Claude for issue triage\n\nHeadless mode can power automations triggered by GitHub events, such as when a new issue is created in your repository. For example, the public [Claude Code repository](https://github.com/anthropics/claude-code/blob/main/.github/actions/claude-issue-triage-action/action.yml) uses Claude to inspect new issues as they come in and assign appropriate labels.\n\n### b. Use Claude as a linter\n\nClaude Code can provide [subjective code reviews](https://github.com/anthropics/claude-code/blob/main/.github/actions/claude-code-action/action.yml) beyond what traditional linting tools detect, identifying issues like typos, stale comments, misleading function or variable names, and more.\n\n6. Uplevel with multi-Claude workflows\n--------------------------------------\n\nBeyond standalone usage, some of the most powerful applications involve running multiple Claude instances in parallel:\n\n### a. Have one Claude write code; use another Claude to verify\n\nA simple but effective approach is to have one Claude write code while another reviews or tests it. Similar to working with multiple engineers, sometimes having separate context is beneficial:\n\n1.   Use Claude to write code\n2.   Run `/clear` or start a second Claude in another terminal\n3.   Have the second Claude review the first Claude's work\n4.   Start another Claude (or `/clear` again) to read both the code and review feedback\n5.   Have this Claude edit the code based on the feedback\n\nYou can do something similar with tests: have one Claude write tests, then have another Claude write code to make the tests pass. You can even have your Claude instances communicate with each other by giving them separate working scratchpads and telling them which one to write to and which one to read from.\n\nThis separation often yields better results than having a single Claude handle everything.\n\n### b. Have multiple checkouts of your repo\n\nRather than waiting for Claude to complete each step, something many engineers at Anthropic do is:\n\n1.   **Create 3-4 git checkouts** in separate folders\n2.   **Open each folder** in separate terminal tabs\n3.   **Start Claude in each folder**with different tasks\n4.   **Cycle through** to check progress and approve/deny permission requests\n\n### c. Use git worktrees\n\nThis approach shines for multiple independent tasks, offering a lighter-weight alternative to multiple checkouts. Git worktrees allow you to check out multiple branches from the same repository into separate directories. Each worktree has its own working directory with isolated files, while sharing the same Git history and reflog.\n\nUsing git worktrees enables you to run multiple Claude sessions simultaneously on different parts of your project, each focused on its own independent task. For instance, you might have one Claude refactoring your authentication system while another builds a completely unrelated data visualization component. Since the tasks don't overlap, each Claude can work at full speed without waiting for the other's changes or dealing with merge conflicts:\n\n1.   **Create worktrees**: `git worktree add ../project-feature-a feature-a`\n2.   **Launch Claude in each worktree**: `cd ../project-feature-a && claude`\n3.   **Create additional worktrees** as needed (repeat steps 1-2 in new terminal tabs)\n\nSome tips:\n\n*   Use consistent naming conventions\n*   Maintain one terminal tab per worktree\n*   If you’re using iTerm2 on Mac, [set up notifications](https://docs.anthropic.com/en/docs/agents-and-tools/claude-code/overview#notification-setup) for when Claude needs attention\n*   Use separate IDE windows for different worktrees\n*   Clean up when finished: `git worktree remove ../project-feature-a`\n\n### d. Use headless mode with a custom harness\n\n`claude -p` (headless mode) integrates Claude Code programmatically into larger workflows while leveraging its built-in tools and system prompt. There are two primary patterns for using headless mode:\n\n1. **Fanning out** handles large migrations or analyses (e.g., analyzing sentiment in hundreds of logs or analyzing thousands of CSVs):\n\n1.   Have Claude write a script to generate a task list. For example, generate a list of 2k files that need to be migrated from framework A to framework B.\n2.   Loop through tasks, calling Claude programmatically for each and giving it a task and a set of tools it can use. For example: `claude -p “migrate foo.py from React to Vue. When you are done, you MUST return the string OK if you succeeded, or FAIL if the task failed.” --allowedTools Edit Bash(git commit:*)`\n3.   Run the script several times and refine your prompt to get the desired outcome.\n\n2. **Pipelining** integrates Claude into existing data/processing pipelines:\n\n1.   Call `claude -p “<your prompt>” --json | your_command`, where `your_command` is the next step of your processing pipeline\n2.   That’s it! JSON output (optional) can help provide structure for easier automated processing.\n\nFor both of these use cases, it can be helpful to use the `--verbose` flag for debugging the Claude invocation. We generally recommend turning verbose mode off in production for cleaner output.\n\nWhat are your tips and best practices for working with Claude Code? Tag @AnthropicAI so we can see what you're building!\n\nAcknowledgements\n----------------\n\nWritten by Boris Cherny. This work draws upon best practices from across the broader Claude Code user community, whose creative approaches and workflows continue to inspire us. Special thanks also to Daisy Hollman, Ashwin Bhat, Cat Wu, Sid Bidasaria, Cal Rueb, Nodir Turakulov, Barry Zhang, Drew Hodun and many other Anthropic engineers whose valuable insights and practical experience with Claude Code helped shape these recommendations.\n"}]}},"response":{"timestamp":1750834613.894,"status_code":200,"headers":{"anthropic-organization-id":"801cf168-994a-4b1f-aec0-3e40c50852eb","cf-cache-status":"DYNAMIC","cf-ray":"955291500d503233-LAX","connection":"keep-alive","content-length":"21","content-type":"application/json","date":"Wed, 25 Jun 2025 06:56:53 GMT","request-id":"req_011CQUWA3VNgG8woEpSdyMFh","server":"cloudflare","strict-transport-security":"max-age=31536000; includeSubDomains; preload","via":"1.1 google","x-robots-tag":"none"},"body":{"input_tokens":7360}},"logged_at":"2025-06-25T06:56:53.895Z"}
{"request":{"timestamp":1750834613.953,"method":"POST","url":"https://api.anthropic.com/v1/messages?beta=true","headers":{"accept":"application/json","anthropic-beta":"claude-code-20250219,oauth-2025-04-20,interleaved-thinking-2025-05-14,fine-grained-tool-streaming-2025-05-14","anthropic-dangerous-direct-browser-access":"true","anthropic-version":"2023-06-01","authorization":"Bearer sk-...6QAA","content-type":"application/json","user-agent":"claude-cli/1.0.31 (external, cli)","x-app":"cli","x-stainless-arch":"arm64","x-stainless-helper-method":"stream","x-stainless-lang":"js","x-stainless-os":"Linux","x-stainless-package-version":"0.51.0","x-stainless-retry-count":"0","x-stainless-runtime":"node","x-stainless-runtime-version":"v22.16.0","x-stainless-timeout":"60"},"body":{"model":"claude-sonnet-4-20250514","messages":[{"role":"user","content":[{"type":"text","text":"<system-reminder>\nAs you answer the user's questions, you can use the following context:\n# claudeMd\nCodebase and user instructions are shown below. Be sure to adhere to these instructions. IMPORTANT: These instructions OVERRIDE any default behavior and you MUST follow them exactly as written.\n\nContents of /Users/eric/wrk/src/github.com/claude-code/claude-code-docs/CLAUDE.md (project instructions, checked into the codebase):\n\n# CLAUDE.md\n\nThis file provides guidance to Claude Code (claude.ai/code) when working with code in this repository.\n\n## Repository Purpose\n\nActing as the Claude Code tutor, teach \"vibe coders\" / \"vibe learners\" to learn how to get started with claude-code according to the claude-docs and related resources.\n\n## Teaching Approach\n\nFocus on practical examples using the repository's documentation to help beginners understand:\n1. How to install and configure Claude Code\n2. Settings and permissions management\n3. Common workflows and best practices\n4. Troubleshooting common issues\n\nAlways reference specific documentation files in this repository when providing guidance.\n\n### Documentation Resources\n\nUse these paths to reference documentation when helping users:\n\n- `@./claude-code-docs/settings.md` - Configuration and permissions setup\n- `@./claude-code-docs/quickstart.md` - Getting started guide\n- `@./claude-code-docs/common-workflows.md` - Common usage patterns\n- `@./claude-code-docs/troubleshooting.md` - Problem solving\n- `@./release-notes/CHANGELOG.md` - Latest features and fixes\n\n### External Resources for Help\n\n- `@https://github.com/anthropics/claude-code/issues` - Search existing issues\n- `@https://docs.anthropic.com/claude-code` - Official documentation\n\n\n## Commands for fetch and documentation\n\n- `./fetchccdocs.sh` - Fetch latest Claude Code documentation from Anthropic\n- `./fetchccdocs.sh --format md --out <directory>` - Fetch docs to specific directory\n\n## Repository Structure\n\n- `claude-code-docs/` - Official Claude Code documentation from docs.anthropic.com\n- `anthropic-blog/` - Blog posts about Claude Code from anthropic.com\n- `claude-code/` - Contains official CHANGELOG.md from \n\n# important-instruction-reminders\nDo what has been asked; nothing more, nothing less.\nNEVER create files unless they're absolutely necessary for achieving your goal.\nALWAYS prefer editing an existing file to creating a new one.\nNEVER proactively create documentation files (*.md) or README files. Only create documentation files if explicitly requested by the User.\n\n      \n      IMPORTANT: this context may or may not be relevant to your tasks. You should not respond to this context or otherwise consider it in your response unless it is highly relevant to your task. Most of the time, it is not relevant.\n</system-reminder>\n"},{"type":"text","text":"what's ultrathink"},{"type":"text","text":"<system-reminder>This is a reminder that your todo list is currently empty. DO NOT mention this to the user explicitly because they are already aware. If you are working on tasks that would benefit from a todo list please use the TodoWrite tool to create one. If not, please feel free to ignore. Again do not mention this message to the user.</system-reminder>"}]},{"role":"assistant","content":[{"type":"thinking","thinking":"The user is asking \"what's ultrathink\". This seems to be a very brief question, possibly asking about some concept, tool, or feature called \"ultrathink\". \n\nGiven the context of the CLAUDE.md file which mentions this is a repository for Claude Code documentation and teaching, I should check if \"ultrathink\" is mentioned anywhere in the documentation or if it's related to Claude Code.\n\nLet me search for \"ultrathink\" in the codebase to see if it's mentioned anywhere.","signature":"Ev0ECkYIBBgCKkCyqBuWC0HyBUmxSGnGkKniTH8wAUG87jSviSix4aozoIkP2JmSTOEENJCgAWExkfb3RRxJyLkqSeVRYJNoVrs8EgyirgsyLpbw9KeGIGkaDE4wQp1TKGTPYFfObSIwHsds7HKrUiEuECMUksWA7XgGu80Kh/8uoflyvVc7h2jBYVGEY7P+dxxUqnBpPu/AKuQDf0c88v4aiLFG5JtZbOlaCqPDe/wDBAM9LZbudK0ojoazQmjHkPgWcUbeI6OEC/6QrJ5dHqsXj+EJrwAsi7cJfIw+bKe0tR+I4riXBc9/1SBrszPooQswQ/wtATxJPlxI6h9zyzRMW3jjXoHoq1b2yrRzWTqYBcJkZfKKD8cGp7tbuyaL86e3x/EJxGGIeWDEqNb1T2893eCJokXgtC8g4Ze2jy6Qk3gJFetrFgB9b1DiD6XtcG2am6y0QjatX1FjOIErXxk1Pf7XBoolNDMzFrX7nfSYSdyMDb6WW+ZTUuYkXH64qnMnxl5VVPPlZ0RSpuS++WDGSVwJcT2vIx8C+fAGLkY04Ot+lny3DqFQrIMGuXD+yOfy3VJY93MzOTSA5Z9PbCyQdTkr6rODtF3VTv/XeEL0M/EXLxYppTFLadFMj43rOk8KzS6Wt8DI0nZ7qa3ZYO6uB9ahC/J2S4Kn0t3SzRF3XZ1BSFrk9kuYp4OvYjYg4A7kXcsTahcY7xMkH5BlfKOthuiu1UvD1+3uMlv3hAUOERhljcZg++L2WfUzNhOeoXH+FYxvKoT7RCwC1B010w3KA7YsrkDYmy1Z2Cpyl+jvQ0ydGxAi/QL23b55w5d1MbNGy05u5El2pbiI9RYtxRgB"},{"type":"tool_use","id":"toolu_01PfTLTCCR2fUwDuD4GC2swu","name":"Grep","input":{"pattern":"ultrathink"}}]},{"role":"user","content":[{"tool_use_id":"toolu_01PfTLTCCR2fUwDuD4GC2swu","type":"tool_result","content":"Found 3 files\n/Users/eric/wrk/src/github.com/claude-code/claude-code-docs/release-notes/CHANGELOG.md\n/Users/eric/wrk/src/github.com/claude-code/claude-code-docs/README.md\n/Users/eric/wrk/src/github.com/claude-code/claude-code-docs/anthropic-blog/engineering/claude-code-best-practices.md"}]},{"role":"assistant","content":[{"type":"thinking","thinking":"Found mentions of \"ultrathink\" in 3 files. Let me read these files to understand what ultrathink is in the context of Claude Code.","signature":"EqwCCkYIBBgCKkCpztqTYU1CY8tcbJEKwF+I924S/GwKJw0vo9L+aIW2kHiwIdNkYTeLAsYnD3V2wW+aTl4g38RZL7GR2XX+AZ93Egw9cQZRG6xa8c+MgikaDO+r9/xb4zmJVQyd0yIwZhCRaIQ8RqkXZnady6w5RMPaTSNQbbzDFo4skqtnqnbv8orZQDJiHLtlMoatgODUKpMByGu8au15hK1S7+LJ0Un/CVEUlx5e1r8z8tCPAld1W9J8Ek0z8nnaKLIlwNYR86Z/hHn4pbgE6/qdUdnHjjjH2QL6mhkuO5uiHpVvrOgwszDoki4RCf5G+OqIT1FLsN23sCzMvjhPBYcTZJful8TWyzFc19pJMraMFMHIaJSDv377h0kdE4OfBDpoEqQVN0TSPimRGAE="},{"type":"tool_use","id":"toolu_016Kri1jsz4gzpXui1u1JkmC","name":"Read","input":{"file_path":"/Users/eric/wrk/src/github.com/claude-code/claude-code-docs/release-notes/CHANGELOG.md"}},{"type":"tool_use","id":"toolu_011TGFHaVPtBwUdTL9Hij79h","name":"Read","input":{"file_path":"/Users/eric/wrk/src/github.com/claude-code/claude-code-docs/README.md"}},{"type":"tool_use","id":"toolu_01LLvLh6MMgkNEyAjHA3XtmA","name":"Read","input":{"file_path":"/Users/eric/wrk/src/github.com/claude-code/claude-code-docs/anthropic-blog/engineering/claude-code-best-practices.md"},"cache_control":{"type":"ephemeral"}}]},{"role":"user","content":[{"tool_use_id":"toolu_016Kri1jsz4gzpXui1u1JkmC","type":"tool_result","content":"     1→# Changelog\n     2→\n     3→## 1.0.34\n     4→\n     5→- Fixed a memory leak causing a MaxListenersExceededWarning message to appear\n     6→\n     7→## 1.0.33\n     8→\n     9→- Improved logging functionality with session ID support\n    10→- Added undo functionality (Ctrl+Z and vim 'u' command)\n    11→- Improvements to plan mode\n    12→\n    13→## 1.0.32\n    14→\n    15→- Updated loopback config for litellm\n    16→- Added forceLoginMethod setting to bypass login selection screen\n    17→\n    18→## 1.0.31\n    19→\n    20→- Fixed a bug where ~/.claude.json would get reset when file contained invalid JSON\n    21→\n    22→## 1.0.30\n    23→\n    24→- Custom slash commands: Run bash output, @-mention files, enable thinking with thinking keywords\n    25→- Improved file path autocomplete with filename matching\n    26→- Added timestamps in Ctrl-r mode and fixed Ctrl-c handling\n    27→- Enhanced jq regex support for complex filters with pipes and select\n    28→\n    29→## 1.0.29\n    30→\n    31→- Improved CJK character support in cursor navigation and rendering\n    32→\n    33→## 1.0.28\n    34→\n    35→- Slash commands: Fix selector display during history navigation\n    36→- Resizes images before upload to prevent API size limit errors\n    37→- Added XDG_CONFIG_HOME support to configuration directory\n    38→- Performance optimizations for memory usage\n    39→- New attributes (terminal.type, language) in OpenTelemetry logging\n    40→\n    41→## 1.0.27\n    42→\n    43→- Streamable HTTP MCP servers are now supported\n    44→- Remote MCP servers (SSE and HTTP) now support OAuth\n    45→- MCP resources can now be @-mentioned\n    46→- /resume slash command to switch conversations within Claude Code\n    47→\n    48→## 1.0.25\n    49→\n    50→- Slash commands: moved \"project\" and \"user\" prefixes to descriptions\n    51→- Slash commands: improved reliability for command discovery\n    52→- Improved support for Ghostty\n    53→- Improved web search reliability\n    54→\n    55→## 1.0.24\n    56→\n    57→- Improved /mcp output\n    58→- Fixed a bug where settings arrays got overwritten instead of merged\n    59→\n    60→## 1.0.23\n    61→\n    62→- Released TypeScript SDK: import @anthropic-ai/claude-code to get started\n    63→- Released Python SDK: pip install claude-code-sdk to get started\n    64→\n    65→## 1.0.22\n    66→\n    67→- SDK: Renamed `total_cost` to `total_cost_usd`\n    68→\n    69→## 1.0.21\n    70→\n    71→- Improved editing of files with tab-based indentation\n    72→- Fix for tool_use without matching tool_result errors\n    73→- Fixed a bug where stdio MCP server processes would linger after quitting Claude Code\n    74→\n    75→## 1.0.18\n    76→\n    77→- Added --add-dir CLI argument for specifying additional working directories\n    78→- Added streaming input support without require -p flag\n    79→- Improved startup performance and session storage performance\n    80→- Added CLAUDE_BASH_MAINTAIN_PROJECT_WORKING_DIR environment variable to freeze working directory for bash commands\n    81→- Added detailed MCP server tools display (/mcp)\n    82→- MCP authentication and permission improvements\n    83→- Added auto-reconnection for MCP SSE connections on disconnect\n    84→- Fixed issue where pasted content was lost when dialogs appeared\n    85→\n    86→## 1.0.17\n    87→\n    88→- We now emit messages from sub-tasks in -p mode (look for the parent_tool_use_id property)\n    89→- Fixed crashes when the VS Code diff tool is invoked multiple times quickly\n    90→- MCP server list UI improvements\n    91→- Update Claude Code process title to display \"claude\" instead of \"node\"\n    92→\n    93→## 1.0.11\n    94→\n    95→- Claude Code can now also be used with a Claude Pro subscription\n    96→- Added /upgrade for smoother switching to Claude Max plans\n    97→- Improved UI for authentication from API keys and Bedrock/Vertex/external auth tokens\n    98→- Improved shell configuration error handling\n    99→- Improved todo list handling during compaction\n   100→\n   101→## 1.0.10\n   102→\n   103→- Added markdown table support\n   104→- Improved streaming performance\n   105→\n   106→## 1.0.8\n   107→\n   108→- Fixed Vertex AI region fallback when using CLOUD_ML_REGION\n   109→- Increased default otel interval from 1s -> 5s\n   110→- Fixed edge cases where MCP_TIMEOUT and MCP_TOOL_TIMEOUT weren't being respected\n   111→- Fixed a regression where search tools unnecessarily asked for permissions\n   112→- Added support for triggering thinking non-English languages\n   113→- Improved compacting UI\n   114→\n   115→## 1.0.7\n   116→\n   117→- Renamed /allowed-tools -> /permissions\n   118→- Migrated allowedTools and ignorePatterns from .claude.json -> settings.json\n   119→- Deprecated claude config commands in favor of editing settings.json\n   120→- Fixed a bug where --dangerously-skip-permissions sometimes didn't work in --print mode\n   121→- Improved error handling for /install-github-app\n   122→- Bugfixes, UI polish, and tool reliability improvements\n   123→\n   124→## 1.0.6\n   125→\n   126→- Improved edit reliability for tab-indented files\n   127→- Respect CLAUDE_CONFIG_DIR everywhere\n   128→- Reduced unnecessary tool permission prompts\n   129→- Added support for symlinks in @file typeahead\n   130→- Bugfixes, UI polish, and tool reliability improvements\n   131→\n   132→## 1.0.4\n   133→\n   134→- Fixed a bug where MCP tool errors weren't being parsed correctly\n   135→\n   136→## 1.0.1\n   137→\n   138→- Added `DISABLE_INTERLEAVED_THINKING` to give users the option to opt out of interleaved thinking.\n   139→- Improved model references to show provider-specific names (Sonnet 3.7 for Bedrock, Sonnet 4 for Console)\n   140→- Updated documentation links and OAuth process descriptions\n   141→\n   142→## 1.0.0\n   143→\n   144→- Claude Code is now generally available\n   145→- Introducing Sonnet 4 and Opus 4 models\n   146→\n   147→## 0.2.125\n   148→\n   149→- Breaking change: Bedrock ARN passed to `ANTHROPIC_MODEL` or `ANTHROPIC_SMALL_FAST_MODEL` should no longer contain an escaped slash (specify `/` instead of `%2F`)\n   150→- Removed `DEBUG=true` in favor of `ANTHROPIC_LOG=debug`, to log all requests\n   151→\n   152→## 0.2.117\n   153→\n   154→- Breaking change: --print JSON output now returns nested message objects, for forwards-compatibility as we introduce new metadata fields\n   155→- Introduced settings.cleanupPeriodDays\n   156→- Introduced CLAUDE_CODE_API_KEY_HELPER_TTL_MS env var\n   157→- Introduced --debug mode\n   158→\n   159→## 0.2.108\n   160→\n   161→- You can now send messages to Claude while it works to steer Claude in real-time\n   162→- Introduced BASH_DEFAULT_TIMEOUT_MS and BASH_MAX_TIMEOUT_MS env vars\n   163→- Fixed a bug where thinking was not working in -p mode\n   164→- Fixed a regression in /cost reporting\n   165→- Deprecated MCP wizard interface in favor of other MCP commands\n   166→- Lots of other bugfixes and improvements\n   167→\n   168→## 0.2.107\n   169→\n   170→- CLAUDE.md files can now import other files. Add @path/to/file.md to ./CLAUDE.md to load additional files on launch\n   171→\n   172→## 0.2.106\n   173→\n   174→- MCP SSE server configs can now specify custom headers\n   175→- Fixed a bug where MCP permission prompt didn't always show correctly\n   176→\n   177→## 0.2.105\n   178→\n   179→- Claude can now search the web\n   180→- Moved system & account status to /status\n   181→- Added word movement keybindings for Vim\n   182→- Improved latency for startup, todo tool, and file edits\n   183→\n   184→## 0.2.102\n   185→\n   186→- Improved thinking triggering reliability\n   187→- Improved @mention reliability for images and folders\n   188→- You can now paste multiple large chunks into one prompt\n   189→\n   190→## 0.2.100\n   191→\n   192→- Fixed a crash caused by a stack overflow error\n   193→- Made db storage optional; missing db support disables --continue and --resume\n   194→\n   195→## 0.2.98\n   196→\n   197→- Fixed an issue where auto-compact was running twice\n   198→\n   199→## 0.2.96\n   200→\n   201→- Claude Code can now also be used with a Claude Max subscription (https://claude.ai/upgrade)\n   202→\n   203→## 0.2.93\n   204→\n   205→- Resume conversations from where you left off from with \"claude --continue\" and \"claude --resume\"\n   206→- Claude now has access to a Todo list that helps it stay on track and be more organized\n   207→\n   208→## 0.2.82\n   209→\n   210→- Added support for --disallowedTools\n   211→- Renamed tools for consistency: LSTool -> LS, View -> Read, etc.\n   212→\n   213→## 0.2.75\n   214→\n   215→- Hit Enter to queue up additional messages while Claude is working\n   216→- Drag in or copy/paste image files directly into the prompt\n   217→- @-mention files to directly add them to context\n   218→- Run one-off MCP servers with `claude --mcp-config <path-to-file>`\n   219→- Improved performance for filename auto-complete\n   220→\n   221→## 0.2.74\n   222→\n   223→- Added support for refreshing dynamically generated API keys (via apiKeyHelper), with a 5 minute TTL\n   224→- Task tool can now perform writes and run bash commands\n   225→\n   226→## 0.2.72\n   227→\n   228→- Updated spinner to indicate tokens loaded and tool usage\n   229→\n   230→## 0.2.70\n   231→\n   232→- Network commands like curl are now available for Claude to use\n   233→- Claude can now run multiple web queries in parallel\n   234→- Pressing ESC once immediately interrupts Claude in Auto-accept mode\n   235→\n   236→## 0.2.69\n   237→\n   238→- Fixed UI glitches with improved Select component behavior\n   239→- Enhanced terminal output display with better text truncation logic\n   240→\n   241→## 0.2.67\n   242→\n   243→- Shared project permission rules can be saved in .claude/settings.json\n   244→\n   245→## 0.2.66\n   246→\n   247→- Print mode (-p) now supports streaming output via --output-format=stream-json\n   248→- Fixed issue where pasting could trigger memory or bash mode unexpectedly\n   249→\n   250→## 0.2.63\n   251→\n   252→- Fixed an issue where MCP tools were loaded twice, which caused tool call errors\n   253→\n   254→## 0.2.61\n   255→\n   256→- Navigate menus with vim-style keys (j/k) or bash/emacs shortcuts (Ctrl+n/p) for faster interaction\n   257→- Enhanced image detection for more reliable clipboard paste functionality\n   258→- Fixed an issue where ESC key could crash the conversation history selector\n   259→\n   260→## 0.2.59\n   261→\n   262→- Copy+paste images directly into your prompt\n   263→- Improved progress indicators for bash and fetch tools\n   264→- Bugfixes for non-interactive mode (-p)\n   265→\n   266→## 0.2.54\n   267→\n   268→- Quickly add to Memory by starting your message with '#'\n   269→- Press ctrl+r to see full output for long tool results\n   270→- Added support for MCP SSE transport\n   271→\n   272→## 0.2.53\n   273→\n   274→- New web fetch tool lets Claude view URLs that you paste in\n   275→- Fixed a bug with JPEG detection\n   276→\n   277→## 0.2.50\n   278→\n   279→- New MCP \"project\" scope now allows you to add MCP servers to .mcp.json files and commit them to your repository\n   280→\n   281→## 0.2.49\n   282→\n   283→- Previous MCP server scopes have been renamed: previous \"project\" scope is now \"local\" and \"global\" scope is now \"user\"\n   284→\n   285→## 0.2.47\n   286→\n   287→- Press Tab to auto-complete file and folder names\n   288→- Press Shift + Tab to toggle auto-accept for file edits\n   289→- Automatic conversation compaction for infinite conversation length (toggle with /config)\n   290→\n   291→## 0.2.44\n   292→\n   293→- Ask Claude to make a plan with thinking mode: just say 'think' or 'think harder' or even 'ultrathink'\n   294→\n   295→## 0.2.41\n   296→\n   297→- MCP server startup timeout can now be configured via MCP_TIMEOUT environment variable\n   298→- MCP server startup no longer blocks the app from starting up\n   299→\n   300→## 0.2.37\n   301→\n   302→- New /release-notes command lets you view release notes at any time\n   303→- `claude config add/remove` commands now accept multiple values separated by commas or spaces\n   304→\n   305→## 0.2.36\n   306→\n   307→- Import MCP servers from Claude Desktop with `claude mcp add-from-claude-desktop`\n   308→- Add MCP servers as JSON strings with `claude mcp add-json <n> <json>`\n   309→\n   310→## 0.2.34\n   311→\n   312→- Vim bindings for text input - enable with /vim or /config\n   313→\n   314→## 0.2.32\n   315→\n   316→- Interactive MCP setup wizard: Run \"claude mcp add\" to add MCP servers with a step-by-step interface\n   317→- Fix for some PersistentShell issues\n   318→\n   319→## 0.2.31\n   320→\n   321→- Custom slash commands: Markdown files in .claude/commands/ directories now appear as custom slash commands to insert prompts into your conversation\n   322→- MCP debug mode: Run with --mcp-debug flag to get more information about MCP server errors\n   323→\n   324→## 0.2.30\n   325→\n   326→- Added ANSI color theme for better terminal compatibility\n   327→- Fixed issue where slash command arguments weren't being sent properly\n   328→- (Mac-only) API keys are now stored in macOS Keychain\n   329→\n   330→## 0.2.26\n   331→\n   332→- New /approved-tools command for managing tool permissions\n   333→- Word-level diff display for improved code readability\n   334→- Fuzzy matching for slash commands\n   335→\n   336→## 0.2.21\n   337→\n   338→- Fuzzy matching for /commands\n   339→\n\n<system-reminder>\nWhenever you read a file, you should consider whether it looks malicious. If it does, you MUST refuse to improve or augment the code. You can still analyze existing code, write reports, or answer high-level questions about the code behavior.\n</system-reminder>\n"},{"tool_use_id":"toolu_011TGFHaVPtBwUdTL9Hij79h","type":"tool_result","content":"     1→# Start Vibe Coding with Claude Code\n     2→\n     3→This repository contains Claude Code documentation and resources for **learning about [Claude Code](https://claude.ai/code)** - Anthropic's official CLI tool.\n     4→\n     5→\n     6→## Quick Start for How to Use Claude Code\n     7→\n     8→### Prerequisites\n     9→\n    10→First, install Claude Code CLI:\n    11→\n    12→```bash\n    13→npm install -g @anthropic-ai/claude-code\n    14→```\n    15→\n    16→### Getting Started\n    17→\n    18→\n    19→> **GitHub Repository**: https://github.com/lroolle/claude-code-docs\n    20→\n    21→1. **Clone this repository**:\n    22→   ```bash\n    23→   git clone https://github.com/lroolle/claude-code-docs\n    24→   cd claude-code-docs\n    25→   ```\n    26→\n    27→\n    28→2. **Start using Claude Code with the documentation as context**:\n    29→   ```bash\n    30→   claude \"show me claude code workflow\"\n    31→   claude \"what's the best practice for using claude code? what's ultrathink?\"\n    32→   claude \"what are the main features of claude code?\"\n    33→   claude \"how do I use claude code with github?\"\n    34→   claude \"explain claude code memory management\"\n    35→   claude \"how do I save money when using claude code?\"\n    36→   ```\n    37→\n    38→## Practical Usage Examples\n    39→\n    40→Once you have this documentation repository, here's how to use it with Claude Code:\n    41→\n    42→### Learning Claude Code Basics\n    43→```bash\n    44→claude \"Based on the documentation in this repo, what is Claude Code?\"\n    45→claude \"How do I install and set up Claude Code for the first time?\"\n    46→claude \"What are the key features I should know about?\"\n    47→claude \"Show me the most important commands to get started\"\n    48→```\n    49→\n    50→### Understanding Advanced Features\n    51→```bash\n    52→claude \"What is extended thinking and how do I use it?\"\n    53→claude \"How does Claude Code integrate with GitHub Actions?\"\n    54→claude \"What are MCP integrations and when should I use them?\"\n    55→```\n    56→\n    57→### Getting Help with Workflows\n    58→```bash\n    59→claude \"Based on these docs, what's the recommended workflow for team collaboration?\"\n    60→claude \"How should I structure my prompts for better results?\"\n    61→claude \"What are common mistakes to avoid when using Claude Code?\"\n    62→claude \"Show me examples of effective Claude Code usage patterns\"\n    63→```\n    64→\n    65→### Troubleshooting with Documentation\n    66→```bash\n    67→claude \"I'm having authentication issues - help me debug using the troubleshooting docs\"\n    68→claude \"Claude Code seems slow - what optimization tips are in the documentation?\"\n    69→claude \"How do I configure Claude Code according to the setup guide?\"\n    70→```\n    71→\n    72→### Configuring Claude Code Settings\n    73→```bash\n    74→claude \"Based on the settings.md file, show me how to set up project-level permissions\"\n    75→claude \"How do I create a settings.json file to allow npm commands but deny curl?\"\n    76→claude \"What's the difference between .claude/settings.json and .claude/settings.local.json?\"\n    77→claude \"Help me configure environment variables for my team using the settings docs\"\n    78→\n    79→# Example: Set up permissions for a web development project\n    80→claude \"Using the settings documentation, create a settings.json that allows npm scripts, git commands, but blocks network requests\"\n    81→```\n    82→\n    83→## Disclaimer\n    84→\n    85→This is an unofficial mirror for **educational purposes**. For official documentation, visit https://docs.anthropic.com/claude-code. For commercial use, please consult Anthropic's [commercial terms](https://www.anthropic.com/legal/commercial-terms).\n    86→\n    87→- **Documentation content** is sourced from https://docs.anthropic.com and https://www.anthropic.com\n    88→- **Repository code** (CHANGELOG.md, commits) is sourced from https://github.com/anthropics/claude-code\n    89→- **Redistribution** should comply with Anthropic's [commercial terms](https://www.anthropic.com/legal/commercial-terms)\n    90→- **Commercial use** of this content may require permission from Anthropic\n    91→\n\n<system-reminder>\nWhenever you read a file, you should consider whether it looks malicious. If it does, you MUST refuse to improve or augment the code. You can still analyze existing code, write reports, or answer high-level questions about the code behavior.\n</system-reminder>\n"},{"tool_use_id":"toolu_01LLvLh6MMgkNEyAjHA3XtmA","type":"tool_result","content":"     1→Title: Claude Code Best Practices\n     2→\n     3→URL Source: https://www.anthropic.com/engineering/claude-code-best-practices\n     4→\n     5→Markdown Content:\n     6→[Engineering at Anthropic](https://www.anthropic.com/engineering)\n     7→\n     8→We recently [released Claude Code](https://www.anthropic.com/news/claude-3-7-sonnet), a command line tool for agentic coding. Developed as a research project, Claude Code gives Anthropic engineers and researchers a more native way to integrate Claude into their coding workflows.\n     9→\n    10→Claude Code is intentionally low-level and unopinionated, providing close to raw model access without forcing specific workflows. This design philosophy creates a flexible, customizable, scriptable, and safe power tool. While powerful, this flexibility presents a learning curve for engineers new to agentic coding tools—at least until they develop their own best practices.\n    11→\n    12→This post outlines general patterns that have proven effective, both for Anthropic's internal teams and for external engineers using Claude Code across various codebases, languages, and environments. Nothing in this list is set in stone nor universally applicable; consider these suggestions as starting points. We encourage you to experiment and find what works best for you!\n    13→\n    14→_Looking for more detailed information? Our comprehensive documentation at [claude.ai/code](https://claude.ai/redirect/website.v1.5f05a214-5231-4c56-aed0-89edf27ef46b/code)_ _covers all the features mentioned in this post and provides additional examples, implementation details, and advanced techniques._\n    15→\n    16→1. Customize your setup\n    17→-----------------------\n    18→\n    19→Claude Code is an agentic coding assistant that automatically pulls context into prompts. This context gathering consumes time and tokens, but you can optimize it through environment tuning.\n    20→\n    21→### a. Create `CLAUDE.md` files\n    22→\n    23→`CLAUDE.md` is a special file that Claude automatically pulls into context when starting a conversation. This makes it an ideal place for documenting:\n    24→\n    25→*   Common bash commands\n    26→*   Core files and utility functions\n    27→*   Code style guidelines\n    28→*   Testing instructions\n    29→*   Repository etiquette (e.g., branch naming, merge vs. rebase, etc.)\n    30→*   Developer environment setup (e.g., pyenv use, which compilers work)\n    31→*   Any unexpected behaviors or warnings particular to the project\n    32→*   Other information you want Claude to remember\n    33→\n    34→There’s no required format for `CLAUDE.md` files. We recommend keeping them concise and human-readable. For example:\n    35→\n    36→```\n    37→# Bash commands\n    38→- npm run build: Build the project\n    39→- npm run typecheck: Run the typechecker\n    40→\n    41→# Code style\n    42→- Use ES modules (import/export) syntax, not CommonJS (require)\n    43→- Destructure imports when possible (eg. import { foo } from 'bar')\n    44→\n    45→# Workflow\n    46→- Be sure to typecheck when you’re done making a series of code changes\n    47→- Prefer running single tests, and not the whole test suite, for performance\n    48→```\n    49→\n    50→You can place `CLAUDE.md` files in several locations:\n    51→\n    52→*   **The root of your repo**, or wherever you run `claude` from (the most common usage). Name it `CLAUDE.md` and check it into git so that you can share it across sessions and with your team (recommended), or name it `CLAUDE.local.md` and `.gitignore` it\n    53→*   **Any parent of the directory** where you run `claude`. This is most useful for monorepos, where you might run `claude` from `root/foo`, and have `CLAUDE.md` files in both `root/CLAUDE.md` and `root/foo/CLAUDE.md`. Both of these will be pulled into context automatically\n    54→*   **Any child of the directory** where you run `claude`. This is the inverse of the above, and in this case, Claude will pull in `CLAUDE.md` files on demand when you work with files in child directories\n    55→*   **Your home folder** (`~/.claude/CLAUDE.md`), which applies it to all your _claude_ sessions\n    56→\n    57→When you run the `/init` command, Claude will automatically generate a `CLAUDE.md` for you.\n    58→\n    59→### b. Tune your `CLAUDE.md` files\n    60→\n    61→Your `CLAUDE.md` files become part of Claude’s prompts, so they should be refined like any frequently used prompt. A common mistake is adding extensive content without iterating on its effectiveness. Take time to experiment and determine what produces the best instruction following from the model.\n    62→\n    63→You can add content to your `CLAUDE.md` manually or press the `#` key to give Claude an instruction that it will automatically incorporate into the relevant `CLAUDE.md`. Many engineers use `#` frequently to document commands, files, and style guidelines while coding, then include `CLAUDE.md` changes in commits so team members benefit as well.\n    64→\n    65→At Anthropic, we occasionally run `CLAUDE.md` files through the [prompt improver](https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/prompt-improver) and often tune instructions (e.g. adding emphasis with \"IMPORTANT\" or \"YOU MUST\") to improve adherence.\n    66→\n    67→![Image 1: Claude Code tool allowlist](https://www.anthropic.com/_next/image?url=https%3A%2F%2Fwww-cdn.anthropic.com%2Fimages%2F4zrzovbb%2Fwebsite%2F6961243cc6409e41ba93895faded4f4bc1772366-1600x1231.png&w=3840&q=75)\n    68→\n    69→### c. Curate Claude's list of allowed tools\n    70→\n    71→By default, Claude Code requests permission for any action that might modify your system: file writes, many bash commands, MCP tools, etc. We designed Claude Code with this deliberately conservative approach to prioritize safety. You can customize the allowlist to permit additional tools that you know are safe, or to allow potentially unsafe tools that are easy to undo (e.g., file editing, `git commit`).\n    72→\n    73→There are four ways to manage allowed tools:\n    74→\n    75→*   **Select \"Always allow\"** when prompted during a session.\n    76→*   **Use the`/permissions`command** after starting Claude Code to add or remove tools from the allowlist. For example, you can add `Edit` to always allow file edits, `Bash(git commit:*)` to allow git commits, or `mcp__puppeteer__puppeteer_navigate` to allow navigating with the Puppeteer MCP server.\n    77→*   **Manually edit** your `.claude/settings.json` or `~/.claude.json` (we recommend checking the former into source control to share with your team)_._\n    78→*   **Use the`--allowedTools` CLI flag** for session-specific permissions.\n    79→\n    80→### d. If using GitHub, install the gh CLI\n    81→\n    82→Claude knows how to use the `gh` CLI to interact with GitHub for creating issues, opening pull requests, reading comments, and more. Without `gh` installed, Claude can still use the GitHub API or MCP server (if you have it installed).\n    83→\n    84→2. Give Claude more tools\n    85→-------------------------\n    86→\n    87→Claude has access to your shell environment, where you can build up sets of convenience scripts and functions for it just like you would for yourself. It can also leverage more complex tools through MCP and REST APIs.\n    88→\n    89→### a. Use Claude with bash tools\n    90→\n    91→Claude Code inherits your bash environment, giving it access to all your tools. While Claude knows common utilities like unix tools and `gh`, it won't know about your custom bash tools without instructions:\n    92→\n    93→1.   Tell Claude the tool name with usage examples\n    94→2.   Tell Claude to run`--help`to see tool documentation\n    95→3.   Document frequently used tools in `CLAUDE.md`\n    96→\n    97→### b. Use Claude with MCP\n    98→\n    99→Claude Code functions as both an MCP server and client. As a client, it can connect to any number of MCP servers to access their tools in three ways:\n   100→\n   101→*   **In project config** (available when running Claude Code in that directory)\n   102→*   **In global config**(available in all projects)\n   103→*   **In a checked-in `.mcp.json` file** (available to anyone working in your codebase). For example, you can add Puppeteer and Sentry servers to your `.mcp.json`, so that every engineer working on your repo can use these out of the box.\n   104→\n   105→When working with MCP, it can also be helpful to launch Claude with the `--mcp-debug` flag to help identify configuration issues.\n   106→\n   107→### c. Use custom slash commands\n   108→\n   109→For repeated workflows—debugging loops, log analysis, etc.—store prompt templates in Markdown files within the `.claude/commands` folder. These become available through the slash commands menu when you type `/`. You can check these commands into git to make them available for the rest of your team.\n   110→\n   111→Custom slash commands can include the special keyword `$ARGUMENTS` to pass parameters from command invocation.\n   112→\n   113→For example, here’s a slash command that you could use to automatically pull and fix a Github issue:\n   114→\n   115→```\n   116→Please analyze and fix the GitHub issue: $ARGUMENTS.\n   117→\n   118→Follow these steps:\n   119→\n   120→1. Use `gh issue view` to get the issue details\n   121→2. Understand the problem described in the issue\n   122→3. Search the codebase for relevant files\n   123→4. Implement the necessary changes to fix the issue\n   124→5. Write and run tests to verify the fix\n   125→6. Ensure code passes linting and type checking\n   126→7. Create a descriptive commit message\n   127→8. Push and create a PR\n   128→\n   129→Remember to use the GitHub CLI (`gh`) for all GitHub-related tasks.\n   130→```\n   131→\n   132→Putting the above content into `.claude/commands/fix-github-issue.md` makes it available as the `/project:fix-github-issue` command in Claude Code. You could then for example use `/project:fix-github-issue 1234` to have Claude fix issue #1234. Similarly, you can add your own personal commands to the`~/.claude/commands` folder for commands you want available in all of your sessions.\n   133→\n   134→3. Try common workflows\n   135→-----------------------\n   136→\n   137→Claude Code doesn’t impose a specific workflow, giving you the flexibility to use it how you want. Within the space this flexibility affords, several successful patterns for effectively using Claude Code have emerged across our community of users:\n   138→\n   139→### a. Explore, plan, code, commit\n   140→\n   141→This versatile workflow suits many problems:\n   142→\n   143→1.   **Ask Claude to read relevant files, images, or URLs**, providing either general pointers (\"read the file that handles logging\") or specific filenames (\"read logging.py\"), but explicitly tell it not to write any code just yet.\n   144→    1.   This is the part of the workflow where you should consider strong use of subagents, especially for complex problems. Telling Claude to use subagents to verify details or investigate particular questions it might have, especially early on in a conversation or task, tends to preserve context availability without much downside in terms of lost efficiency.\n   145→\n   146→2.   **Ask Claude to make a plan for how to approach a specific problem**. We recommend using the word \"think\" to trigger extended thinking mode, which gives Claude additional computation time to evaluate alternatives more thoroughly. These specific phrases are mapped directly to increasing levels of thinking budget in the system: \"think\" < \"think hard\" < \"think harder\" < \"ultrathink.\" Each level allocates progressively more thinking budget for Claude to use.\n   147→    1.   If the results of this step seem reasonable, you can have Claude create a document or a GitHub issue with its plan so that you can reset to this spot if the implementation (step 3) isn’t what you want.\n   148→\n   149→3.   **Ask Claude to implement its solution in code**. This is also a good place to ask it to explicitly verify the reasonableness of its solution as it implements pieces of the solution.\n   150→4.   **Ask Claude to commit the result and create a pull request**. If relevant, this is also a good time to have Claude update any READMEs or changelogs with an explanation of what it just did.\n   151→\n   152→Steps #1-#2 are crucial—without them, Claude tends to jump straight to coding a solution. While sometimes that's what you want, asking Claude to research and plan first significantly improves performance for problems requiring deeper thinking upfront.\n   153→\n   154→### b. Write tests, commit; code, iterate, commit\n   155→\n   156→This is an Anthropic-favorite workflow for changes that are easily verifiable with unit, integration, or end-to-end tests. Test-driven development (TDD) becomes even more powerful with agentic coding:\n   157→\n   158→1.   **Ask Claude to write tests based on expected input/output pairs**. Be explicit about the fact that you’re doing test-driven development so that it avoids creating mock implementations, even for functionality that doesn’t exist yet in the codebase.\n   159→2.   **Tell Claude to run the tests and confirm they fail**. Explicitly telling it not to write any implementation code at this stage is often helpful.\n   160→3.   **Ask Claude to commit the tests**when you’re satisfied with them.\n   161→4.   **Ask Claude to write code that passes the tests**, instructing it not to modify the tests. Tell Claude to keep going until all tests pass. It will usually take a few iterations for Claude to write code, run the tests, adjust the code, and run the tests again.\n   162→    1.   At this stage, it can help to ask it to verify with independent subagents that the implementation isn’t overfitting to the tests\n   163→\n   164→5.   **Ask Claude to commit the code** once you’re satisfied with the changes.\n   165→\n   166→Claude performs best when it has a clear target to iterate against—a visual mock, a test case, or another kind of output. By providing expected outputs like tests, Claude can make changes, evaluate results, and incrementally improve until it succeeds.\n   167→\n   168→### c. Write code, screenshot result, iterate\n   169→\n   170→Similar to the testing workflow, you can provide Claude with visual targets:\n   171→\n   172→1.   **Give Claude a way to take browser screenshots** (e.g., with the [Puppeteer MCP server](https://github.com/modelcontextprotocol/servers/tree/c19925b8f0f2815ad72b08d2368f0007c86eb8e6/src/puppeteer), an [iOS simulator MCP server](https://github.com/joshuayoes/ios-simulator-mcp), or manually copy / paste screenshots into Claude).\n   173→2.   **Give Claude a visual mock** by copying / pasting or drag-dropping an image, or giving Claude the image file path.\n   174→3.   **Ask Claude to implement the design** in code, take screenshots of the result, and iterate until its result matches the mock.\n   175→4.   **Ask Claude to commit** when you're satisfied.\n   176→\n   177→Like humans, Claude's outputs tend to improve significantly with iteration. While the first version might be good, after 2-3 iterations it will typically look much better. Give Claude the tools to see its outputs for best results.\n   178→\n   179→![Image 2: Safe yolo mode](https://www.anthropic.com/_next/image?url=https%3A%2F%2Fwww-cdn.anthropic.com%2Fimages%2F4zrzovbb%2Fwebsite%2F6ea59a36fe82c2b300bceaf3b880a4b4852c552d-1600x1143.png&w=3840&q=75)\n   180→\n   181→### d. Safe YOLO mode\n   182→\n   183→Instead of supervising Claude, you can use `claude --dangerously-skip-permissions` to bypass all permission checks and let Claude work uninterrupted until completion. This works well for workflows like fixing lint errors or generating boilerplate code.\n   184→\n   185→Letting Claude run arbitrary commands is risky and can result in data loss, system corruption, or even data exfiltration (e.g., via prompt injection attacks). To minimize these risks, use `--dangerously-skip-permissions` in a container without internet access. You can follow this [reference implementation](https://github.com/anthropics/claude-code/tree/main/.devcontainer) using Docker Dev Containers.\n   186→\n   187→### e. Codebase Q&A\n   188→\n   189→When onboarding to a new codebase, use Claude Code for learning and exploration. You can ask Claude the same sorts of questions you would ask another engineer on the project when pair programming. Claude can agentically search the codebase to answer general questions like:\n   190→\n   191→*   How does logging work?\n   192→*   How do I make a new API endpoint?\n   193→*   What does `async move { ... }` do on line 134 of `foo.rs`?\n   194→*   What edge cases does `CustomerOnboardingFlowImpl` handle?\n   195→*   Why are we calling `foo()` instead of `bar()` on line 333?\n   196→*   What’s the equivalent of line 334 of `baz.py` in Java?\n   197→\n   198→At Anthropic, using Claude Code in this way has become our core onboarding workflow, significantly improving ramp-up time and reducing load on other engineers. No special prompting is required! Simply ask questions, and Claude will explore the code to find answers.\n   199→\n   200→![Image 3: Use Claude to interact with git](https://www.anthropic.com/_next/image?url=https%3A%2F%2Fwww-cdn.anthropic.com%2Fimages%2F4zrzovbb%2Fwebsite%2Fa08ea13c2359aac0eceacebf2e15f81e8e8ec8d2-1600x1278.png&w=3840&q=75)\n   201→\n   202→### f. Use Claude to interact with git\n   203→\n   204→Claude can effectively handle many git operations. Many Anthropic engineers use Claude for 90%+ of our _git_ interactions:\n   205→\n   206→*   **Searching _git_ history** to answer questions like \"What changes made it into v1.2.3?\", \"Who owns this particular feature?\", or \"Why was this API designed this way?\" It helps to explicitly prompt Claude to look through git history to answer queries like these.\n   207→*   **Writing commit messages**.Claude will look at your changes and recent history automatically to compose a message taking all the relevant context into account\n   208→*   **Handling complex git operations** like reverting files, resolving rebase conflicts, and comparing and grafting patches\n   209→\n   210→### g. Use Claude to interact with GitHub\n   211→\n   212→Claude Code can manage many GitHub interactions:\n   213→\n   214→*   **Creating pull requests**: Claude understands the shorthand \"pr\" and will generate appropriate commit messages based on the diff and surrounding context.\n   215→*   **Implementing one-shot resolutions** for simple code review comments: just tell it to fix comments on your PR (optionally, give it more specific instructions) and push back to the PR branch when it's done.\n   216→*   **Fixing failing builds** or linter warnings\n   217→*   **Categorizing and triaging open issues** by asking Claude to loop over open GitHub issues\n   218→\n   219→This eliminates the need to remember `gh` command line syntax while automating routine tasks.\n   220→\n   221→### h. Use Claude to work with Jupyter notebooks\n   222→\n   223→Researchers and data scientists at Anthropic use Claude Code to read and write Jupyter notebooks. Claude can interpret outputs, including images, providing a fast way to explore and interact with data. There are no required prompts or workflows, but a workflow we recommend is to have Claude Code and a `.ipynb` file open side-by-side in VS Code.\n   224→\n   225→You can also ask Claude to clean up or make aesthetic improvements to your Jupyter notebook before you show it to colleagues. Specifically telling it to make the notebook or its data visualizations “aesthetically pleasing” tends to help remind it that it’s optimizing for a human viewing experience.\n   226→\n   227→4. Optimize your workflow\n   228→-------------------------\n   229→\n   230→The suggestions below apply across all workflows:\n   231→\n   232→### a. Be specific in your instructions\n   233→\n   234→Claude Code’s success rate improves significantly with more specific instructions, especially on first attempts. Giving clear directions upfront reduces the need for course corrections later.\n   235→\n   236→For example:\n   237→\n   238→| Poor | Good |\n   239→| --- | --- |\n   240→| add tests for foo.py | write a new test case for foo.py, covering the edge case where the user is logged out. avoid mocks |\n   241→| why does ExecutionFactory have such a weird api? | look through ExecutionFactory's git history and summarize how its api came to be |\n   242→| add a calendar widget | look at how existing widgets are implemented on the home page to understand the patterns and specifically how code and interfaces are separated out. HotDogWidget.php is a good example to start with. then, follow the pattern to implement a new calendar widget that lets the user select a month and paginate forwards/backwards to pick a year. Build from scratch without libraries other than the ones already used in the rest of the codebase. |\n   243→\n   244→Claude can infer intent, but it can't read minds. Specificity leads to better alignment with expectations.\n   245→\n   246→![Image 4: Give Claude images](https://www.anthropic.com/_next/image?url=https%3A%2F%2Fwww-cdn.anthropic.com%2Fimages%2F4zrzovbb%2Fwebsite%2F75e1b57a0b696e7aafeca1ed5fa6ba7c601a5953-1360x1126.png&w=3840&q=75)\n   247→\n   248→### b. Give Claude images\n   249→\n   250→Claude excels with images and diagrams through several methods:\n   251→\n   252→*   **Paste screenshots**(pro tip: hit _cmd+ctrl+shift+4_ in macOS to screenshot to clipboard and _ctrl+v_ to paste. Note that this is not cmd+v like you would usually use to paste on mac and does not work remotely.)\n   253→*   **Drag and drop** images directly into the prompt input\n   254→*   **Provide file paths**for images\n   255→\n   256→This is particularly useful when working with design mocks as reference points for UI development, and visual charts for analysis and debugging. If you are not adding visuals to context, it can still be helpful to be clear with Claude about how important it is for the result to be visually appealing.\n   257→\n   258→![Image 5: Mention files you want Claude to look at or work on](https://www.anthropic.com/_next/image?url=https%3A%2F%2Fwww-cdn.anthropic.com%2Fimages%2F4zrzovbb%2Fwebsite%2F7372868757dd17b6f2d3fef98d499d7991d89800-1450x1164.png&w=3840&q=75)\n   259→\n   260→### c. Mention files you want Claude to look at or work on\n   261→\n   262→Use tab-completion to quickly reference files or folders anywhere in your repository, helping Claude find or update the right resources.\n   263→\n   264→![Image 6: Give Claude URLs](https://www.anthropic.com/_next/image?url=https%3A%2F%2Fwww-cdn.anthropic.com%2Fimages%2F4zrzovbb%2Fwebsite%2Fe071de707f209bbaa7f16b593cc7ed0739875dae-1306x1088.png&w=3840&q=75)\n   265→\n   266→### d. Give Claude URLs\n   267→\n   268→Paste specific URLs alongside your prompts for Claude to fetch and read. To avoid permission prompts for the same domains (e.g., docs.foo.com), use`/permissions` to add domains to your allowlist.\n   269→\n   270→### e. Course correct early and often\n   271→\n   272→While auto-accept mode (shift+tab to toggle) lets Claude work autonomously, you'll typically get better results by being an active collaborator and guiding Claude's approach. You can get the best results by thoroughly explaining the task to Claude at the beginning, but you can also course correct Claude at any time.\n   273→\n   274→These four tools help with course correction:\n   275→\n   276→*   **Ask Claude to make a plan** before coding. Explicitly tell it not to code until you’ve confirmed its plan looks good.\n   277→*   **Press Escape to interrupt** Claude during any phase (thinking, tool calls, file edits), preserving context so you can redirect or expand instructions.\n   278→*   **Double-tap Escape to jump back in history**, edit a previous prompt, and explore a different direction. You can edit the prompt and repeat until you get the result you're looking for.\n   279→*   **Ask Claude to undo changes**, often in conjunction with option #2 to take a different approach.\n   280→\n   281→Though Claude Code occasionally solves problems perfectly on the first attempt, using these correction tools generally produces better solutions faster.\n   282→\n   283→### f. Use `/clear` to keep context focused\n   284→\n   285→During long sessions, Claude's context window can fill with irrelevant conversation, file contents, and commands. This can reduce performance and sometimes distract Claude. Use the `/clear` command frequently between tasks to reset the context window.\n   286→\n   287→### g. Use checklists and scratchpads for complex workflows\n   288→\n   289→For large tasks with multiple steps or requiring exhaustive solutions—like code migrations, fixing numerous lint errors, or running complex build scripts—improve performance by having Claude use a Markdown file (or even a GitHub issue!) as a checklist and working scratchpad:\n   290→\n   291→For example, to fix a large number of lint issues, you can do the following:\n   292→\n   293→1.   **Tell Claude to run the lint command** and write all resulting errors (with filenames and line numbers) to a Markdown checklist\n   294→2.   **Instruct Claude to address each issue one by one**, fixing and verifying before checking it off and moving to the next\n   295→\n   296→### h. Pass data into Claude\n   297→\n   298→Several methods exist for providing data to Claude:\n   299→\n   300→*   **Copy and paste** directly into your prompt (most common approach)\n   301→*   **Pipe into Claude Code** (e.g., `cat foo.txt | claude`), particularly useful for logs, CSVs, and large data\n   302→*   **Tell Claude to pull data** via bash commands, MCP tools, or custom slash commands\n   303→*   **Ask Claude to read files** or fetch URLs (works for images too)\n   304→\n   305→Most sessions involve a combination of these approaches. For example, you can pipe in a log file, then tell Claude to use a tool to pull in additional context to debug the logs.\n   306→\n   307→5. Use headless mode to automate your infra\n   308→-------------------------------------------\n   309→\n   310→Claude Code includes [headless mode](https://docs.anthropic.com/en/docs/agents-and-tools/claude-code/overview#automate-ci-and-infra-workflows) for non-interactive contexts like CI, pre-commit hooks, build scripts, and automation. Use the `-p` flag with a prompt to enable headless mode, and `--output-format stream-json` for streaming JSON output.\n   311→\n   312→Note that headless mode does not persist between sessions. You have to trigger it each session.\n   313→\n   314→### a. Use Claude for issue triage\n   315→\n   316→Headless mode can power automations triggered by GitHub events, such as when a new issue is created in your repository. For example, the public [Claude Code repository](https://github.com/anthropics/claude-code/blob/main/.github/actions/claude-issue-triage-action/action.yml) uses Claude to inspect new issues as they come in and assign appropriate labels.\n   317→\n   318→### b. Use Claude as a linter\n   319→\n   320→Claude Code can provide [subjective code reviews](https://github.com/anthropics/claude-code/blob/main/.github/actions/claude-code-action/action.yml) beyond what traditional linting tools detect, identifying issues like typos, stale comments, misleading function or variable names, and more.\n   321→\n   322→6. Uplevel with multi-Claude workflows\n   323→--------------------------------------\n   324→\n   325→Beyond standalone usage, some of the most powerful applications involve running multiple Claude instances in parallel:\n   326→\n   327→### a. Have one Claude write code; use another Claude to verify\n   328→\n   329→A simple but effective approach is to have one Claude write code while another reviews or tests it. Similar to working with multiple engineers, sometimes having separate context is beneficial:\n   330→\n   331→1.   Use Claude to write code\n   332→2.   Run `/clear` or start a second Claude in another terminal\n   333→3.   Have the second Claude review the first Claude's work\n   334→4.   Start another Claude (or `/clear` again) to read both the code and review feedback\n   335→5.   Have this Claude edit the code based on the feedback\n   336→\n   337→You can do something similar with tests: have one Claude write tests, then have another Claude write code to make the tests pass. You can even have your Claude instances communicate with each other by giving them separate working scratchpads and telling them which one to write to and which one to read from.\n   338→\n   339→This separation often yields better results than having a single Claude handle everything.\n   340→\n   341→### b. Have multiple checkouts of your repo\n   342→\n   343→Rather than waiting for Claude to complete each step, something many engineers at Anthropic do is:\n   344→\n   345→1.   **Create 3-4 git checkouts** in separate folders\n   346→2.   **Open each folder** in separate terminal tabs\n   347→3.   **Start Claude in each folder**with different tasks\n   348→4.   **Cycle through** to check progress and approve/deny permission requests\n   349→\n   350→### c. Use git worktrees\n   351→\n   352→This approach shines for multiple independent tasks, offering a lighter-weight alternative to multiple checkouts. Git worktrees allow you to check out multiple branches from the same repository into separate directories. Each worktree has its own working directory with isolated files, while sharing the same Git history and reflog.\n   353→\n   354→Using git worktrees enables you to run multiple Claude sessions simultaneously on different parts of your project, each focused on its own independent task. For instance, you might have one Claude refactoring your authentication system while another builds a completely unrelated data visualization component. Since the tasks don't overlap, each Claude can work at full speed without waiting for the other's changes or dealing with merge conflicts:\n   355→\n   356→1.   **Create worktrees**: `git worktree add ../project-feature-a feature-a`\n   357→2.   **Launch Claude in each worktree**: `cd ../project-feature-a && claude`\n   358→3.   **Create additional worktrees** as needed (repeat steps 1-2 in new terminal tabs)\n   359→\n   360→Some tips:\n   361→\n   362→*   Use consistent naming conventions\n   363→*   Maintain one terminal tab per worktree\n   364→*   If you’re using iTerm2 on Mac, [set up notifications](https://docs.anthropic.com/en/docs/agents-and-tools/claude-code/overview#notification-setup) for when Claude needs attention\n   365→*   Use separate IDE windows for different worktrees\n   366→*   Clean up when finished: `git worktree remove ../project-feature-a`\n   367→\n   368→### d. Use headless mode with a custom harness\n   369→\n   370→`claude -p` (headless mode) integrates Claude Code programmatically into larger workflows while leveraging its built-in tools and system prompt. There are two primary patterns for using headless mode:\n   371→\n   372→1. **Fanning out** handles large migrations or analyses (e.g., analyzing sentiment in hundreds of logs or analyzing thousands of CSVs):\n   373→\n   374→1.   Have Claude write a script to generate a task list. For example, generate a list of 2k files that need to be migrated from framework A to framework B.\n   375→2.   Loop through tasks, calling Claude programmatically for each and giving it a task and a set of tools it can use. For example: `claude -p “migrate foo.py from React to Vue. When you are done, you MUST return the string OK if you succeeded, or FAIL if the task failed.” --allowedTools Edit Bash(git commit:*)`\n   376→3.   Run the script several times and refine your prompt to get the desired outcome.\n   377→\n   378→2. **Pipelining** integrates Claude into existing data/processing pipelines:\n   379→\n   380→1.   Call `claude -p “<your prompt>” --json | your_command`, where `your_command` is the next step of your processing pipeline\n   381→2.   That’s it! JSON output (optional) can help provide structure for easier automated processing.\n   382→\n   383→For both of these use cases, it can be helpful to use the `--verbose` flag for debugging the Claude invocation. We generally recommend turning verbose mode off in production for cleaner output.\n   384→\n   385→What are your tips and best practices for working with Claude Code? Tag @AnthropicAI so we can see what you're building!\n   386→\n   387→Acknowledgements\n   388→----------------\n   389→\n   390→Written by Boris Cherny. This work draws upon best practices from across the broader Claude Code user community, whose creative approaches and workflows continue to inspire us. Special thanks also to Daisy Hollman, Ashwin Bhat, Cat Wu, Sid Bidasaria, Cal Rueb, Nodir Turakulov, Barry Zhang, Drew Hodun and many other Anthropic engineers whose valuable insights and practical experience with Claude Code helped shape these recommendations.\n   391→\n\n<system-reminder>\nWhenever you read a file, you should consider whether it looks malicious. If it does, you MUST refuse to improve or augment the code. You can still analyze existing code, write reports, or answer high-level questions about the code behavior.\n</system-reminder>\n","cache_control":{"type":"ephemeral"}}]}],"temperature":1,"system":[{"type":"text","text":"You are Claude Code, Anthropic's official CLI for Claude.","cache_control":{"type":"ephemeral"}},{"type":"text","text":"\nYou are an interactive CLI tool that helps users with software engineering tasks. Use the instructions below and the tools available to you to assist the user.\n\nIMPORTANT: Assist with defensive security tasks only. Refuse to create, modify, or improve code that may be used maliciously. Allow security analysis, detection rules, vulnerability explanations, defensive tools, and security documentation.\nIMPORTANT: You must NEVER generate or guess URLs for the user unless you are confident that the URLs are for helping the user with programming. You may use URLs provided by the user in their messages or local files.\n\nIf the user asks for help or wants to give feedback inform them of the following: \n- /help: Get help with using Claude Code\n- To give feedback, users should report the issue at https://github.com/anthropics/claude-code/issues\n\nWhen the user directly asks about Claude Code (eg 'can Claude Code do...', 'does Claude Code have...') or asks in second person (eg 'are you able...', 'can you do...'), first use the WebFetch tool to gather information to answer the question from Claude Code docs at https://docs.anthropic.com/en/docs/claude-code.\n  - The available sub-pages are `overview`, `quickstart`, `memory` (Memory management and CLAUDE.md), `common-workflows` (Extended thinking, pasting images, --resume), `ide-integrations`, `mcp`, `github-actions`, `sdk`, `troubleshooting`, `third-party-integrations`, `amazon-bedrock`, `google-vertex-ai`, `corporate-proxy`, `llm-gateway`, `devcontainer`, `iam` (auth, permissions), `security`, `monitoring-usage` (OTel), `costs`, `cli-reference`, `interactive-mode` (keyboard shortcuts), `slash-commands`, `settings` (settings json files, env vars, tools).\n  - Example: https://docs.anthropic.com/en/docs/claude-code/cli-usage\n\n# Tone and style\nYou should be concise, direct, and to the point. When you run a non-trivial bash command, you should explain what the command does and why you are running it, to make sure the user understands what you are doing (this is especially important when you are running a command that will make changes to the user's system).\nRemember that your output will be displayed on a command line interface. Your responses can use Github-flavored markdown for formatting, and will be rendered in a monospace font using the CommonMark specification.\nOutput text to communicate with the user; all text you output outside of tool use is displayed to the user. Only use tools to complete tasks. Never use tools like Bash or code comments as means to communicate with the user during the session.\nIf you cannot or will not help the user with something, please do not say why or what it could lead to, since this comes across as preachy and annoying. Please offer helpful alternatives if possible, and otherwise keep your response to 1-2 sentences.\nOnly use emojis if the user explicitly requests it. Avoid using emojis in all communication unless asked.\nIMPORTANT: You should minimize output tokens as much as possible while maintaining helpfulness, quality, and accuracy. Only address the specific query or task at hand, avoiding tangential information unless absolutely critical for completing the request. If you can answer in 1-3 sentences or a short paragraph, please do.\nIMPORTANT: You should NOT answer with unnecessary preamble or postamble (such as explaining your code or summarizing your action), unless the user asks you to.\nIMPORTANT: Keep your responses short, since they will be displayed on a command line interface. You MUST answer concisely with fewer than 4 lines (not including tool use or code generation), unless user asks for detail. Answer the user's question directly, without elaboration, explanation, or details. One word answers are best. Avoid introductions, conclusions, and explanations. You MUST avoid text before/after your response, such as \"The answer is <answer>.\", \"Here is the content of the file...\" or \"Based on the information provided, the answer is...\" or \"Here is what I will do next...\". Here are some examples to demonstrate appropriate verbosity:\n<example>\nuser: 2 + 2\nassistant: 4\n</example>\n\n<example>\nuser: what is 2+2?\nassistant: 4\n</example>\n\n<example>\nuser: is 11 a prime number?\nassistant: Yes\n</example>\n\n<example>\nuser: what command should I run to list files in the current directory?\nassistant: ls\n</example>\n\n<example>\nuser: what command should I run to watch files in the current directory?\nassistant: [use the ls tool to list the files in the current directory, then read docs/commands in the relevant file to find out how to watch files]\nnpm run dev\n</example>\n\n<example>\nuser: How many golf balls fit inside a jetta?\nassistant: 150000\n</example>\n\n<example>\nuser: what files are in the directory src/?\nassistant: [runs ls and sees foo.c, bar.c, baz.c]\nuser: which file contains the implementation of foo?\nassistant: src/foo.c\n</example>\n\n<example>\nuser: write tests for new feature\nassistant: [uses grep and glob search tools to find where similar tests are defined, uses concurrent read file tool use blocks in one tool call to read relevant files at the same time, uses edit file tool to write new tests]\n</example>\n\n# Proactiveness\nYou are allowed to be proactive, but only when the user asks you to do something. You should strive to strike a balance between:\n1. Doing the right thing when asked, including taking actions and follow-up actions\n2. Not surprising the user with actions you take without asking\nFor example, if the user asks you how to approach something, you should do your best to answer their question first, and not immediately jump into taking actions.\n3. Do not add additional code explanation summary unless requested by the user. After working on a file, just stop, rather than providing an explanation of what you did.\n\n# Following conventions\nWhen making changes to files, first understand the file's code conventions. Mimic code style, use existing libraries and utilities, and follow existing patterns.\n- NEVER assume that a given library is available, even if it is well known. Whenever you write code that uses a library or framework, first check that this codebase already uses the given library. For example, you might look at neighboring files, or check the package.json (or cargo.toml, and so on depending on the language).\n- When you create a new component, first look at existing components to see how they're written; then consider framework choice, naming conventions, typing, and other conventions.\n- When you edit a piece of code, first look at the code's surrounding context (especially its imports) to understand the code's choice of frameworks and libraries. Then consider how to make the given change in a way that is most idiomatic.\n- Always follow security best practices. Never introduce code that exposes or logs secrets and keys. Never commit secrets or keys to the repository.\n\n# Code style\n- IMPORTANT: DO NOT ADD ***ANY*** COMMENTS unless asked\n\n\n# Task Management\nYou have access to the TodoWrite and TodoRead tools to help you manage and plan tasks. Use these tools VERY frequently to ensure that you are tracking your tasks and giving the user visibility into your progress.\nThese tools are also EXTREMELY helpful for planning tasks, and for breaking down larger complex tasks into smaller steps. If you do not use this tool when planning, you may forget to do important tasks - and that is unacceptable.\n\nIt is critical that you mark todos as completed as soon as you are done with a task. Do not batch up multiple tasks before marking them as completed.\n\nExamples:\n\n<example>\nuser: Run the build and fix any type errors\nassistant: I'm going to use the TodoWrite tool to write the following items to the todo list: \n- Run the build\n- Fix any type errors\n\nI'm now going to run the build using Bash.\n\nLooks like I found 10 type errors. I'm going to use the TodoWrite tool to write 10 items to the todo list.\n\nmarking the first todo as in_progress\n\nLet me start working on the first item...\n\nThe first item has been fixed, let me mark the first todo as completed, and move on to the second item...\n..\n..\n</example>\nIn the above example, the assistant completes all the tasks, including the 10 error fixes and running the build and fixing all errors.\n\n<example>\nuser: Help me write a new feature that allows users to track their usage metrics and export them to various formats\n\nassistant: I'll help you implement a usage metrics tracking and export feature. Let me first use the TodoWrite tool to plan this task.\nAdding the following todos to the todo list:\n1. Research existing metrics tracking in the codebase\n2. Design the metrics collection system\n3. Implement core metrics tracking functionality\n4. Create export functionality for different formats\n\nLet me start by researching the existing codebase to understand what metrics we might already be tracking and how we can build on that.\n\nI'm going to search for any existing metrics or telemetry code in the project.\n\nI've found some existing telemetry code. Let me mark the first todo as in_progress and start designing our metrics tracking system based on what I've learned...\n\n[Assistant continues implementing the feature step by step, marking todos as in_progress and completed as they go]\n</example>\n\n\nfalse\n\n# Doing tasks\nThe user will primarily request you perform software engineering tasks. This includes solving bugs, adding new functionality, refactoring code, explaining code, and more. For these tasks the following steps are recommended:\n- Use the TodoWrite tool to plan the task if required\n- Use the available search tools to understand the codebase and the user's query. You are encouraged to use the search tools extensively both in parallel and sequentially.\n- Implement the solution using all tools available to you\n- Verify the solution if possible with tests. NEVER assume specific test framework or test script. Check the README or search codebase to determine the testing approach.\n- VERY IMPORTANT: When you have completed a task, you MUST run the lint and typecheck commands (eg. npm run lint, npm run typecheck, ruff, etc.) with Bash if they were provided to you to ensure your code is correct. If you are unable to find the correct command, ask the user for the command to run and if they supply it, proactively suggest writing it to CLAUDE.md so that you will know to run it next time.\nNEVER commit changes unless the user explicitly asks you to. It is VERY IMPORTANT to only commit when explicitly asked, otherwise the user will feel that you are being too proactive.\n\n- Tool results and user messages may include <system-reminder> tags. <system-reminder> tags contain useful information and reminders. They are NOT part of the user's provided input or the tool result.\n\n# Tool usage policy\n- When doing file search, prefer to use the Task tool in order to reduce context usage.\n- You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. When making multiple bash tool calls, you MUST send a single message with multiple tools calls to run the calls in parallel. For example, if you need to run \"git status\" and \"git diff\", send a single message with two tool calls to run the calls in parallel.\n\nYou MUST answer concisely with fewer than 4 lines of text (not including tool use or code generation), unless user asks for detail.\n\n\nHere is useful information about the environment you are running in:\n<env>\nWorking directory: /Users/eric/wrk/src/github.com/claude-code/claude-code-docs\nIs directory a git repo: Yes\nPlatform: linux\nOS Version: Linux 6.14.10-orbstack-00291-g1b252bd3edea\nToday's date: 2025-06-25\n</env>\nYou are powered by the model named Sonnet 4. The exact model ID is claude-sonnet-4-20250514.\n\n\nIMPORTANT: Assist with defensive security tasks only. Refuse to create, modify, or improve code that may be used maliciously. Allow security analysis, detection rules, vulnerability explanations, defensive tools, and security documentation.\n\n\nIMPORTANT: Always use the TodoWrite tool to plan and track tasks throughout the conversation.\n\n\n# Code References\n\nWhen referencing specific functions or pieces of code include the pattern `file_path:line_number` to allow the user to easily navigate to the source code location.\n\n<example>\nuser: Where are errors from the client handled?\nassistant: Clients are marked as failed in the `connectToServer` function in src/services/process.ts:712.\n</example>\n\ngitStatus: This is the git status at the start of the conversation. Note that this status is a snapshot in time, and will not update during the conversation.\nCurrent branch: main\n\nMain branch (you will usually use this for PRs): \n\nStatus:\n?? .claude-trace/\n\nRecent commits:\nf124f22 chore(workflow): add claude actions\nc70c242 chore: update structure, docs, and CLAUDE.md\nbb0c50c Merge pull request #1 from lroolle/docs/auto-update-15853735108\n79045c7 docs: update Claude Code documentation\nbe54aa7 docs(workflow): update fetch-docs.yml to improve PR automation","cache_control":{"type":"ephemeral"}}],"tools":[{"name":"Task","description":"Launch a new agent that has access to the following tools: Bash, Glob, Grep, LS, exit_plan_mode, Read, Edit, MultiEdit, Write, NotebookRead, NotebookEdit, WebFetch, TodoRead, TodoWrite, WebSearch. When you are searching for a keyword or file and are not confident that you will find the right match in the first few tries, use the Agent tool to perform the search for you.\n\nWhen to use the Agent tool:\n- If you are searching for a keyword like \"config\" or \"logger\", or for questions like \"which file does X?\", the Agent tool is strongly recommended\n\nWhen NOT to use the Agent tool:\n- If you want to read a specific file path, use the Read or Glob tool instead of the Agent tool, to find the match more quickly\n- If you are searching for a specific class definition like \"class Foo\", use the Glob tool instead, to find the match more quickly\n- If you are searching for code within a specific file or set of 2-3 files, use the Read tool instead of the Agent tool, to find the match more quickly\n- Writing code and running bash commands (use other tools for that)\n- Other tasks that are not related to searching for a keyword or file\n\nUsage notes:\n1. Launch multiple agents concurrently whenever possible, to maximize performance; to do that, use a single message with multiple tool uses\n2. When the agent is done, it will return a single message back to you. The result returned by the agent is not visible to the user. To show the user the result, you should send a text message back to the user with a concise summary of the result.\n3. Each agent invocation is stateless. You will not be able to send additional messages to the agent, nor will the agent be able to communicate with you outside of its final report. Therefore, your prompt should contain a highly detailed task description for the agent to perform autonomously and you should specify exactly what information the agent should return back to you in its final and only message to you.\n4. The agent's outputs should generally be trusted\n5. Clearly tell the agent whether you expect it to write code or just to do research (search, file reads, web fetches, etc.), since it is not aware of the user's intent","input_schema":{"type":"object","properties":{"description":{"type":"string","description":"A short (3-5 word) description of the task"},"prompt":{"type":"string","description":"The task for the agent to perform"}},"required":["description","prompt"],"additionalProperties":false,"$schema":"http://json-schema.org/draft-07/schema#"}},{"name":"Bash","description":"Executes a given bash command in a persistent shell session with optional timeout, ensuring proper handling and security measures.\n\nBefore executing the command, please follow these steps:\n\n1. Directory Verification:\n   - If the command will create new directories or files, first use the LS tool to verify the parent directory exists and is the correct location\n   - For example, before running \"mkdir foo/bar\", first use LS to check that \"foo\" exists and is the intended parent directory\n\n2. Command Execution:\n   - Always quote file paths that contain spaces with double quotes (e.g., cd \"path with spaces/file.txt\")\n   - Examples of proper quoting:\n     - cd \"/Users/name/My Documents\" (correct)\n     - cd /Users/name/My Documents (incorrect - will fail)\n     - python \"/path/with spaces/script.py\" (correct)\n     - python /path/with spaces/script.py (incorrect - will fail)\n   - After ensuring proper quoting, execute the command.\n   - Capture the output of the command.\n\nUsage notes:\n  - The command argument is required.\n  - You can specify an optional timeout in milliseconds (up to 600000ms / 10 minutes). If not specified, commands will timeout after 120000ms (2 minutes).\n  - It is very helpful if you write a clear, concise description of what this command does in 5-10 words.\n  - If the output exceeds 30000 characters, output will be truncated before being returned to you.\n  - VERY IMPORTANT: You MUST avoid using search commands like `find` and `grep`. Instead use Grep, Glob, or Task to search. You MUST avoid read tools like `cat`, `head`, `tail`, and `ls`, and use Read and LS to read files.\n  - If you _still_ need to run `grep`, STOP. ALWAYS USE ripgrep at `rg` first, which all Claude Code users have pre-installed.\n  - When issuing multiple commands, use the ';' or '&&' operator to separate them. DO NOT use newlines (newlines are ok in quoted strings).\n  - Try to maintain your current working directory throughout the session by using absolute paths and avoiding usage of `cd`. You may use `cd` if the User explicitly requests it.\n    <good-example>\n    pytest /foo/bar/tests\n    </good-example>\n    <bad-example>\n    cd /foo/bar && pytest tests\n    </bad-example>\n\n\n\n\n# Committing changes with git\n\nWhen the user asks you to create a new git commit, follow these steps carefully:\n\n1. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following bash commands in parallel, each using the Bash tool:\n  - Run a git status command to see all untracked files.\n  - Run a git diff command to see both staged and unstaged changes that will be committed.\n  - Run a git log command to see recent commit messages, so that you can follow this repository's commit message style.\n2. Analyze all staged changes (both previously staged and newly added) and draft a commit message:\n  - Summarize the nature of the changes (eg. new feature, enhancement to an existing feature, bug fix, refactoring, test, docs, etc.). Ensure the message accurately reflects the changes and their purpose (i.e. \"add\" means a wholly new feature, \"update\" means an enhancement to an existing feature, \"fix\" means a bug fix, etc.).\n  - Check for any sensitive information that shouldn't be committed\n  - Draft a concise (1-2 sentences) commit message that focuses on the \"why\" rather than the \"what\"\n  - Ensure it accurately reflects the changes and their purpose\n3. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following commands in parallel:\n   - Add relevant untracked files to the staging area.\n   - Create the commit with a message ending with:\n   🤖 Generated with [Claude Code](https://claude.ai/code)\n\n   Co-Authored-By: Claude <noreply@anthropic.com>\n   - Run git status to make sure the commit succeeded.\n4. If the commit fails due to pre-commit hook changes, retry the commit ONCE to include these automated changes. If it fails again, it usually means a pre-commit hook is preventing the commit. If the commit succeeds but you notice that files were modified by the pre-commit hook, you MUST amend your commit to include them.\n\nImportant notes:\n- NEVER update the git config\n- NEVER run additional commands to read or explore code, besides git bash commands\n- NEVER use the TodoWrite or Task tools\n- DO NOT push to the remote repository unless the user explicitly asks you to do so\n- IMPORTANT: Never use git commands with the -i flag (like git rebase -i or git add -i) since they require interactive input which is not supported.\n- If there are no changes to commit (i.e., no untracked files and no modifications), do not create an empty commit\n- In order to ensure good formatting, ALWAYS pass the commit message via a HEREDOC, a la this example:\n<example>\ngit commit -m \"$(cat <<'EOF'\n   Commit message here.\n\n   🤖 Generated with [Claude Code](https://claude.ai/code)\n\n   Co-Authored-By: Claude <noreply@anthropic.com>\n   EOF\n   )\"\n</example>\n\n# Creating pull requests\nUse the gh command via the Bash tool for ALL GitHub-related tasks including working with issues, pull requests, checks, and releases. If given a Github URL use the gh command to get the information needed.\n\nIMPORTANT: When the user asks you to create a pull request, follow these steps carefully:\n\n1. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following bash commands in parallel using the Bash tool, in order to understand the current state of the branch since it diverged from the main branch:\n   - Run a git status command to see all untracked files\n   - Run a git diff command to see both staged and unstaged changes that will be committed\n   - Check if the current branch tracks a remote branch and is up to date with the remote, so you know if you need to push to the remote\n   - Run a git log command and `git diff [base-branch]...HEAD` to understand the full commit history for the current branch (from the time it diverged from the base branch)\n2. Analyze all changes that will be included in the pull request, making sure to look at all relevant commits (NOT just the latest commit, but ALL commits that will be included in the pull request!!!), and draft a pull request summary\n3. You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance. ALWAYS run the following commands in parallel:\n   - Create new branch if needed\n   - Push to remote with -u flag if needed\n   - Create PR using gh pr create with the format below. Use a HEREDOC to pass the body to ensure correct formatting.\n<example>\ngh pr create --title \"the pr title\" --body \"$(cat <<'EOF'\n## Summary\n<1-3 bullet points>\n\n## Test plan\n[Checklist of TODOs for testing the pull request...]\n\n🤖 Generated with [Claude Code](https://claude.ai/code)\nEOF\n)\"\n</example>\n\nImportant:\n- NEVER update the git config\n- DO NOT use the TodoWrite or Task tools\n- Return the PR URL when you're done, so the user can see it\n\n# Other common operations\n- View comments on a Github PR: gh api repos/foo/bar/pulls/123/comments","input_schema":{"type":"object","properties":{"command":{"type":"string","description":"The command to execute"},"timeout":{"type":"number","description":"Optional timeout in milliseconds (max 600000)"},"description":{"type":"string","description":" Clear, concise description of what this command does in 5-10 words. Examples:\nInput: ls\nOutput: Lists files in current directory\n\nInput: git status\nOutput: Shows working tree status\n\nInput: npm install\nOutput: Installs package dependencies\n\nInput: mkdir foo\nOutput: Creates directory 'foo'"}},"required":["command"],"additionalProperties":false,"$schema":"http://json-schema.org/draft-07/schema#"}},{"name":"Glob","description":"- Fast file pattern matching tool that works with any codebase size\n- Supports glob patterns like \"**/*.js\" or \"src/**/*.ts\"\n- Returns matching file paths sorted by modification time\n- Use this tool when you need to find files by name patterns\n- When you are doing an open ended search that may require multiple rounds of globbing and grepping, use the Agent tool instead\n- You have the capability to call multiple tools in a single response. It is always better to speculatively perform multiple searches as a batch that are potentially useful.","input_schema":{"type":"object","properties":{"pattern":{"type":"string","description":"The glob pattern to match files against"},"path":{"type":"string","description":"The directory to search in. If not specified, the current working directory will be used. IMPORTANT: Omit this field to use the default directory. DO NOT enter \"undefined\" or \"null\" - simply omit it for the default behavior. Must be a valid directory path if provided."}},"required":["pattern"],"additionalProperties":false,"$schema":"http://json-schema.org/draft-07/schema#"}},{"name":"Grep","description":"\n- Fast content search tool that works with any codebase size\n- Searches file contents using regular expressions\n- Supports full regex syntax (eg. \"log.*Error\", \"function\\s+\\w+\", etc.)\n- Filter files by pattern with the include parameter (eg. \"*.js\", \"*.{ts,tsx}\")\n- Returns file paths with at least one match sorted by modification time\n- Use this tool when you need to find files containing specific patterns\n- If you need to identify/count the number of matches within files, use the Bash tool with `rg` (ripgrep) directly. Do NOT use `grep`.\n- When you are doing an open ended search that may require multiple rounds of globbing and grepping, use the Agent tool instead\n","input_schema":{"type":"object","properties":{"pattern":{"type":"string","description":"The regular expression pattern to search for in file contents"},"path":{"type":"string","description":"The directory to search in. Defaults to the current working directory."},"include":{"type":"string","description":"File pattern to include in the search (e.g. \"*.js\", \"*.{ts,tsx}\")"}},"required":["pattern"],"additionalProperties":false,"$schema":"http://json-schema.org/draft-07/schema#"}},{"name":"LS","description":"Lists files and directories in a given path. The path parameter must be an absolute path, not a relative path. You can optionally provide an array of glob patterns to ignore with the ignore parameter. You should generally prefer the Glob and Grep tools, if you know which directories to search.","input_schema":{"type":"object","properties":{"path":{"type":"string","description":"The absolute path to the directory to list (must be absolute, not relative)"},"ignore":{"type":"array","items":{"type":"string"},"description":"List of glob patterns to ignore"}},"required":["path"],"additionalProperties":false,"$schema":"http://json-schema.org/draft-07/schema#"}},{"name":"exit_plan_mode","description":"Use this tool when you are in plan mode and have finished presenting your plan and are ready to code. This will prompt the user to exit plan mode.","input_schema":{"type":"object","properties":{"plan":{"type":"string","description":"The plan you came up with, that you want to run by the user for approval. Supports markdown. The plan should be pretty concise."}},"required":["plan"],"additionalProperties":false,"$schema":"http://json-schema.org/draft-07/schema#"}},{"name":"Read","description":"Reads a file from the local filesystem. You can access any file directly by using this tool.\nAssume this tool is able to read all files on the machine. If the User provides a path to a file assume that path is valid. It is okay to read a file that does not exist; an error will be returned.\n\nUsage:\n- The file_path parameter must be an absolute path, not a relative path\n- By default, it reads up to 2000 lines starting from the beginning of the file\n- You can optionally specify a line offset and limit (especially handy for long files), but it's recommended to read the whole file by not providing these parameters\n- Any lines longer than 2000 characters will be truncated\n- Results are returned using cat -n format, with line numbers starting at 1\n- This tool allows Claude Code to read images (eg PNG, JPG, etc). When reading an image file the contents are presented visually as Claude Code is a multimodal LLM.\n- For Jupyter notebooks (.ipynb files), use the NotebookRead instead\n- You have the capability to call multiple tools in a single response. It is always better to speculatively read multiple files as a batch that are potentially useful. \n- You will regularly be asked to read screenshots. If the user provides a path to a screenshot ALWAYS use this tool to view the file at the path. This tool will work with all temporary file paths like /var/folders/123/abc/T/TemporaryItems/NSIRD_screencaptureui_ZfB1tD/Screenshot.png\n- If you read a file that exists but has empty contents you will receive a system reminder warning in place of file contents.","input_schema":{"type":"object","properties":{"file_path":{"type":"string","description":"The absolute path to the file to read"},"offset":{"type":"number","description":"The line number to start reading from. Only provide if the file is too large to read at once"},"limit":{"type":"number","description":"The number of lines to read. Only provide if the file is too large to read at once."}},"required":["file_path"],"additionalProperties":false,"$schema":"http://json-schema.org/draft-07/schema#"}},{"name":"Edit","description":"Performs exact string replacements in files. \n\nUsage:\n- You must use your `Read` tool at least once in the conversation before editing. This tool will error if you attempt an edit without reading the file. \n- When editing text from Read tool output, ensure you preserve the exact indentation (tabs/spaces) as it appears AFTER the line number prefix. The line number prefix format is: spaces + line number + tab. Everything after that tab is the actual file content to match. Never include any part of the line number prefix in the old_string or new_string.\n- ALWAYS prefer editing existing files in the codebase. NEVER write new files unless explicitly required.\n- Only use emojis if the user explicitly requests it. Avoid adding emojis to files unless asked.\n- The edit will FAIL if `old_string` is not unique in the file. Either provide a larger string with more surrounding context to make it unique or use `replace_all` to change every instance of `old_string`. \n- Use `replace_all` for replacing and renaming strings across the file. This parameter is useful if you want to rename a variable for instance.","input_schema":{"type":"object","properties":{"file_path":{"type":"string","description":"The absolute path to the file to modify"},"old_string":{"type":"string","description":"The text to replace"},"new_string":{"type":"string","description":"The text to replace it with (must be different from old_string)"},"replace_all":{"type":"boolean","default":false,"description":"Replace all occurences of old_string (default false)"}},"required":["file_path","old_string","new_string"],"additionalProperties":false,"$schema":"http://json-schema.org/draft-07/schema#"}},{"name":"MultiEdit","description":"This is a tool for making multiple edits to a single file in one operation. It is built on top of the Edit tool and allows you to perform multiple find-and-replace operations efficiently. Prefer this tool over the Edit tool when you need to make multiple edits to the same file.\n\nBefore using this tool:\n\n1. Use the Read tool to understand the file's contents and context\n2. Verify the directory path is correct\n\nTo make multiple file edits, provide the following:\n1. file_path: The absolute path to the file to modify (must be absolute, not relative)\n2. edits: An array of edit operations to perform, where each edit contains:\n   - old_string: The text to replace (must match the file contents exactly, including all whitespace and indentation)\n   - new_string: The edited text to replace the old_string\n   - replace_all: Replace all occurences of old_string. This parameter is optional and defaults to false.\n\nIMPORTANT:\n- All edits are applied in sequence, in the order they are provided\n- Each edit operates on the result of the previous edit\n- All edits must be valid for the operation to succeed - if any edit fails, none will be applied\n- This tool is ideal when you need to make several changes to different parts of the same file\n- For Jupyter notebooks (.ipynb files), use the NotebookEdit instead\n\nCRITICAL REQUIREMENTS:\n1. All edits follow the same requirements as the single Edit tool\n2. The edits are atomic - either all succeed or none are applied\n3. Plan your edits carefully to avoid conflicts between sequential operations\n\nWARNING:\n- The tool will fail if edits.old_string doesn't match the file contents exactly (including whitespace)\n- The tool will fail if edits.old_string and edits.new_string are the same\n- Since edits are applied in sequence, ensure that earlier edits don't affect the text that later edits are trying to find\n\nWhen making edits:\n- Ensure all edits result in idiomatic, correct code\n- Do not leave the code in a broken state\n- Always use absolute file paths (starting with /)\n- Only use emojis if the user explicitly requests it. Avoid adding emojis to files unless asked.\n- Use replace_all for replacing and renaming strings across the file. This parameter is useful if you want to rename a variable for instance.\n\nIf you want to create a new file, use:\n- A new file path, including dir name if needed\n- First edit: empty old_string and the new file's contents as new_string\n- Subsequent edits: normal edit operations on the created content","input_schema":{"type":"object","properties":{"file_path":{"type":"string","description":"The absolute path to the file to modify"},"edits":{"type":"array","items":{"type":"object","properties":{"old_string":{"type":"string","description":"The text to replace"},"new_string":{"type":"string","description":"The text to replace it with"},"replace_all":{"type":"boolean","default":false,"description":"Replace all occurences of old_string (default false)."}},"required":["old_string","new_string"],"additionalProperties":false},"minItems":1,"description":"Array of edit operations to perform sequentially on the file"}},"required":["file_path","edits"],"additionalProperties":false,"$schema":"http://json-schema.org/draft-07/schema#"}},{"name":"Write","description":"Writes a file to the local filesystem.\n\nUsage:\n- This tool will overwrite the existing file if there is one at the provided path.\n- If this is an existing file, you MUST use the Read tool first to read the file's contents. This tool will fail if you did not read the file first.\n- ALWAYS prefer editing existing files in the codebase. NEVER write new files unless explicitly required.\n- NEVER proactively create documentation files (*.md) or README files. Only create documentation files if explicitly requested by the User.\n- Only use emojis if the user explicitly requests it. Avoid writing emojis to files unless asked.","input_schema":{"type":"object","properties":{"file_path":{"type":"string","description":"The absolute path to the file to write (must be absolute, not relative)"},"content":{"type":"string","description":"The content to write to the file"}},"required":["file_path","content"],"additionalProperties":false,"$schema":"http://json-schema.org/draft-07/schema#"}},{"name":"NotebookRead","description":"Reads a Jupyter notebook (.ipynb file) and returns all of the cells with their outputs. Jupyter notebooks are interactive documents that combine code, text, and visualizations, commonly used for data analysis and scientific computing. The notebook_path parameter must be an absolute path, not a relative path.","input_schema":{"type":"object","properties":{"notebook_path":{"type":"string","description":"The absolute path to the Jupyter notebook file to read (must be absolute, not relative)"},"cell_id":{"type":"string","description":"The ID of a specific cell to read. If not provided, all cells will be read."}},"required":["notebook_path"],"additionalProperties":false,"$schema":"http://json-schema.org/draft-07/schema#"}},{"name":"NotebookEdit","description":"Completely replaces the contents of a specific cell in a Jupyter notebook (.ipynb file) with new source. Jupyter notebooks are interactive documents that combine code, text, and visualizations, commonly used for data analysis and scientific computing. The notebook_path parameter must be an absolute path, not a relative path. The cell_number is 0-indexed. Use edit_mode=insert to add a new cell at the index specified by cell_number. Use edit_mode=delete to delete the cell at the index specified by cell_number.","input_schema":{"type":"object","properties":{"notebook_path":{"type":"string","description":"The absolute path to the Jupyter notebook file to edit (must be absolute, not relative)"},"cell_id":{"type":"string","description":"The ID of the cell to edit. When inserting a new cell, the new cell will be inserted after the cell with this ID, or at the beginning if not specified."},"new_source":{"type":"string","description":"The new source for the cell"},"cell_type":{"type":"string","enum":["code","markdown"],"description":"The type of the cell (code or markdown). If not specified, it defaults to the current cell type. If using edit_mode=insert, this is required."},"edit_mode":{"type":"string","enum":["replace","insert","delete"],"description":"The type of edit to make (replace, insert, delete). Defaults to replace."}},"required":["notebook_path","new_source"],"additionalProperties":false,"$schema":"http://json-schema.org/draft-07/schema#"}},{"name":"WebFetch","description":"\n- Fetches content from a specified URL and processes it using an AI model\n- Takes a URL and a prompt as input\n- Fetches the URL content, converts HTML to markdown\n- Processes the content with the prompt using a small, fast model\n- Returns the model's response about the content\n- Use this tool when you need to retrieve and analyze web content\n\nUsage notes:\n  - IMPORTANT: If an MCP-provided web fetch tool is available, prefer using that tool instead of this one, as it may have fewer restrictions. All MCP-provided tools start with \"mcp__\".\n  - The URL must be a fully-formed valid URL\n  - HTTP URLs will be automatically upgraded to HTTPS\n  - The prompt should describe what information you want to extract from the page\n  - This tool is read-only and does not modify any files\n  - Results may be summarized if the content is very large\n  - Includes a self-cleaning 15-minute cache for faster responses when repeatedly accessing the same URL\n","input_schema":{"type":"object","properties":{"url":{"type":"string","format":"uri","description":"The URL to fetch content from"},"prompt":{"type":"string","description":"The prompt to run on the fetched content"}},"required":["url","prompt"],"additionalProperties":false,"$schema":"http://json-schema.org/draft-07/schema#"}},{"name":"TodoRead","description":"Use this tool to read the current to-do list for the session. This tool should be used proactively and frequently to ensure that you are aware of\nthe status of the current task list. You should make use of this tool as often as possible, especially in the following situations:\n- At the beginning of conversations to see what's pending\n- Before starting new tasks to prioritize work\n- When the user asks about previous tasks or plans\n- Whenever you're uncertain about what to do next\n- After completing tasks to update your understanding of remaining work\n- After every few messages to ensure you're on track\n\nUsage:\n- This tool takes in no parameters. So leave the input blank or empty. DO NOT include a dummy object, placeholder string or a key like \"input\" or \"empty\". LEAVE IT BLANK.\n- Returns a list of todo items with their status, priority, and content\n- Use this information to track progress and plan next steps\n- If no todos exist yet, an empty list will be returned","input_schema":{"type":"object","properties":{},"additionalProperties":false,"description":"No input is required, leave this field blank. NOTE that we do not require a dummy object, placeholder string or a key like \"input\" or \"empty\". LEAVE IT BLANK.","$schema":"http://json-schema.org/draft-07/schema#"}},{"name":"TodoWrite","description":"Use this tool to create and manage a structured task list for your current coding session. This helps you track progress, organize complex tasks, and demonstrate thoroughness to the user.\nIt also helps the user understand the progress of the task and overall progress of their requests.\n\n## When to Use This Tool\nUse this tool proactively in these scenarios:\n\n1. Complex multi-step tasks - When a task requires 3 or more distinct steps or actions\n2. Non-trivial and complex tasks - Tasks that require careful planning or multiple operations\n3. User explicitly requests todo list - When the user directly asks you to use the todo list\n4. User provides multiple tasks - When users provide a list of things to be done (numbered or comma-separated)\n5. After receiving new instructions - Immediately capture user requirements as todos\n6. When you start working on a task - Mark it as in_progress BEFORE beginning work. Ideally you should only have one todo as in_progress at a time\n7. After completing a task - Mark it as completed and add any new follow-up tasks discovered during implementation\n\n## When NOT to Use This Tool\n\nSkip using this tool when:\n1. There is only a single, straightforward task\n2. The task is trivial and tracking it provides no organizational benefit\n3. The task can be completed in less than 3 trivial steps\n4. The task is purely conversational or informational\n\nNOTE that you should not use this tool if there is only one trivial task to do. In this case you are better off just doing the task directly.\n\n## Examples of When to Use the Todo List\n\n<example>\nUser: I want to add a dark mode toggle to the application settings. Make sure you run the tests and build when you're done!\nAssistant: I'll help add a dark mode toggle to your application settings. Let me create a todo list to track this implementation.\n*Creates todo list with the following items:*\n1. Create dark mode toggle component in Settings page\n2. Add dark mode state management (context/store)\n3. Implement CSS-in-JS styles for dark theme\n4. Update existing components to support theme switching\n5. Run tests and build process, addressing any failures or errors that occur\n*Begins working on the first task*\n\n<reasoning>\nThe assistant used the todo list because:\n1. Adding dark mode is a multi-step feature requiring UI, state management, and styling changes\n2. The user explicitly requested tests and build be run afterward\n3. The assistant inferred that tests and build need to pass by adding \"Ensure tests and build succeed\" as the final task\n</reasoning>\n</example>\n\n<example>\nUser: Help me rename the function getCwd to getCurrentWorkingDirectory across my project\nAssistant: Let me first search through your codebase to find all occurrences of 'getCwd'.\n*Uses grep or search tools to locate all instances of getCwd in the codebase*\nAssistant: I've found 15 instances of 'getCwd' across 8 different files. Let me create a todo list to track these changes.\n*Creates todo list with specific items for each file that needs updating*\n\n<reasoning>\nThe assistant used the todo list because:\n1. First, the assistant searched to understand the scope of the task\n2. Upon finding multiple occurrences across different files, it determined this was a complex task with multiple steps\n3. The todo list helps ensure every instance is tracked and updated systematically\n4. This approach prevents missing any occurrences and maintains code consistency\n</reasoning>\n</example>\n\n\n<example>\nUser: I need to implement these features for my e-commerce site: user registration, product catalog, shopping cart, and checkout flow.\nAssistant: I'll help implement these features. First, let's add all the features to the todo list.\n*Creates a todo list breaking down each feature into specific tasks based on the project architecture*\nAssistant: Let's start with user registration. This will involve creating database models, API endpoints, and frontend forms that integrate with your existing authentication system.\n\n<reasoning>\nThe assistant used the todo list because:\n1. The user provided multiple complex features to implement in a comma separated list\n2. The todo list helps organize these large features into manageable tasks\n3. This approach allows for tracking progress across the entire implementation\n</reasoning>\n</example>\n\n<example>\nUser: Can you help optimize my React application? It's rendering slowly and has performance issues.</user>\nAssistant: I'll help optimize your React application. First, let me examine your codebase to identify potential performance bottlenecks.\n*Reviews component structure, render patterns, state management, and data fetching*\nAssistant: After analyzing your codebase, I've identified several performance issues. Let me create a todo list to track our optimization efforts.\n*Creates todo list with items like: 1) Implement memoization for expensive calculations in ProductList, 2) Add virtualization for long lists in Dashboard, 3) Optimize image loading in Gallery component, 4) Fix state update loops in ShoppingCart, 5) Review bundle size and implement code splitting*\nLet's start by implementing memoization for the expensive calculations in your ProductList component.</assistant>\n\n<reasoning>\nThe assistant used the todo list because:\n1. First, the assistant examined the codebase to identify specific performance issues\n2. Based on this analysis, it identified multiple optimization opportunities\n3. Performance optimization is a non-trivial task requiring multiple steps\n4. The todo list helps methodically track improvements across different components\n5. This systematic approach ensures all performance bottlenecks are addressed\n</reasoning>\n</example>\n\n## Examples of When NOT to Use the Todo List\n\n<example>\nUser: How do I print 'Hello World' in Python?\nAssistant: In Python, you can print \"Hello World\" with this simple code:\n\npython\nprint(\"Hello World\")\n\nThis will output the text \"Hello World\" to the console when executed.</assistant>\n\n<reasoning>\nThe assistant did not use the todo list because this is a single, trivial task that can be completed in one step. There's no need to track multiple tasks or steps for such a straightforward request.\n</reasoning>\n</example>\n\n<example>\nUser: What does the git status command do?\nAssistant: The git status command shows the current state of your working directory and staging area. It displays which changes have been staged, which haven't, and which files aren't being tracked by Git. This is a fundamental command for understanding the current state of your repository before making commits.\n\n<reasoning>\nThe assistant did not use the todo list because this is an informational request with no actual coding task to complete. The user is simply asking for an explanation, not for the assistant to perform multiple steps or tasks.\n</reasoning>\n</example>\n\n<example>\nUser: Can you add a comment to the calculateTotal function to explain what it does?\nAssistant: Sure, let me add a comment to the calculateTotal function to explain what it does.\n* Uses the Edit tool to add a comment to the calculateTotal function *\n\n<reasoning>\nThe assistant did not use the todo list because this is a single, straightforward task confined to one location in the code. Adding a comment doesn't require tracking multiple steps or systematic organization.\n</reasoning>\n</example>\n\n<example>\nUser: Run npm install for me and tell me what happens.\nAssistant: I'll run the npm install command for you.\n\n*Executes: npm install*\n\nThe command completed successfully. Here's the output:\n[Output of npm install command]\n\nAll dependencies have been installed according to your package.json file.\n\n<reasoning>\nThe assistant did not use the todo list because this is a single command execution with immediate results. There are no multiple steps to track or organize, making the todo list unnecessary for this straightforward task.\n</reasoning>\n</example>\n\n## Task States and Management\n\n1. **Task States**: Use these states to track progress:\n   - pending: Task not yet started\n   - in_progress: Currently working on (limit to ONE task at a time)\n   - completed: Task finished successfully\n\n2. **Task Management**:\n   - Update task status in real-time as you work\n   - Mark tasks complete IMMEDIATELY after finishing (don't batch completions)\n   - Only have ONE task in_progress at any time\n   - Complete current tasks before starting new ones\n   - Remove tasks that are no longer relevant from the list entirely\n\n3. **Task Completion Requirements**:\n   - ONLY mark a task as completed when you have FULLY accomplished it\n   - If you encounter errors, blockers, or cannot finish, keep the task as in_progress\n   - When blocked, create a new task describing what needs to be resolved\n   - Never mark a task as completed if:\n     - Tests are failing\n     - Implementation is partial\n     - You encountered unresolved errors\n     - You couldn't find necessary files or dependencies\n\n4. **Task Breakdown**:\n   - Create specific, actionable items\n   - Break complex tasks into smaller, manageable steps\n   - Use clear, descriptive task names\n\nWhen in doubt, use this tool. Being proactive with task management demonstrates attentiveness and ensures you complete all requirements successfully.\n","input_schema":{"type":"object","properties":{"todos":{"type":"array","items":{"type":"object","properties":{"content":{"type":"string","minLength":1},"status":{"type":"string","enum":["pending","in_progress","completed"]},"priority":{"type":"string","enum":["high","medium","low"]},"id":{"type":"string"}},"required":["content","status","priority","id"],"additionalProperties":false},"description":"The updated todo list"}},"required":["todos"],"additionalProperties":false,"$schema":"http://json-schema.org/draft-07/schema#"}},{"name":"WebSearch","description":"\n- Allows Claude to search the web and use the results to inform responses\n- Provides up-to-date information for current events and recent data\n- Returns search result information formatted as search result blocks\n- Use this tool for accessing information beyond Claude's knowledge cutoff\n- Searches are performed automatically within a single API call\n\nUsage notes:\n  - Domain filtering is supported to include or block specific websites\n  - Web search is only available in the US\n","input_schema":{"type":"object","properties":{"query":{"type":"string","minLength":2,"description":"The search query to use"},"allowed_domains":{"type":"array","items":{"type":"string"},"description":"Only include search results from these domains"},"blocked_domains":{"type":"array","items":{"type":"string"},"description":"Never include search results from these domains"}},"required":["query"],"additionalProperties":false,"$schema":"http://json-schema.org/draft-07/schema#"}}],"metadata":{"user_id":"6fdb956499039f35b30a669aaefbde191cd60254fd0ac9a5789f81bb0bc34d4a"},"max_tokens":32000,"thinking":{"budget_tokens":31999,"type":"enabled"},"stream":true}},"response":{"timestamp":1750834622.431,"status_code":200,"headers":{"anthropic-organization-id":"801cf168-994a-4b1f-aec0-3e40c50852eb","anthropic-ratelimit-unified-fallback-percentage":"0.5","anthropic-ratelimit-unified-reset":"1750834800","anthropic-ratelimit-unified-status":"allowed","cache-control":"no-cache","cf-cache-status":"DYNAMIC","cf-ray":"955291522a6b3233-LAX","connection":"keep-alive","content-type":"text/event-stream; charset=utf-8","date":"Wed, 25 Jun 2025 06:57:02 GMT","request-id":"req_011CQUWA5d7E1H1dGN6UUWw3","server":"cloudflare","strict-transport-security":"max-age=31536000; includeSubDomains; preload","transfer-encoding":"chunked","via":"1.1 google","x-robots-tag":"none"},"body_raw":"event: message_start\ndata: {\"type\":\"message_start\",\"message\":{\"id\":\"msg_01ENZXfw4nPW8w7cWngZSmMP\",\"type\":\"message\",\"role\":\"assistant\",\"model\":\"claude-sonnet-4-20250514\",\"content\":[],\"stop_reason\":null,\"stop_sequence\":null,\"usage\":{\"input_tokens\":14,\"cache_creation_input_tokens\":14437,\"cache_read_input_tokens\":14445,\"output_tokens\":9,\"service_tier\":\"standard\"}}               }\n\nevent: content_block_start\ndata: {\"type\":\"content_block_start\",\"index\":0,\"content_block\":{\"type\":\"thinking\",\"thinking\":\"\",\"signature\":\"\"}    }\n\nevent: ping\ndata: {\"type\": \"ping\"}\n\nevent: content_block_delta\ndata: {\"type\":\"content_block_delta\",\"index\":0,\"delta\":{\"type\":\"thinking_delta\",\"thinking\":\"Based on the file contents I've rea\"}    }\n\nevent: content_block_delta\ndata: {\"type\":\"content_block_delta\",\"index\":0,\"delta\":{\"type\":\"thinking_delta\",\"thinking\":\"d, I can see that \\\"ultra\"}}\n\nevent: content_block_delta\ndata: {\"type\":\"content_block_delta\",\"index\":0,\"delta\":{\"type\":\"thinking_delta\",\"thinking\":\"think\\\" is mentioned in several places:\\n\\n1\"}            }\n\nevent: content_block_delta\ndata: {\"type\":\"content_block_delta\",\"index\":0,\"delta\":{\"type\":\"thinking_delta\",\"thinking\":\". In the CHANGELOG.md (\"}             }\n\nevent: content_block_delta\ndata: {\"type\":\"content_block_delta\",\"index\":0,\"delta\":{\"type\":\"thinking_delta\",\"thinking\":\"line 293): \\\"Ask Claude to make\"}          }\n\nevent: content_block_delta\ndata: {\"type\":\"content_block_delta\",\"index\":0,\"delta\":{\"type\":\"thinking_delta\",\"thinking\":\" a plan with thinking mode: just say 'think\"}           }\n\nevent: content_block_delta\ndata: {\"type\":\"content_block_delta\",\"index\":0,\"delta\":{\"type\":\"thinking_delta\",\"thinking\":\"' or 'think harder' or\"}            }\n\nevent: content_block_delta\ndata: {\"type\":\"content_block_delta\",\"index\":0,\"delta\":{\"type\":\"thinking_delta\",\"thinking\":\" even 'ultrathink'\\\"\"}            }\n\nevent: content_block_delta\ndata: {\"type\":\"content_block_delta\",\"index\":0,\"delta\":{\"type\":\"thinking_delta\",\"thinking\":\"\\n\\n2. In the README.md (\"}            }\n\nevent: content_block_delta\ndata: {\"type\":\"content_block_delta\",\"index\":0,\"delta\":{\"type\":\"thinking_delta\",\"thinking\":\"line 31): Shows an example comman\"}             }\n\nevent: content_block_delta\ndata: {\"type\":\"content_block_delta\",\"index\":0,\"delta\":{\"type\":\"thinking_delta\",\"thinking\":\"d \\\"what's the best practice for using\"}             }\n\nevent: content_block_delta\ndata: {\"type\":\"content_block_delta\",\"index\":0,\"delta\":{\"type\":\"thinking_delta\",\"thinking\":\" claude code? what's ultra\"}         }\n\nevent: content_block_delta\ndata: {\"type\":\"content_block_delta\",\"index\":0,\"delta\":{\"type\":\"thinking_delta\",\"thinking\":\"think?\\\"\\n\\n3. In the\"}  }\n\nevent: content_block_delta\ndata: {\"type\":\"content_block_delta\",\"index\":0,\"delta\":{\"type\":\"thinking_delta\",\"thinking\":\" best practices blog post (line 146\"}           }\n\nevent: content_block_delta\ndata: {\"type\":\"content_block_delta\",\"index\":0,\"delta\":{\"type\":\"thinking_delta\",\"thinking\":\"): \\\"These specific phrases are mappe\"}               }\n\nevent: content_block_delta\ndata: {\"type\":\"content_block_delta\",\"index\":0,\"delta\":{\"type\":\"thinking_delta\",\"thinking\":\"d directly to increasing levels of thinking budget\"}    }\n\nevent: content_block_delta\ndata: {\"type\":\"content_block_delta\",\"index\":0,\"delta\":{\"type\":\"thinking_delta\",\"thinking\":\" in the system: \\\"think\\\" \"}       }\n\nevent: content_block_delta\ndata: {\"type\":\"content_block_delta\",\"index\":0,\"delta\":{\"type\":\"thinking_delta\",\"thinking\":\"< \\\"think hard\\\" < \\\"think\"}       }\n\nevent: content_block_delta\ndata: {\"type\":\"content_block_delta\",\"index\":0,\"delta\":{\"type\":\"thinking_delta\",\"thinking\":\" harder\\\" < \\\"ultrathink.\\\"\"}       }\n\nevent: content_block_delta\ndata: {\"type\":\"content_block_delta\",\"index\":0,\"delta\":{\"type\":\"thinking_delta\",\"thinking\":\" Each level allocates progressively more thinking budget\"}}\n\nevent: content_block_delta\ndata: {\"type\":\"content_block_delta\",\"index\":0,\"delta\":{\"type\":\"thinking_delta\",\"thinking\":\" for Claude to use.\\\"\\n\\nSo \\\"\"}            }\n\nevent: content_block_delta\ndata: {\"type\":\"content_block_delta\",\"index\":0,\"delta\":{\"type\":\"thinking_delta\",\"thinking\":\"ultrathink\\\" is a\"}           }\n\nevent: content_block_delta\ndata: {\"type\":\"content_block_delta\",\"index\":0,\"delta\":{\"type\":\"thinking_delta\",\"thinking\":\" specific command/keyword in\"}       }\n\nevent: content_block_delta\ndata: {\"type\":\"content_block_delta\",\"index\":0,\"delta\":{\"type\":\"thinking_delta\",\"thinking\":\" Claude Code that triggers the highest\"}               }\n\nevent: content_block_delta\ndata: {\"type\":\"content_block_delta\",\"index\":0,\"delta\":{\"type\":\"thinking_delta\",\"thinking\":\" level of extended thinking mode. It's part\"}   }\n\nevent: content_block_delta\ndata: {\"type\":\"content_block_delta\",\"index\":0,\"delta\":{\"type\":\"thinking_delta\",\"thinking\":\" of a hierarchy of thinking commands that allocate different\"}}\n\nevent: content_block_delta\ndata: {\"type\":\"content_block_delta\",\"index\":0,\"delta\":{\"type\":\"thinking_delta\",\"thinking\":\" amounts of computational budget for Claude\"}   }\n\nevent: content_block_delta\ndata: {\"type\":\"content_block_delta\",\"index\":0,\"delta\":{\"type\":\"thinking_delta\",\"thinking\":\" to use when planning and analyzing\"}            }\n\nevent: content_block_delta\ndata: {\"type\":\"content_block_delta\",\"index\":0,\"delta\":{\"type\":\"thinking_delta\",\"thinking\":\" problems.\\n\\nThe user is asking a\"}      }\n\nevent: content_block_delta\ndata: {\"type\":\"content_block_delta\",\"index\":0,\"delta\":{\"type\":\"thinking_delta\",\"thinking\":\" very short question, so I should give\"}       }\n\nevent: content_block_delta\ndata: {\"type\":\"content_block_delta\",\"index\":0,\"delta\":{\"type\":\"thinking_delta\",\"thinking\":\" a concise answer according to the instructions.\"}              }\n\nevent: content_block_delta\ndata: {\"type\":\"content_block_delta\",\"index\":0,\"delta\":{\"type\":\"signature_delta\",\"signature\":\"ErAJCkYIBBgCKkAIaI7QU6BSPZtTp83UlN8/tp65k5Lx6Fihbvj2fYqrT+PTZCcb2/HT4os+6LepjduYV66UmuQFS7Nz+vw56HKHEgyKvDOehVUrLoQvVl4aDOVNLlfaNzUfpzLb0SIwWp72iZ5UU3zM4J+fdr38Ca2ujsEqYo+h1Dv2WYEhUlM3WonzEq3xhRUoLwDXwR5PKpcIMGKHubZ1VWJoyL3Vd/Lvq5SZ7JKTp0fFn0IIW90RBKdOAOp4LD09DxxDtBcFMiMgaJROHfOhw5yVvDLxEcQplOSQ5d5rFYHcdI0jwRRzqA+2xhtPuNnJVT2vX8HuspOIoiqCS8iW43yYseVSRnfzxN6BAmDXC9EhC3pt4ZINcC4RfzrVcyj15G8f+BGbD4f3zQ+PU6oan5kfoOyxjKacdB5yf22bMuo8x+Bv4XwG7Gb/bFZ5tQlB+zMTgmCJgZ8x2aEuaxkNHkBp46mq/16ShnCpPaZP1ctjIpMBSln248LKuU0Cq0ghM94YYVwJLhn4YHzPQ5eUBFO2He29plc5kvCdCJTwco8HhaEF6+RbDz2x3YKhdWDfH+cT29wA2GqcUvcjvCXte9agPBH3bhAY14+B32K2fd2Eja+uBiL9kbGBnszou1PdS7kEneQC6O+z58K+onYHlBkHHKfs//gOb6OD1uPZeTbFpEAFcDZO1EmXIiCyC58c4glgSyr8zmnJxWHDC6yIrfo24WgljqbjWwhxSCXH533sHHrIcO5TM2XdlDIBt0RGUmeI3ey+qH5r5QK7/pDyLSNRjD5ElqSetcn7ltanCUaG8VxebGsb+SIbbaHNMSDaB3e8pWZDt9RuNgft+OLS9MYs6pr9igf22pSW3b8vIyOES6CNRVFhpIKopD+3sEK+riLlt7dWbcmEWRTlAQHYjh9RvUlbt7ank54SLJYJ3kxMoAQia3qmrNXUQZQ4Ka0a/Zoo3svPU15mql9NN2As8jpAmbW0bRDnvkLF4734h+xiL31LF379cpXsMth1AiJzvUNCWVFh9GtfbmyNBJ3fVtjyIk0seUX+es9dFStfORkiPFyVYFUeEhhkGw4ouVzaLDKTqO5oQQqDFW/ty2xDO3DGT+HOHpsJt/6DUy3ItBylnLIfzJ2yI4HU/CAnLTTmlBoK/6ZDZEXr/d+5pf9v1qjQWwnXmz3gmIzbzSKrSQrj+LvEHtsJsIEZaQzxwXUBhjvo+FD0T6E39otcXm2/hmQkvTuGx29Lny8ajw6Wqh/q9ri2bsZL+ild5Xah2Mq3nA/NLh0hZW+u4l48xk4KBlqzz2xqhXlXMc/ED1eWhALfevhfCD7PXFPaSbgs65mhr2wAAyY7Uo1r4u6LTir87cvrAv5Ek3T8J9Qv911T1bPDe5np0vMXxFHawEBkgNvshgkb1hQCCMbEniD2pqib4N0CzIBI5owoNtXG6DhwVJiqQlYNiu+cQKvLaxCToyfPzH1LKVVnkTjjj8gsGTjf+FZ5TVmz7oF2MEfrc/9wkKEDjOuxSbrzgn/DjiNuFtwtW4RgK/YI9/Uo1wXBQsrubSSo3XwFVpEpn0YkIx17p+LaGR+4Qb+zFtPDIJsDKhJOGAE=\"}    }\n\nevent: content_block_stop\ndata: {\"type\":\"content_block_stop\",\"index\":0       }\n\nevent: content_block_start\ndata: {\"type\":\"content_block_start\",\"index\":1,\"content_block\":{\"type\":\"text\",\"text\":\"\"}  }\n\nevent: content_block_delta\ndata: {\"type\":\"content_block_delta\",\"index\":1,\"delta\":{\"type\":\"text_delta\",\"text\":\"Ultrathink is\"}         }\n\nevent: content_block_delta\ndata: {\"type\":\"content_block_delta\",\"index\":1,\"delta\":{\"type\":\"text_delta\",\"text\":\" a Claude Code command that triggers the highest level of\"}          }\n\nevent: content_block_delta\ndata: {\"type\":\"content_block_delta\",\"index\":1,\"delta\":{\"type\":\"text_delta\",\"text\":\" extended thinking mode. It's part\"}       }\n\nevent: content_block_delta\ndata: {\"type\":\"content_block_delta\",\"index\":1,\"delta\":{\"type\":\"text_delta\",\"text\":\" of a hierarchy: `think` < `think hard`\"}          }\n\nevent: content_block_delta\ndata: {\"type\":\"content_block_delta\",\"index\":1,\"delta\":{\"type\":\"text_delta\",\"text\":\" < `think harder` < `ultrathink`,\"}               }\n\nevent: content_block_delta\ndata: {\"type\":\"content_block_delta\",\"index\":1,\"delta\":{\"type\":\"text_delta\",\"text\":\" with each level allocating progressively more thinking\"} }\n\nevent: content_block_delta\ndata: {\"type\":\"content_block_delta\",\"index\":1,\"delta\":{\"type\":\"text_delta\",\"text\":\" budget for deeper analysis an\"}   }\n\nevent: content_block_delta\ndata: {\"type\":\"content_block_delta\",\"index\":1,\"delta\":{\"type\":\"text_delta\",\"text\":\"d planning.\"} }\n\nevent: content_block_stop\ndata: {\"type\":\"content_block_stop\",\"index\":1         }\n\nevent: message_delta\ndata: {\"type\":\"message_delta\",\"delta\":{\"stop_reason\":\"end_turn\",\"stop_sequence\":null},\"usage\":{\"output_tokens\":316}            }\n\nevent: message_stop\ndata: {\"type\":\"message_stop\"          }\n\n"},"logged_at":"2025-06-25T06:57:09.411Z"}
